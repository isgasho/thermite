var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[3,"SimdBuffer","thermite","Aligned SIMD vector storage",null,null],[3,"Vptr","","",null,null],[3,"Mask","","",null,null],[11,"alloc","","",0,[[]]],[11,"fill","","",0,[[]]],[11,"len","","",0,[[]]],[11,"len_vectors","","",0,[[]]],[11,"as_slice","","",0,[[]]],[11,"as_vector_slice","","",0,[[]]],[11,"as_mut_slice","","",0,[[]]],[11,"as_mut_vector_slice","","",0,[[]]],[11,"load_vector","","",0,[[]]],[11,"store_vector","","",0,[[]]],[0,"backends","","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"AVX2","thermite::backends::avx2","",null,null],[3,"i32x8","","",null,null],[3,"u64x8","","",null,null],[3,"f32x8","","",null,null],[3,"f64x8","","",null,null],[11,"splat","thermite","",1,[[]]],[11,"add","","",1,[[]]],[11,"value","","",2,[[]]],[11,"from_value","","",2,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",2,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",2,[[]]],[11,"all","","Returns `true` if all lanes are truthy",2,[[]]],[11,"any","","Returns `true` if any lanes are truthy",2,[[]]],[11,"none","","Returns `true` if all lanes are falsey",2,[[]]],[11,"count","","Counts the number of truthy lanes",2,[[]]],[11,"select","","For each lane, selects from `t` if the mask lane is…",2,[[]]],[8,"SimdFloatVectorExt","","",null,null],[11,"approx_eq","","",3,[[],["mask",3]]],[11,"clamp","","",3,[[]]],[11,"saturate","","Clamps self to between 0 and 1",3,[[]]],[11,"scale","","Scales values between `in_min` and `in_max`, to between…",3,[[]]],[11,"lerp","","Linearly interpolates between `a` and `b` using `self`",3,[[]]],[11,"safe_sqrt","","Clamps input to positive numbers before calling `sqrt`",3,[[]]],[8,"SimdCastFrom","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","",4,[[]]],[10,"from_cast_mask","","",4,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","",5,[[]]],[10,"cast_mask","","",5,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction set",null,null],[11,"cast_to","","",6,[[],["simdcastfrom",8]]],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",7,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",7,null],[18,"NUM_ELEMENTS","","",7,null],[18,"ALIGNMENT","","",7,null],[10,"splat","","",7,[[]]],[11,"splat_any","","",7,[[]]],[11,"extract","","",7,[[]]],[11,"replace","","",7,[[]]],[10,"extract_unchecked","","",7,[[]]],[10,"replace_unchecked","","",7,[[]]],[11,"load_aligned","","",7,[[]]],[11,"load_unaligned","","",7,[[]]],[11,"store_aligned","","",7,[[]]],[11,"store_unaligned","","",7,[[]]],[10,"load_aligned_unchecked","","",7,[[]]],[10,"store_aligned_unchecked","","",7,[[]]],[11,"load_unaligned_unchecked","","",7,[[]]],[11,"store_unaligned_unchecked","","",7,[[]]],[11,"alloc","","",7,[[],["simdbuffer",3]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes `!self & other`, may be more performant than the…",8,[[]]],[18,"FULL_BITMASK","","",8,null],[10,"bitmask","","",8,[[]]],[8,"SimdVector","","Alias for vector mask type Defines common operations on…",null,null],[10,"zero","","",9,[[]]],[10,"one","","",9,[[]]],[10,"min_value","","Maximum representable valid value",9,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",9,[[]]],[11,"min","","Per-lane, select the minimum value",9,[[]]],[11,"max","","Per-lane, select the maximum value",9,[[]]],[10,"min_element","","Find the minimum value across all lanes",9,[[]]],[10,"max_element","","Find the maximum value across all lanes",9,[[]]],[10,"eq","","",9,[[],["mask",3]]],[11,"ne","","",9,[[],["mask",3]]],[11,"lt","","",9,[[],["mask",3]]],[11,"le","","",9,[[],["mask",3]]],[11,"gt","","",9,[[],["mask",3]]],[11,"ge","","",9,[[],["mask",3]]],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[11,"saturating_add","","Saturating addition, will not wrap",10,[[]]],[11,"saturating_sub","","Saturating subtraction, will not wrap",10,[[]]],[11,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t…",10,[[]]],[11,"wrapping_product","","Multiple all lanes together, wrapping the result if it…",10,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",11,[[]]],[10,"min_positive","","Minimum positive number",11,[[]]],[11,"abs","","Absolute value",11,[[]]],[11,"copysign","","Copies the sign from `sign` to `self`",11,[[]]],[11,"signum","","Returns `-1` is less than zero, `+1` otherwise.",11,[[]]],[11,"is_positive","","Test if positive, greater or equal to zero",11,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",11,[[],["mask",3]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[10,"epsilon","","",12,[[]]],[10,"infinity","","",12,[[]]],[10,"neg_infinity","","",12,[[]]],[10,"neg_zero","","",12,[[]]],[10,"nan","","",12,[[]]],[10,"sum","","Compute the horizontal sum of all elements",12,[[]]],[10,"product","","Compute the horizontal product of all elements",12,[[]]],[11,"mul_add","","Fused multiply-add",12,[[]]],[11,"mul_sub","","Fused multiply-subtract",12,[[]]],[11,"neg_mul_add","","Fused negated multiple-add",12,[[]]],[11,"neg_mul_sub","","Fused negated multiple-subtract",12,[[]]],[10,"round","","",12,[[]]],[10,"ceil","","",12,[[]]],[10,"floor","","",12,[[]]],[10,"trunc","","",12,[[]]],[11,"fract","","",12,[[]]],[10,"sqrt","","",12,[[]]],[11,"rsqrt","","Compute the reciprocal of the square root `(1 / sqrt(x))`",12,[[]]],[11,"rsqrt_precise","","A more precise `1 / sqrt(x)` variation, which may use…",12,[[]]],[11,"recepr","","Computes the approximate reciprocal/inverse of each value",12,[[]]],[11,"is_finite","","",12,[[],["mask",3]]],[11,"is_infinite","","",12,[[],["mask",3]]],[11,"is_normal","","",12,[[],["mask",3]]],[11,"is_nan","","",12,[[],["mask",3]]],[8,"Simd","","SIMD Instruction set",null,null],[16,"Vi32","","",13,null],[16,"Vu64","","",13,null],[16,"Vf32","","",13,null],[16,"Vf64","","",13,null],[16,"Vusize","","",13,null],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from_cast","","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",2,[[]]],[11,"from_cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"cast","","",2,[[]]],[11,"cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx2","",14,[[]]],[11,"from_cast_mask","","",14,[[["mask",3]],["mask",3]]],[11,"cast","","",14,[[]]],[11,"cast_mask","","",14,[[["mask",3]],["mask",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from_cast","","",15,[[]]],[11,"from_cast_mask","","",15,[[["mask",3]],["mask",3]]],[11,"cast","","",15,[[]]],[11,"cast_mask","","",15,[[["mask",3]],["mask",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from_cast","","",16,[[]]],[11,"from_cast_mask","","",16,[[["mask",3]],["mask",3]]],[11,"cast","","",16,[[]]],[11,"cast_mask","","",16,[[["mask",3]],["mask",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from_cast","","",17,[[]]],[11,"from_cast_mask","","",17,[[["mask",3]],["mask",3]]],[11,"cast","","",17,[[]]],[11,"cast_mask","","",17,[[["mask",3]],["mask",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from_cast","","",18,[[]]],[11,"from_cast_mask","","",18,[[["mask",3]],["mask",3]]],[11,"cast","","",18,[[]]],[11,"cast_mask","","",18,[[["mask",3]],["mask",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from_cast","","",17,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",17,[[["i32x8",3],["avx2",3],["mask",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",17,[[["avx2",3],["u64x8",3]]]],[11,"from_cast_mask","","",17,[[["mask",3],["avx2",3],["u64x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",15,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",15,[[["mask",3],["avx2",3],["f32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",15,[[["avx2",3],["u64x8",3]]]],[11,"from_cast_mask","","",15,[[["mask",3],["avx2",3],["u64x8",3]],[["avx2",3],["mask",3]]]],[11,"splat","","",15,[[]]],[11,"load_aligned_unchecked","","",15,[[]]],[11,"load_unaligned_unchecked","","",15,[[]]],[11,"store_aligned_unchecked","","",15,[[]]],[11,"store_unaligned_unchecked","","",15,[[]]],[11,"extract_unchecked","","",15,[[]]],[11,"replace_unchecked","","",15,[[]]],[11,"splat","","",17,[[]]],[11,"load_aligned_unchecked","","",17,[[]]],[11,"load_unaligned_unchecked","","",17,[[]]],[11,"store_aligned_unchecked","","",17,[[]]],[11,"store_unaligned_unchecked","","",17,[[]]],[11,"extract_unchecked","","",17,[[]]],[11,"replace_unchecked","","",17,[[]]],[11,"splat","","",16,[[]]],[11,"load_aligned_unchecked","","",16,[[]]],[11,"store_aligned_unchecked","","",16,[[]]],[11,"extract_unchecked","","",16,[[]]],[11,"replace_unchecked","","",16,[[]]],[11,"splat","","",18,[[]]],[11,"load_aligned_unchecked","","",18,[[]]],[11,"store_aligned_unchecked","","",18,[[]]],[11,"extract_unchecked","","",18,[[]]],[11,"replace_unchecked","","",18,[[]]],[11,"splat","thermite","",2,[[]]],[11,"load_aligned_unchecked","","",2,[[]]],[11,"store_aligned_unchecked","","",2,[[]]],[11,"extract_unchecked","","",2,[[]]],[11,"replace_unchecked","","",2,[[]]],[11,"and_not","thermite::backends::avx2","",15,[[]]],[11,"bitmask","","",15,[[]]],[11,"_mm_not","","",15,[[]]],[11,"_mm_bitand","","",15,[[]]],[11,"_mm_bitor","","",15,[[]]],[11,"_mm_bitxor","","",15,[[]]],[11,"_mm_shr","","",15,[[["i32x8",3],["avx2",3]]]],[11,"_mm_shl","","",15,[[["i32x8",3],["avx2",3]]]],[11,"and_not","","",17,[[]]],[11,"bitmask","","",17,[[]]],[11,"_mm_not","","",17,[[]]],[11,"_mm_bitand","","",17,[[]]],[11,"_mm_bitor","","",17,[[]]],[11,"_mm_bitxor","","",17,[[]]],[11,"_mm_shr","","",17,[[["i32x8",3],["avx2",3]]]],[11,"_mm_shl","","",17,[[["i32x8",3],["avx2",3]]]],[11,"and_not","","",16,[[]]],[11,"bitmask","","",16,[[]]],[11,"_mm_not","","",16,[[]]],[11,"_mm_bitand","","",16,[[]]],[11,"_mm_bitor","","",16,[[]]],[11,"_mm_bitxor","","",16,[[]]],[11,"_mm_shr","","",16,[[["i32x8",3],["avx2",3]]]],[11,"_mm_shl","","",16,[[["i32x8",3],["avx2",3]]]],[11,"and_not","","",18,[[]]],[11,"bitmask","","",18,[[]]],[11,"_mm_not","","",18,[[]]],[11,"_mm_bitand","","",18,[[]]],[11,"_mm_bitor","","",18,[[]]],[11,"_mm_bitxor","","",18,[[]]],[11,"_mm_shr","","",18,[[["i32x8",3],["avx2",3]]]],[11,"_mm_shl","","",18,[[["i32x8",3],["avx2",3]]]],[11,"and_not","thermite","",2,[[]]],[11,"bitmask","","",2,[[]]],[11,"_mm_not","","",2,[[]]],[11,"_mm_bitand","","",2,[[]]],[11,"_mm_bitor","","",2,[[]]],[11,"_mm_bitxor","","",2,[[]]],[11,"_mm_shr","","",2,[[]]],[11,"_mm_shl","","",2,[[]]],[11,"zero","thermite::backends::avx2","",15,[[]]],[11,"one","","",15,[[]]],[11,"min_value","","",15,[[]]],[11,"max_value","","",15,[[]]],[11,"min_element","","",15,[[]]],[11,"max_element","","",15,[[]]],[11,"eq","","",15,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",15,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",15,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",15,[[]]],[11,"_mm_sub","","",15,[[]]],[11,"_mm_mul","","",15,[[]]],[11,"_mm_div","","",15,[[]]],[11,"_mm_rem","","",15,[[]]],[11,"zero","","",17,[[]]],[11,"one","","",17,[[]]],[11,"min_value","","",17,[[]]],[11,"max_value","","",17,[[]]],[11,"min","","",17,[[]]],[11,"max","","",17,[[]]],[11,"min_element","","",17,[[]]],[11,"max_element","","",17,[[]]],[11,"eq","","",17,[[],[["avx2",3],["mask",3]]]],[11,"ne","","",17,[[],[["avx2",3],["mask",3]]]],[11,"lt","","",17,[[],[["avx2",3],["mask",3]]]],[11,"le","","",17,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",17,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",17,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",17,[[]]],[11,"_mm_sub","","",17,[[]]],[11,"_mm_mul","","",17,[[]]],[11,"_mm_div","","",17,[[]]],[11,"_mm_rem","","",17,[[]]],[11,"zero","","",16,[[]]],[11,"one","","",16,[[]]],[11,"min_value","","",16,[[]]],[11,"max_value","","",16,[[]]],[11,"min_element","","",16,[[]]],[11,"max_element","","",16,[[]]],[11,"eq","","",16,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",16,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",16,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",16,[[]]],[11,"_mm_sub","","",16,[[]]],[11,"_mm_mul","","",16,[[]]],[11,"_mm_div","","",16,[[]]],[11,"_mm_rem","","",16,[[]]],[11,"zero","","",18,[[]]],[11,"one","","",18,[[]]],[11,"min_value","","",18,[[]]],[11,"max_value","","",18,[[]]],[11,"min","","",18,[[]]],[11,"max","","",18,[[]]],[11,"min_element","","",18,[[]]],[11,"max_element","","",18,[[]]],[11,"eq","","",18,[[],[["avx2",3],["mask",3]]]],[11,"ne","","",18,[[],[["avx2",3],["mask",3]]]],[11,"lt","","",18,[[],[["avx2",3],["mask",3]]]],[11,"le","","",18,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",18,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",18,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",18,[[]]],[11,"_mm_sub","","",18,[[]]],[11,"_mm_mul","","",18,[[]]],[11,"_mm_div","","",18,[[]]],[11,"_mm_rem","","",18,[[]]],[11,"neg_one","","",15,[[]]],[11,"min_positive","","",15,[[]]],[11,"abs","","",15,[[]]],[11,"_mm_neg","","",15,[[]]],[11,"neg_one","","",17,[[]]],[11,"min_positive","","",17,[[]]],[11,"signum","","",17,[[]]],[11,"copysign","","",17,[[]]],[11,"abs","","",17,[[]]],[11,"_mm_neg","","",17,[[]]],[11,"neg_one","","",18,[[]]],[11,"min_positive","","",18,[[]]],[11,"signum","","",18,[[]]],[11,"copysign","","",18,[[]]],[11,"abs","","",18,[[]]],[11,"_mm_neg","","",18,[[]]],[11,"epsilon","","",17,[[]]],[11,"infinity","","",17,[[]]],[11,"neg_infinity","","",17,[[]]],[11,"neg_zero","","",17,[[]]],[11,"nan","","",17,[[]]],[11,"sum","","",17,[[]]],[11,"product","","",17,[[]]],[11,"mul_add","","",17,[[]]],[11,"mul_sub","","",17,[[]]],[11,"neg_mul_add","","",17,[[]]],[11,"neg_mul_sub","","",17,[[]]],[11,"floor","","",17,[[]]],[11,"ceil","","",17,[[]]],[11,"round","","",17,[[]]],[11,"trunc","","",17,[[]]],[11,"sqrt","","",17,[[]]],[11,"rsqrt","","",17,[[]]],[11,"rsqrt_precise","","",17,[[]]],[11,"recepr","","",17,[[]]],[11,"epsilon","","",18,[[]]],[11,"infinity","","",18,[[]]],[11,"neg_infinity","","",18,[[]]],[11,"neg_zero","","",18,[[]]],[11,"nan","","",18,[[]]],[11,"sum","","",18,[[]]],[11,"product","","",18,[[]]],[11,"mul_add","","",18,[[]]],[11,"mul_sub","","",18,[[]]],[11,"neg_mul_add","","",18,[[]]],[11,"neg_mul_sub","","",18,[[]]],[11,"floor","","",18,[[]]],[11,"ceil","","",18,[[]]],[11,"round","","",18,[[]]],[11,"trunc","","",18,[[]]],[11,"sqrt","","",18,[[]]],[11,"drop","thermite","",0,[[]]],[11,"clone","thermite::backends::avx2","",14,[[],["avx2",3]]],[11,"clone","","",15,[[],["i32x8",3]]],[11,"clone","","",16,[[],["u64x8",3]]],[11,"clone","","",17,[[],["f32x8",3]]],[11,"clone","","",18,[[],["f64x8",3]]],[11,"clone","thermite","",1,[[],["vptr",3]]],[11,"clone","","",2,[[],["mask",3]]],[11,"default","thermite::backends::avx2","",15,[[]]],[11,"default","","",16,[[]]],[11,"default","","",17,[[]]],[11,"default","","",18,[[]]],[11,"default","thermite","",2,[[]]],[11,"eq","thermite::backends::avx2","",14,[[["avx2",3]]]],[11,"eq","","",15,[[]]],[11,"ne","","",15,[[]]],[11,"eq","","",17,[[]]],[11,"ne","","",17,[[]]],[11,"eq","","",16,[[]]],[11,"ne","","",16,[[]]],[11,"eq","","",18,[[]]],[11,"ne","","",18,[[]]],[11,"eq","thermite","",1,[[["vptr",3]]]],[11,"ne","","",1,[[["vptr",3]]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx2","",15,[[]]],[11,"div","","",17,[[]]],[11,"div","","",16,[[]]],[11,"div","","",18,[[]]],[11,"rem","","",15,[[]]],[11,"rem","","",17,[[]]],[11,"rem","","",16,[[]]],[11,"rem","","",18,[[]]],[11,"sub","","",15,[[]]],[11,"sub","","",17,[[]]],[11,"sub","","",16,[[]]],[11,"sub","","",18,[[]]],[11,"add","","",15,[[]]],[11,"add","","",17,[[]]],[11,"add","","",16,[[]]],[11,"add","","",18,[[]]],[11,"mul","","",15,[[]]],[11,"mul","","",17,[[]]],[11,"mul","","",16,[[]]],[11,"mul","","",18,[[]]],[11,"neg","","",15,[[]]],[11,"neg","","",17,[[]]],[11,"neg","","",18,[[]]],[11,"add_assign","","",15,[[]]],[11,"add_assign","","",17,[[]]],[11,"add_assign","","",16,[[]]],[11,"add_assign","","",18,[[]]],[11,"sub_assign","","",15,[[]]],[11,"sub_assign","","",17,[[]]],[11,"sub_assign","","",16,[[]]],[11,"sub_assign","","",18,[[]]],[11,"mul_assign","","",15,[[]]],[11,"mul_assign","","",17,[[]]],[11,"mul_assign","","",16,[[]]],[11,"mul_assign","","",18,[[]]],[11,"div_assign","","",15,[[]]],[11,"div_assign","","",17,[[]]],[11,"div_assign","","",16,[[]]],[11,"div_assign","","",18,[[]]],[11,"rem_assign","","",15,[[]]],[11,"rem_assign","","",17,[[]]],[11,"rem_assign","","",16,[[]]],[11,"rem_assign","","",18,[[]]],[11,"not","","",15,[[]]],[11,"not","","",17,[[]]],[11,"not","","",16,[[]]],[11,"not","","",18,[[]]],[11,"not","thermite","",2,[[]]],[11,"bitand","thermite::backends::avx2","",15,[[]]],[11,"bitand","","",17,[[]]],[11,"bitand","","",16,[[]]],[11,"bitand","","",18,[[]]],[11,"bitand","thermite","",2,[[]]],[11,"bitor","thermite::backends::avx2","",15,[[]]],[11,"bitor","","",17,[[]]],[11,"bitor","","",16,[[]]],[11,"bitor","","",18,[[]]],[11,"bitor","thermite","",2,[[]]],[11,"bitxor","thermite::backends::avx2","",15,[[]]],[11,"bitxor","","",17,[[]]],[11,"bitxor","","",16,[[]]],[11,"bitxor","","",18,[[]]],[11,"bitxor","thermite","",2,[[]]],[11,"shl","thermite::backends::avx2","",15,[[]]],[11,"shl","","",17,[[]]],[11,"shl","","",16,[[]]],[11,"shl","","",18,[[]]],[11,"shl","thermite","",2,[[]]],[11,"shr","thermite::backends::avx2","",15,[[]]],[11,"shr","","",17,[[]]],[11,"shr","","",16,[[]]],[11,"shr","","",18,[[]]],[11,"shr","thermite","",2,[[]]],[11,"bitand_assign","thermite::backends::avx2","",15,[[]]],[11,"bitand_assign","","",17,[[]]],[11,"bitand_assign","","",16,[[]]],[11,"bitand_assign","","",18,[[]]],[11,"bitand_assign","thermite","",2,[[]]],[11,"bitor_assign","thermite::backends::avx2","",15,[[]]],[11,"bitor_assign","","",17,[[]]],[11,"bitor_assign","","",16,[[]]],[11,"bitor_assign","","",18,[[]]],[11,"bitor_assign","thermite","",2,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",15,[[]]],[11,"bitxor_assign","","",17,[[]]],[11,"bitxor_assign","","",16,[[]]],[11,"bitxor_assign","","",18,[[]]],[11,"bitxor_assign","thermite","",2,[[]]],[11,"shl_assign","thermite::backends::avx2","",15,[[]]],[11,"shl_assign","","",17,[[]]],[11,"shl_assign","","",16,[[]]],[11,"shl_assign","","",18,[[]]],[11,"shl_assign","thermite","",2,[[]]],[11,"shr_assign","thermite::backends::avx2","",15,[[]]],[11,"shr_assign","","",17,[[]]],[11,"shr_assign","","",16,[[]]],[11,"shr_assign","","",18,[[]]],[11,"shr_assign","thermite","",2,[[]]],[11,"hash","thermite::backends::avx2","",14,[[]]],[11,"approx_eq","thermite","",3,[[],["mask",3]]],[11,"clamp","","",3,[[]]],[11,"saturate","","Clamps self to between 0 and 1",3,[[]]],[11,"scale","","Scales values between `in_min` and `in_max`, to between…",3,[[]]],[11,"lerp","","Linearly interpolates between `a` and `b` using `self`",3,[[]]],[11,"safe_sqrt","","Clamps input to positive numbers before calling `sqrt`",3,[[]]]],"p":[[3,"SimdBuffer"],[3,"Vptr"],[3,"Mask"],[8,"SimdFloatVectorExt"],[8,"SimdCastFrom"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[8,"Simd"],[3,"AVX2"],[3,"i32x8"],[3,"u64x8"],[3,"f32x8"],[3,"f64x8"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);