var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[3,"SimdBuffer","thermite","Aligned SIMD vector storage",null,null],[3,"VPtr","","",null,null],[3,"BitMask","","Small integer representation of a mask using individual bits",null,null],[3,"Mask","","",null,null],[11,"alloc","","Allocates a new SIMD-aligned element buffer and zeroes the…",0,[[]]],[11,"gather_checked","","Gathers values from the buffer using more efficient…",0,[[]]],[11,"fill","","Fills the buffer with vectors using aligned stores",0,[[]]],[11,"len","","",0,[[]]],[11,"len_vectors","","",0,[[]]],[11,"as_slice","","",0,[[]]],[11,"as_vector_slice","","",0,[[]]],[11,"as_mut_slice","","",0,[[]]],[11,"as_mut_vector_slice","","",0,[[]]],[11,"load_vector","","",0,[[]]],[11,"store_vector","","",0,[[]]],[0,"backends","","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"AVX2","thermite::backends::avx2","",null,null],[3,"f32x8","","",null,null],[3,"f64x8","","",null,null],[3,"i16x8","","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[11,"splat","thermite","",1,[[]]],[11,"add","","",1,[[]]],[11,"is_null","","",1,[[],["mask",3]]],[11,"read","","",1,[[],["associatedvector",6]]],[11,"read_masked","","",1,[[["mask",3],["associatedvector",6]],["associatedvector",6]]],[11,"write","","",1,[[["associatedvector",6]]]],[11,"write_masked","","",1,[[["mask",3],["associatedvector",6]]]],[11,"truthy","","Create a bitmask for this vector type of all true bits",2,[[]]],[11,"falsey","","Create a bitmask with all false bits",2,[[]]],[11,"raw","","",2,[[]]],[11,"all","","Return true if all lanes for this vector type are set to…",2,[[]]],[11,"any","","Return true if any lane for this vector type is set to true",2,[[]]],[11,"none","","Return true if no lanes for this vector type are set to true",2,[[]]],[11,"count","","Count the number of set bits",2,[[]]],[11,"value","","",3,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",3,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",3,[[]]],[11,"from_value","","Creates a mask from a value. Any non-zero lanes are…",3,[[]]],[11,"cast_to","","",3,[[],[["mask",3],["simdcastfrom",8]]]],[18,"FULL_BITMASK","","Bitmask indicating all truthy values for each lane",3,null],[11,"and_not","","Computes `!self & other` for each lane of the mask.",3,[[]]],[11,"bitmask","","Returns a bitmask that can be trivially evaluated to…",3,[[],["bitmask",3]]],[11,"all","","Returns `true` if all lanes are truthy",3,[[]]],[11,"any","","Returns `true` if any lanes are truthy",3,[[]]],[11,"none","","Returns `true` if all lanes are falsey",3,[[]]],[11,"count","","Counts the number of truthy lanes",3,[[]]],[11,"select","","For each lane, selects from `t` if the mask lane is…",3,[[]]],[6,"AssociatedVector","","Associated vector type for a scalar type",null,null],[6,"Vi32","","",null,null],[6,"Vi64","","",null,null],[6,"Vu32","","",null,null],[6,"Vu64","","",null,null],[6,"Vf32","","",null,null],[6,"Vf64","","",null,null],[6,"Vusize","","",null,null],[6,"Visize","","",null,null],[8,"SimdVectorizedMath","","Set of vectorized special functions optimized for both…",null,null],[10,"scale","","Scales values between `in_min` and `in_max`, to between…",4,[[]]],[10,"lerp","","Linearly interpolates between `a` and `b` using `self`",4,[[]]],[10,"fmod","","Returns the floating-point remainder of `self / y`…",4,[[]]],[10,"hypot","","Computes `sqrt(x * x + y * y)` for each element of the…",4,[[]]],[10,"sin","","Computes the sine of a vector.",4,[[]]],[10,"cos","","Computes the cosine of a vector.",4,[[]]],[10,"tan","","Computes the tangent of a vector.",4,[[]]],[10,"sin_cos","","Computes both the sine and cosine of a vector together…",4,[[]]],[10,"sinh","","Computes the hyperbolic-sine of a vector.",4,[[]]],[10,"cosh","","Computes the hyperbolic-cosine of a vector.",4,[[]]],[10,"tanh","","Computes the hyperbolic-tangent of a vector.",4,[[]]],[10,"asinh","","Computes the hyperbolic-arcsine of a vector.",4,[[]]],[10,"acosh","","Computes the hyperbolic-arccosine of a vector.",4,[[]]],[10,"atanh","","Computes the hyperbolic-arctangent of a vector.",4,[[]]],[10,"asin","","Computes the arcsine of a vector.",4,[[]]],[10,"acos","","Computes the arccosine of a vector.",4,[[]]],[10,"atan","","Computes the arctangent of a vector.",4,[[]]],[10,"atan2","","Computes the four quadrant arc-tangent of `y`(`self`) and…",4,[[]]],[10,"exp","","The exponential function, returns `e^(self)`",4,[[]]],[10,"exph","","Half-exponential function, returns `0.5 * e^(self)`",4,[[]]],[10,"exp2","","Binary exponential function, returns `2^(self)`",4,[[]]],[10,"exp10","","Base-10 exponential function, returns `10^(self)`",4,[[]]],[10,"exp_m1","","Exponential function minus one, `e^(self) - 1.0`, special…",4,[[]]],[10,"powf","","Computes `x^e` where `x` is `self` and `e` is a vector of…",4,[[]]],[10,"powiv","","Computes `x^e` where `x` is `self` and `e` is a vector of…",4,[[]]],[10,"powi","","Computes `x^e` where `x` is `self` and `e` is a signed…",4,[[]]],[10,"ln","","Computes the natural logarithm of a vector.",4,[[]]],[10,"ln_1p","","Computes `ln(1+x)` where `x` is `self`, more accurately…",4,[[]]],[10,"log2","","Computes the base-2 logarithm of a vector",4,[[]]],[10,"log10","","Computes the base-10 logarithm of a vector",4,[[]]],[10,"erf","","Computes the error function for each value in a vector",4,[[]]],[10,"erfinv","","Computes the inverse error function for each value in a…",4,[[]]],[10,"next_float","","Finds the next representable float moving upwards to…",4,[[]]],[10,"prev_float","","Finds the previous representable float moving downwards to…",4,[[]]],[10,"smoothstep","","Calculates a sigmoid-like 3rd-order interpolation function.",4,[[]]],[10,"smootherstep","","Calculates a sigmoid-like 5th-order interpolation function.",4,[[]]],[10,"smootheststep","","Calculates a signmoid-like 7th-order interpolation function.",4,[[]]],[10,"hermite","","Computes the n-th degree physicists\' Hermite polynomial…",4,[[]]],[10,"hermitev","","Computes the n-th degree physicists\' Hermite polynomial…",4,[[]]],[10,"jacobi","","Computes the n-th degree Jacobi polynomial via the 3-term…",4,[[]]],[8,"SimdCastFrom","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","",5,[[]]],[10,"from_cast_mask","","",5,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","",6,[[]]],[10,"cast_mask","","",6,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction set",null,null],[11,"cast_to","","",7,[[],["simdcastfrom",8]]],[8,"SimdElement","","Umbrella trait for SIMD vector element bounds",null,null],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",8,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",8,null],[18,"NUM_ELEMENTS","","",8,null],[18,"ALIGNMENT","","",8,null],[10,"splat","","",8,[[]]],[11,"undefined","","Possibly returns a vector containing undefined or…",8,[[]]],[11,"splat_any","","",8,[[]]],[11,"alloc","","",8,[[],["simdbuffer",3]]],[11,"extract","","",8,[[]]],[11,"replace","","",8,[[]]],[10,"extract_unchecked","","",8,[[]]],[10,"replace_unchecked","","",8,[[]]],[11,"load_aligned","","",8,[[]]],[11,"load_unaligned","","",8,[[]]],[11,"store_aligned","","",8,[[]]],[11,"store_unaligned","","",8,[[]]],[11,"load_aligned_unchecked","","",8,[[]]],[11,"store_aligned_unchecked","","",8,[[]]],[11,"load_unaligned_unchecked","","",8,[[]]],[11,"store_unaligned_unchecked","","",8,[[]]],[11,"gather","","",8,[[]]],[11,"scatter","","",8,[[]]],[11,"gather_masked","","",8,[[["mask",3]]]],[11,"scatter_masked","","",8,[[["mask",3]]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes `!self & other`, may be more performant than the…",9,[[]]],[18,"FULL_BITMASK","","",9,null],[10,"bitmask","","",9,[[]]],[8,"SimdVector","","Defines common operations on numeric vectors",null,null],[10,"zero","","",10,[[]]],[10,"one","","",10,[[]]],[10,"min_value","","Maximum representable valid value",10,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",10,[[]]],[11,"min","","Per-lane, select the minimum value",10,[[]]],[11,"max","","Per-lane, select the maximum value",10,[[]]],[10,"min_element","","Find the minimum value across all lanes",10,[[]]],[10,"max_element","","Find the maximum value across all lanes",10,[[]]],[10,"eq","","",10,[[],["mask",3]]],[11,"ne","","",10,[[],["mask",3]]],[11,"lt","","",10,[[],["mask",3]]],[11,"le","","",10,[[],["mask",3]]],[10,"gt","","",10,[[],["mask",3]]],[10,"ge","","",10,[[],["mask",3]]],[8,"SimdIntoBits","","Transmutations into raw bits",null,null],[11,"into_bits","","",11,[[]]],[8,"SimdFromBits","","Transmutations from raw bits",null,null],[11,"from_bits","","",12,[[]]],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[10,"saturating_add","","Saturating addition, will not wrap",13,[[]]],[10,"saturating_sub","","Saturating subtraction, will not wrap",13,[[]]],[10,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t…",13,[[]]],[10,"wrapping_product","","Multiply all lanes together, wrapping the result if it…",13,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",14,[[]]],[10,"min_positive","","Minimum positive number",14,[[]]],[11,"abs","","Absolute value",14,[[]]],[11,"copysign","","Copies the sign from `sign` to `self`",14,[[]]],[11,"signum","","Returns `-1` if less than zero, `+1` otherwise.",14,[[]]],[11,"is_positive","","Test if positive, greater or equal to zero",14,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",14,[[],["mask",3]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[16,"Vi","","",15,null],[16,"Vu","","",15,null],[10,"epsilon","","",15,[[]]],[10,"infinity","","",15,[[]]],[10,"neg_infinity","","",15,[[]]],[10,"neg_zero","","",15,[[]]],[10,"nan","","",15,[[]]],[11,"load_half_unaligned","","Load half-precision floats and up-convert them into `Self`",15,[[]]],[11,"store_half_unaligned","","Down-convert `self` into half-precision and store",15,[[]]],[10,"load_half_unaligned_unchecked","","",15,[[]]],[10,"store_half_unaligned_unchecked","","",15,[[]]],[10,"to_int_fast","","Can convert to a signed integer faster than a regular…",15,[[]]],[10,"to_uint_fast","","Can convert to a signed integer faster than a regular…",15,[[]]],[11,"combine_sign","","Same as `self * sign.signum()` or `select(sign_bit(sign),…",15,[[]]],[10,"sum","","Compute the horizontal sum of all elements",15,[[]]],[10,"product","","Compute the horizontal product of all elements",15,[[]]],[10,"mul_add","","Fused multiply-add",15,[[]]],[11,"mul_sub","","Fused multiply-subtract",15,[[]]],[11,"nmul_add","","Fused negated multiply-add",15,[[]]],[11,"nmul_sub","","Fused negated multiply-subtract",15,[[]]],[10,"round","","",15,[[]]],[10,"ceil","","",15,[[]]],[10,"floor","","",15,[[]]],[10,"trunc","","",15,[[]]],[11,"fract","","",15,[[]]],[10,"sqrt","","",15,[[]]],[11,"rsqrt","","Compute the approximate reciprocal of the square root `(1…",15,[[]]],[11,"rsqrt_precise","","A more precise `1 / sqrt(x)` variation, which may use…",15,[[]]],[11,"recepr","","Computes the approximate reciprocal/inverse of each value",15,[[]]],[11,"approx_eq","","",15,[[],["mask",3]]],[11,"clamp","","",15,[[]]],[11,"saturate","","Clamps self to between 0 and 1",15,[[]]],[11,"is_finite","","",15,[[],["mask",3]]],[11,"is_infinite","","",15,[[],["mask",3]]],[11,"is_normal","","",15,[[],["mask",3]]],[10,"is_subnormal","","",15,[[],["mask",3]]],[11,"is_zero_or_subnormal","","",15,[[],["mask",3]]],[11,"is_nan","","",15,[[],["mask",3]]],[8,"SimdPointer","","Guarantees the vector can be used as a pointer in `VPtr`",null,null],[8,"Simd","","SIMD Instruction set, contains all types",null,null],[16,"Vi32","","32-bit signed integer vector",16,null],[16,"Vi64","","64-bit signed integer vector",16,null],[16,"Vu32","","32-bit unsigned integer vector",16,null],[16,"Vu64","","64-bit unsigned integer vector",16,null],[16,"Vf32","","Single-precision 32-bit floating point vector",16,null],[16,"Vf64","","Double-precision 64-bit floating point vector",16,null],[16,"Vusize","","",16,null],[16,"Visize","","",16,null],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from_cast","","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",2,[[]]],[11,"from_cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"cast","","",2,[[]]],[11,"cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from_cast","","",3,[[]]],[11,"from_cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"cast","","",3,[[]]],[11,"cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx2","",17,[[]]],[11,"from_cast_mask","","",17,[[["mask",3]],["mask",3]]],[11,"cast","","",17,[[]]],[11,"cast_mask","","",17,[[["mask",3]],["mask",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from_cast","","",18,[[]]],[11,"from_cast_mask","","",18,[[["mask",3]],["mask",3]]],[11,"cast","","",18,[[]]],[11,"cast_mask","","",18,[[["mask",3]],["mask",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from_cast","","",19,[[]]],[11,"from_cast_mask","","",19,[[["mask",3]],["mask",3]]],[11,"cast","","",19,[[]]],[11,"cast_mask","","",19,[[["mask",3]],["mask",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from_cast","","",20,[[]]],[11,"from_cast_mask","","",20,[[["mask",3]],["mask",3]]],[11,"cast","","",20,[[]]],[11,"cast_mask","","",20,[[["mask",3]],["mask",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from_cast","","",21,[[]]],[11,"from_cast_mask","","",21,[[["mask",3]],["mask",3]]],[11,"cast","","",21,[[]]],[11,"cast_mask","","",21,[[["mask",3]],["mask",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from_cast","","",22,[[]]],[11,"from_cast_mask","","",22,[[["mask",3]],["mask",3]]],[11,"cast","","",22,[[]]],[11,"cast_mask","","",22,[[["mask",3]],["mask",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from_cast","","",23,[[]]],[11,"from_cast_mask","","",23,[[["mask",3]],["mask",3]]],[11,"cast","","",23,[[]]],[11,"cast_mask","","",23,[[["mask",3]],["mask",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from_cast","","",24,[[]]],[11,"from_cast_mask","","",24,[[["mask",3]],["mask",3]]],[11,"cast","","",24,[[]]],[11,"cast_mask","","",24,[[["mask",3]],["mask",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from_cast","","",18,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",18,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",18,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",18,[[["u32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",18,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",18,[[["u64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",18,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",18,[[["mask",3],["f64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",18,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",18,[[["mask",3],["i64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",19,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",19,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",19,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",19,[[["u32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",19,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",19,[[["mask",3],["f32x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",19,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",19,[[["u64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",19,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",19,[[["mask",3],["i64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",21,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["f32x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",21,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["u32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",21,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["u64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",21,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["f64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",21,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["i64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",22,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["f32x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",22,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",22,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",22,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",22,[[["u32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",22,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",22,[[["u64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",22,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["f64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",23,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",23,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",23,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["f32x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",23,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["f64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",23,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",23,[[["u64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",23,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["i64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",24,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",24,[[["u32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",24,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["f32x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",24,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",24,[[["avx2",3],["mask",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",24,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["f64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",24,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["i64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"splat","","",18,[[]]],[11,"undefined","","",18,[[]]],[11,"load_aligned_unchecked","","",18,[[]]],[11,"load_unaligned_unchecked","","",18,[[]]],[11,"store_aligned_unchecked","","",18,[[]]],[11,"store_unaligned_unchecked","","",18,[[]]],[11,"extract_unchecked","","",18,[[]]],[11,"replace_unchecked","","",18,[[]]],[11,"gather","","",18,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",18,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",19,[[]]],[11,"undefined","","",19,[[]]],[11,"load_aligned_unchecked","","",19,[[]]],[11,"store_aligned_unchecked","","",19,[[]]],[11,"extract_unchecked","","",19,[[]]],[11,"replace_unchecked","","",19,[[]]],[11,"gather","","",19,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",19,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",20,[[]]],[11,"undefined","","",20,[[]]],[11,"load_aligned_unchecked","","",20,[[]]],[11,"load_unaligned_unchecked","","",20,[[]]],[11,"store_aligned_unchecked","","",20,[[]]],[11,"store_unaligned_unchecked","","",20,[[]]],[11,"extract_unchecked","","",20,[[]]],[11,"replace_unchecked","","",20,[[]]],[11,"splat","","",21,[[]]],[11,"undefined","","",21,[[]]],[11,"load_aligned_unchecked","","",21,[[]]],[11,"load_unaligned_unchecked","","",21,[[]]],[11,"store_aligned_unchecked","","",21,[[]]],[11,"store_unaligned_unchecked","","",21,[[]]],[11,"extract_unchecked","","",21,[[]]],[11,"replace_unchecked","","",21,[[]]],[11,"gather","","",21,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",21,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",22,[[]]],[11,"undefined","","",22,[[]]],[11,"load_aligned_unchecked","","",22,[[]]],[11,"store_aligned_unchecked","","",22,[[]]],[11,"extract_unchecked","","",22,[[]]],[11,"replace_unchecked","","",22,[[]]],[11,"gather","","",22,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",22,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",23,[[]]],[11,"undefined","","",23,[[]]],[11,"load_aligned_unchecked","","",23,[[]]],[11,"load_unaligned_unchecked","","",23,[[]]],[11,"store_aligned_unchecked","","",23,[[]]],[11,"store_unaligned_unchecked","","",23,[[]]],[11,"extract_unchecked","","",23,[[]]],[11,"replace_unchecked","","",23,[[]]],[11,"gather","","",23,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",23,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",24,[[]]],[11,"undefined","","",24,[[]]],[11,"load_aligned_unchecked","","",24,[[]]],[11,"store_aligned_unchecked","","",24,[[]]],[11,"extract_unchecked","","",24,[[]]],[11,"replace_unchecked","","",24,[[]]],[11,"gather","","",24,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",24,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","thermite","",3,[[]]],[11,"load_aligned_unchecked","","",3,[[]]],[11,"store_aligned_unchecked","","",3,[[]]],[11,"load_unaligned_unchecked","","",3,[[]]],[11,"store_unaligned_unchecked","","",3,[[]]],[11,"extract_unchecked","","",3,[[]]],[11,"replace_unchecked","","",3,[[]]],[11,"and_not","thermite::backends::avx2","",18,[[]]],[11,"bitmask","","",18,[[]]],[11,"_mm_not","","",18,[[]]],[11,"_mm_bitand","","",18,[[]]],[11,"_mm_bitor","","",18,[[]]],[11,"_mm_bitxor","","",18,[[]]],[11,"_mm_shr","","",18,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",18,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",18,[[]]],[11,"_mm_shri","","",18,[[]]],[11,"and_not","","",19,[[]]],[11,"bitmask","","",19,[[]]],[11,"_mm_not","","",19,[[]]],[11,"_mm_bitand","","",19,[[]]],[11,"_mm_bitor","","",19,[[]]],[11,"_mm_bitxor","","",19,[[]]],[11,"_mm_shr","","",19,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",19,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",19,[[]]],[11,"_mm_shri","","",19,[[]]],[11,"and_not","","",21,[[]]],[11,"bitmask","","",21,[[]]],[11,"_mm_not","","",21,[[]]],[11,"_mm_bitand","","",21,[[]]],[11,"_mm_bitor","","",21,[[]]],[11,"_mm_bitxor","","",21,[[]]],[11,"_mm_shr","","",21,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",21,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",21,[[]]],[11,"_mm_shri","","",21,[[]]],[11,"and_not","","",22,[[]]],[11,"bitmask","","",22,[[]]],[11,"_mm_not","","",22,[[]]],[11,"_mm_bitand","","",22,[[]]],[11,"_mm_bitor","","",22,[[]]],[11,"_mm_bitxor","","",22,[[]]],[11,"_mm_shr","","",22,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",22,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",22,[[]]],[11,"_mm_shri","","",22,[[]]],[11,"and_not","","",23,[[]]],[11,"bitmask","","",23,[[]]],[11,"_mm_not","","",23,[[]]],[11,"_mm_bitand","","",23,[[]]],[11,"_mm_bitor","","",23,[[]]],[11,"_mm_bitxor","","",23,[[]]],[11,"_mm_shr","","",23,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",23,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",23,[[]]],[11,"_mm_shri","","",23,[[]]],[11,"and_not","","",24,[[]]],[11,"bitmask","","",24,[[]]],[11,"_mm_not","","",24,[[]]],[11,"_mm_bitand","","",24,[[]]],[11,"_mm_bitor","","",24,[[]]],[11,"_mm_bitxor","","",24,[[]]],[11,"_mm_shr","","",24,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",24,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",24,[[]]],[11,"_mm_shri","","",24,[[]]],[11,"zero","","",18,[[]]],[11,"one","","",18,[[]]],[11,"min_value","","",18,[[]]],[11,"max_value","","",18,[[]]],[11,"min","","",18,[[]]],[11,"max","","",18,[[]]],[11,"min_element","","",18,[[]]],[11,"max_element","","",18,[[]]],[11,"eq","","",18,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",18,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",18,[[],[["mask",3],["avx2",3]]]],[11,"le","","",18,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",18,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",18,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",18,[[]]],[11,"_mm_sub","","",18,[[]]],[11,"_mm_mul","","",18,[[]]],[11,"_mm_div","","",18,[[]]],[11,"_mm_rem","","",18,[[]]],[11,"zero","","",19,[[]]],[11,"one","","",19,[[]]],[11,"min_value","","",19,[[]]],[11,"max_value","","",19,[[]]],[11,"min","","",19,[[]]],[11,"max","","",19,[[]]],[11,"min_element","","",19,[[]]],[11,"max_element","","",19,[[]]],[11,"eq","","",19,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",19,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",19,[[],[["mask",3],["avx2",3]]]],[11,"le","","",19,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",19,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",19,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",19,[[]]],[11,"_mm_sub","","",19,[[]]],[11,"_mm_mul","","",19,[[]]],[11,"_mm_div","","",19,[[]]],[11,"_mm_rem","","",19,[[]]],[11,"zero","","",21,[[]]],[11,"one","","",21,[[]]],[11,"min","","",21,[[]]],[11,"max","","",21,[[]]],[11,"min_value","","",21,[[]]],[11,"max_value","","",21,[[]]],[11,"min_element","","",21,[[]]],[11,"max_element","","",21,[[]]],[11,"eq","","",21,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",21,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",21,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",21,[[]]],[11,"_mm_sub","","",21,[[]]],[11,"_mm_mul","","",21,[[]]],[11,"_mm_div","","",21,[[]]],[11,"_mm_rem","","",21,[[]]],[11,"zero","","",22,[[]]],[11,"one","","",22,[[]]],[11,"min_value","","",22,[[]]],[11,"max_value","","",22,[[]]],[11,"min_element","","",22,[[]]],[11,"max_element","","",22,[[]]],[11,"eq","","",22,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",22,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",22,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",22,[[]]],[11,"_mm_sub","","",22,[[]]],[11,"_mm_mul","","",22,[[]]],[11,"_mm_div","","",22,[[]]],[11,"_mm_rem","","",22,[[]]],[11,"zero","","",23,[[]]],[11,"one","","",23,[[]]],[11,"min","","",23,[[]]],[11,"max","","",23,[[]]],[11,"min_value","","",23,[[]]],[11,"max_value","","",23,[[]]],[11,"min_element","","",23,[[]]],[11,"max_element","","",23,[[]]],[11,"eq","","",23,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",23,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",23,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",23,[[]]],[11,"_mm_sub","","",23,[[]]],[11,"_mm_mul","","",23,[[]]],[11,"_mm_div","","",23,[[]]],[11,"_mm_rem","","",23,[[]]],[11,"zero","","",24,[[]]],[11,"one","","",24,[[]]],[11,"min_value","","",24,[[]]],[11,"max_value","","",24,[[]]],[11,"min_element","","",24,[[]]],[11,"max_element","","",24,[[]]],[11,"eq","","",24,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",24,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",24,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",24,[[]]],[11,"_mm_sub","","",24,[[]]],[11,"_mm_mul","","",24,[[]]],[11,"_mm_div","","",24,[[]]],[11,"_mm_rem","","",24,[[]]],[11,"into_bits","","",18,[[],[["u32x8",3],["avx2",3]]]],[11,"into_bits","","",19,[[],[["u64x8",3],["avx2",3]]]],[11,"into_bits","","",21,[[],[["u32x8",3],["avx2",3]]]],[11,"into_bits","","",22,[[],[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",18,[[["u32x8",3],["avx2",3]]]],[11,"from_bits","","",19,[[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",21,[[["u32x8",3],["avx2",3]]]],[11,"from_bits","","",22,[[["u64x8",3],["avx2",3]]]],[11,"saturating_add","","",21,[[]]],[11,"saturating_sub","","",21,[[]]],[11,"wrapping_sum","","",21,[[]]],[11,"wrapping_product","","",21,[[]]],[11,"saturating_add","","",22,[[]]],[11,"saturating_sub","","",22,[[]]],[11,"wrapping_sum","","",22,[[]]],[11,"wrapping_product","","",22,[[]]],[11,"saturating_add","","",23,[[]]],[11,"saturating_sub","","",23,[[]]],[11,"wrapping_sum","","",23,[[]]],[11,"wrapping_product","","",23,[[]]],[11,"saturating_add","","",24,[[]]],[11,"saturating_sub","","",24,[[]]],[11,"wrapping_sum","","",24,[[]]],[11,"wrapping_product","","",24,[[]]],[11,"neg_one","","",18,[[]]],[11,"min_positive","","",18,[[]]],[11,"signum","","",18,[[]]],[11,"copysign","","",18,[[]]],[11,"abs","","",18,[[]]],[11,"_mm_neg","","",18,[[]]],[11,"neg_one","","",19,[[]]],[11,"min_positive","","",19,[[]]],[11,"signum","","",19,[[]]],[11,"copysign","","",19,[[]]],[11,"abs","","",19,[[]]],[11,"_mm_neg","","",19,[[]]],[11,"neg_one","","",21,[[]]],[11,"min_positive","","",21,[[]]],[11,"abs","","",21,[[]]],[11,"_mm_neg","","",21,[[]]],[11,"neg_one","","",22,[[]]],[11,"min_positive","","",22,[[]]],[11,"abs","","",22,[[]]],[11,"_mm_neg","","",22,[[]]],[11,"epsilon","","",18,[[]]],[11,"infinity","","",18,[[]]],[11,"neg_infinity","","",18,[[]]],[11,"neg_zero","","",18,[[]]],[11,"nan","","",18,[[]]],[11,"load_half_unaligned_unchecked","","",18,[[]]],[11,"store_half_unaligned_unchecked","","",18,[[]]],[11,"to_int_fast","","",18,[[]]],[11,"to_uint_fast","","",18,[[]]],[11,"sum","","",18,[[]]],[11,"product","","",18,[[]]],[11,"mul_add","","",18,[[]]],[11,"mul_sub","","",18,[[]]],[11,"nmul_add","","",18,[[]]],[11,"nmul_sub","","",18,[[]]],[11,"floor","","",18,[[]]],[11,"ceil","","",18,[[]]],[11,"round","","",18,[[]]],[11,"trunc","","",18,[[]]],[11,"sqrt","","",18,[[]]],[11,"rsqrt","","",18,[[]]],[11,"rsqrt_precise","","",18,[[]]],[11,"recepr","","",18,[[]]],[11,"is_infinite","","",18,[[],[["mask",3],["avx2",3]]]],[11,"is_finite","","",18,[[],[["mask",3],["avx2",3]]]],[11,"is_subnormal","","",18,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",18,[[],[["mask",3],["avx2",3]]]],[11,"epsilon","","",19,[[]]],[11,"infinity","","",19,[[]]],[11,"neg_infinity","","",19,[[]]],[11,"neg_zero","","",19,[[]]],[11,"nan","","",19,[[]]],[11,"load_half_unaligned_unchecked","","",19,[[]]],[11,"store_half_unaligned_unchecked","","",19,[[]]],[11,"to_int_fast","","",19,[[]]],[11,"to_uint_fast","","",19,[[]]],[11,"sum","","",19,[[]]],[11,"product","","",19,[[]]],[11,"mul_add","","",19,[[]]],[11,"mul_sub","","",19,[[]]],[11,"nmul_add","","",19,[[]]],[11,"nmul_sub","","",19,[[]]],[11,"floor","","",19,[[]]],[11,"ceil","","",19,[[]]],[11,"round","","",19,[[]]],[11,"trunc","","",19,[[]]],[11,"sqrt","","",19,[[]]],[11,"is_infinite","","",19,[[],[["mask",3],["avx2",3]]]],[11,"is_finite","","",19,[[],[["mask",3],["avx2",3]]]],[11,"is_subnormal","","",19,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",19,[[],[["mask",3],["avx2",3]]]],[11,"drop","thermite","",0,[[]]],[11,"clone","thermite::backends::avx2","",17,[[],["avx2",3]]],[11,"clone","","",18,[[],["f32x8",3]]],[11,"clone","","",19,[[],["f64x8",3]]],[11,"clone","","",20,[[],["i16x8",3]]],[11,"clone","","",21,[[],["i32x8",3]]],[11,"clone","","",22,[[],["i64x8",3]]],[11,"clone","","",23,[[],["u32x8",3]]],[11,"clone","","",24,[[],["u64x8",3]]],[11,"clone","thermite","",1,[[],["vptr",3]]],[11,"clone","","",3,[[],["mask",3]]],[11,"clone","","",2,[[]]],[11,"default","thermite::backends::avx2","",18,[[]]],[11,"default","","",19,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","","",23,[[]]],[11,"default","","",24,[[]]],[11,"default","thermite","",3,[[]]],[11,"eq","thermite::backends::avx2","",17,[[["avx2",3]]]],[11,"eq","","",18,[[]]],[11,"ne","","",18,[[]]],[11,"eq","","",19,[[]]],[11,"ne","","",19,[[]]],[11,"eq","","",21,[[]]],[11,"ne","","",21,[[]]],[11,"eq","","",22,[[]]],[11,"ne","","",22,[[]]],[11,"eq","","",23,[[]]],[11,"ne","","",23,[[]]],[11,"eq","","",24,[[]]],[11,"ne","","",24,[[]]],[11,"eq","thermite","",1,[[["vptr",3]]]],[11,"ne","","",1,[[["vptr",3]]]],[11,"eq","","",2,[[]]],[11,"ne","","",2,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx2","",18,[[]]],[11,"div","","",19,[[]]],[11,"div","","",21,[[]]],[11,"div","","",22,[[]]],[11,"div","","",23,[[]]],[11,"div","","",24,[[]]],[11,"rem","","",18,[[]]],[11,"rem","","",19,[[]]],[11,"rem","","",21,[[]]],[11,"rem","","",22,[[]]],[11,"rem","","",23,[[]]],[11,"rem","","",24,[[]]],[11,"sub","","",18,[[]]],[11,"sub","","",19,[[]]],[11,"sub","","",21,[[]]],[11,"sub","","",22,[[]]],[11,"sub","","",23,[[]]],[11,"sub","","",24,[[]]],[11,"add","","",18,[[]]],[11,"add","","",19,[[]]],[11,"add","","",21,[[]]],[11,"add","","",22,[[]]],[11,"add","","",23,[[]]],[11,"add","","",24,[[]]],[11,"mul","","",18,[[]]],[11,"mul","","",19,[[]]],[11,"mul","","",21,[[]]],[11,"mul","","",22,[[]]],[11,"mul","","",23,[[]]],[11,"mul","","",24,[[]]],[11,"neg","","",18,[[]]],[11,"neg","","",19,[[]]],[11,"neg","","",21,[[]]],[11,"neg","","",22,[[]]],[11,"add_assign","","",18,[[]]],[11,"add_assign","","",18,[[]]],[11,"add_assign","","",19,[[]]],[11,"add_assign","","",19,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",23,[[]]],[11,"add_assign","","",23,[[]]],[11,"add_assign","","",24,[[]]],[11,"add_assign","","",24,[[]]],[11,"sub_assign","","",18,[[]]],[11,"sub_assign","","",18,[[]]],[11,"sub_assign","","",19,[[]]],[11,"sub_assign","","",19,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",23,[[]]],[11,"sub_assign","","",23,[[]]],[11,"sub_assign","","",24,[[]]],[11,"sub_assign","","",24,[[]]],[11,"mul_assign","","",18,[[]]],[11,"mul_assign","","",18,[[]]],[11,"mul_assign","","",19,[[]]],[11,"mul_assign","","",19,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",23,[[]]],[11,"mul_assign","","",23,[[]]],[11,"mul_assign","","",24,[[]]],[11,"mul_assign","","",24,[[]]],[11,"div_assign","","",18,[[]]],[11,"div_assign","","",18,[[]]],[11,"div_assign","","",19,[[]]],[11,"div_assign","","",19,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",23,[[]]],[11,"div_assign","","",23,[[]]],[11,"div_assign","","",24,[[]]],[11,"div_assign","","",24,[[]]],[11,"rem_assign","","",18,[[]]],[11,"rem_assign","","",18,[[]]],[11,"rem_assign","","",19,[[]]],[11,"rem_assign","","",19,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",23,[[]]],[11,"rem_assign","","",23,[[]]],[11,"rem_assign","","",24,[[]]],[11,"rem_assign","","",24,[[]]],[11,"not","","",18,[[]]],[11,"not","","",19,[[]]],[11,"not","","",21,[[]]],[11,"not","","",22,[[]]],[11,"not","","",23,[[]]],[11,"not","","",24,[[]]],[11,"not","thermite","",2,[[]]],[11,"not","","",3,[[]]],[11,"bitand","thermite::backends::avx2","",18,[[]]],[11,"bitand","","",19,[[]]],[11,"bitand","","",21,[[]]],[11,"bitand","","",22,[[]]],[11,"bitand","","",23,[[]]],[11,"bitand","","",24,[[]]],[11,"bitand","thermite","",2,[[]]],[11,"bitand","","",3,[[]]],[11,"bitor","thermite::backends::avx2","",18,[[]]],[11,"bitor","","",19,[[]]],[11,"bitor","","",21,[[]]],[11,"bitor","","",22,[[]]],[11,"bitor","","",23,[[]]],[11,"bitor","","",24,[[]]],[11,"bitor","thermite","",2,[[]]],[11,"bitor","","",3,[[]]],[11,"bitxor","thermite::backends::avx2","",18,[[]]],[11,"bitxor","","",19,[[]]],[11,"bitxor","","",21,[[]]],[11,"bitxor","","",22,[[]]],[11,"bitxor","","",23,[[]]],[11,"bitxor","","",24,[[]]],[11,"bitxor","thermite","",2,[[]]],[11,"bitxor","","",3,[[]]],[11,"shl","thermite::backends::avx2","",18,[[]]],[11,"shl","","",18,[[]]],[11,"shl","","",19,[[]]],[11,"shl","","",19,[[]]],[11,"shl","","",21,[[]]],[11,"shl","","",21,[[]]],[11,"shl","","",22,[[]]],[11,"shl","","",22,[[]]],[11,"shl","","",23,[[]]],[11,"shl","","",23,[[]]],[11,"shl","","",24,[[]]],[11,"shl","","",24,[[]]],[11,"shr","","",18,[[]]],[11,"shr","","",18,[[]]],[11,"shr","","",19,[[]]],[11,"shr","","",19,[[]]],[11,"shr","","",21,[[]]],[11,"shr","","",21,[[]]],[11,"shr","","",22,[[]]],[11,"shr","","",22,[[]]],[11,"shr","","",23,[[]]],[11,"shr","","",23,[[]]],[11,"shr","","",24,[[]]],[11,"shr","","",24,[[]]],[11,"bitand_assign","","",18,[[]]],[11,"bitand_assign","","",18,[[]]],[11,"bitand_assign","","",19,[[]]],[11,"bitand_assign","","",19,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","","",22,[[]]],[11,"bitand_assign","","",22,[[]]],[11,"bitand_assign","","",23,[[]]],[11,"bitand_assign","","",23,[[]]],[11,"bitand_assign","","",24,[[]]],[11,"bitand_assign","","",24,[[]]],[11,"bitand_assign","thermite","",2,[[]]],[11,"bitand_assign","","",3,[[]]],[11,"bitor_assign","thermite::backends::avx2","",18,[[]]],[11,"bitor_assign","","",18,[[]]],[11,"bitor_assign","","",19,[[]]],[11,"bitor_assign","","",19,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","","",22,[[]]],[11,"bitor_assign","","",22,[[]]],[11,"bitor_assign","","",23,[[]]],[11,"bitor_assign","","",23,[[]]],[11,"bitor_assign","","",24,[[]]],[11,"bitor_assign","","",24,[[]]],[11,"bitor_assign","thermite","",2,[[]]],[11,"bitor_assign","","",3,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",18,[[]]],[11,"bitxor_assign","","",18,[[]]],[11,"bitxor_assign","","",19,[[]]],[11,"bitxor_assign","","",19,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","","",22,[[]]],[11,"bitxor_assign","","",22,[[]]],[11,"bitxor_assign","","",23,[[]]],[11,"bitxor_assign","","",23,[[]]],[11,"bitxor_assign","","",24,[[]]],[11,"bitxor_assign","","",24,[[]]],[11,"bitxor_assign","thermite","",2,[[]]],[11,"bitxor_assign","","",3,[[]]],[11,"shl_assign","thermite::backends::avx2","",18,[[]]],[11,"shl_assign","","",18,[[]]],[11,"shl_assign","","",19,[[]]],[11,"shl_assign","","",19,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",23,[[]]],[11,"shl_assign","","",23,[[]]],[11,"shl_assign","","",24,[[]]],[11,"shl_assign","","",24,[[]]],[11,"shr_assign","","",18,[[]]],[11,"shr_assign","","",18,[[]]],[11,"shr_assign","","",19,[[]]],[11,"shr_assign","","",19,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",23,[[]]],[11,"shr_assign","","",23,[[]]],[11,"shr_assign","","",24,[[]]],[11,"shr_assign","","",24,[[]]],[11,"hash","","",17,[[]]]],"p":[[3,"SimdBuffer"],[3,"VPtr"],[3,"BitMask"],[3,"Mask"],[8,"SimdVectorizedMath"],[8,"SimdCastFrom"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntoBits"],[8,"SimdFromBits"],[8,"SimdIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[8,"Simd"],[3,"AVX2"],[3,"f32x8"],[3,"f64x8"],[3,"i16x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);