var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[23,"dispatch","thermite","Generates monomorphized backend `target_feature` function…",null,null],[3,"SimdBuffer","","Aligned SIMD vector storage",null,null],[3,"Divider","","Divider recommended for constant divisors.",null,null],[3,"BranchfreeDivider","","Divider without branching, useful for dynamic divisors.",null,null],[3,"VPtr","","",null,null],[3,"BitMask","","Small integer representation of a mask using individual bits",null,null],[3,"Mask","","",null,null],[4,"SimdInstructionSet","","",null,null],[13,"SSE2","","",0,null],[13,"SSE41","","",0,null],[13,"AVX","","",0,null],[13,"AVX2","","",0,null],[13,"AVX512F","","",0,null],[13,"AVX512FBW","","",0,null],[11,"alloc","","Allocates a new SIMD-aligned element buffer and zeroes the…",1,[[]]],[11,"gather","","Gathers values from the buffer using more efficient…",1,[[]]],[11,"fill","","Fills the buffer with vectors using aligned stores",1,[[]]],[11,"len","","",1,[[]]],[11,"len_vectors","","",1,[[]]],[11,"as_slice","","",1,[[]]],[11,"as_vector_slice","","",1,[[]]],[11,"as_mut_slice","","",1,[[]]],[11,"as_mut_vector_slice","","",1,[[]]],[11,"load_vector","","",1,[[]]],[11,"store_vector","","",1,[[]]],[0,"backends","","",null,null],[0,"polyfills","thermite::backends","",null,null],[5,"_mm_shuffle","thermite::backends::polyfills","",null,[[]]],[0,"avx1","thermite::backends","",null,null],[3,"AVX1","thermite::backends::avx1","",null,null],[3,"f32x8","","",null,null],[3,"f64x8","","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"i32x8","thermite::backends::avx2","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[3,"AVX2","","",null,null],[11,"multiplier","thermite","",2,[[]]],[11,"shift","","",2,[[]]],[11,"u8","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u8","","See docs for [`Divider`]",2,[[]]],[11,"u8_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u16","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u16","","See docs for [`Divider`]",2,[[]]],[11,"u16_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u32","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u32","","See docs for [`Divider`]",2,[[]]],[11,"u32_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u64","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u64","","See docs for [`Divider`]",2,[[]]],[11,"u64_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"i8","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i16","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i32","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i64","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"splat","","",4,[[]]],[11,"add","","",4,[[]]],[11,"is_null","","",4,[[],["mask",3]]],[11,"read","","",4,[[],["associatedvector",6]]],[11,"read_masked","","",4,[[["associatedvector",6],["mask",3]],["associatedvector",6]]],[11,"write","","",4,[[["associatedvector",6]]]],[11,"write_masked","","",4,[[["associatedvector",6],["mask",3]]]],[11,"truthy","","Create a bitmask for this vector type of all true bits",5,[[]]],[11,"falsey","","Create a bitmask with all false bits",5,[[]]],[11,"raw","","",5,[[]]],[11,"all","","Return true if all lanes for this vector type are set to…",5,[[]]],[11,"any","","Return true if any lane for this vector type is set to true",5,[[]]],[11,"none","","Return true if no lanes for this vector type are set to true",5,[[]]],[11,"count","","Count the number of set bits",5,[[]]],[11,"value","","",6,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",6,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",6,[[]]],[11,"from_value","","Creates a mask from a value. Any non-zero lanes are…",6,[[]]],[11,"cast_to","","",6,[[],[["mask",3],["simdfromcast",8]]]],[18,"FULL_BITMASK","","Bitmask indicating all truthy values for each lane",6,null],[11,"and_not","","Computes `!self & other` for each lane of the mask.",6,[[]]],[11,"bitmask","","Returns a bitmask that can be trivially evaluated to…",6,[[],["bitmask",3]]],[11,"from_bitmask","","Creates a wide SIMD mask from a single-bit bitmask",6,[[]]],[11,"all","","Returns `true` if all lanes are truthy",6,[[]]],[11,"any","","Returns `true` if any lanes are truthy",6,[[]]],[11,"none","","Returns `true` if all lanes are falsey",6,[[]]],[11,"count","","Counts the number of truthy lanes",6,[[]]],[11,"select","","For each lane, selects from `t` if the mask lane is…",6,[[]]],[0,"math","","Vectorized Math Library",null,null],[0,"complex","thermite::math","Complex Number Vectors",null,null],[3,"Complex","thermite::math::complex","",null,null],[12,"re","","",7,null],[12,"im","","",7,null],[0,"poly","thermite::math","Optimized fixed-degree polynomial evaluation",null,null],[5,"poly_1","thermite::math::poly","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_2","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_3","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_4","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_5","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_6","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_7","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_8","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_9","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_10","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_11","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_12","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_13","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_14","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_15","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_30","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[8,"SimdVectorizedMath","thermite::math","Set of vectorized special functions optimized for both…",null,null],[10,"scale","","Scales values between `in_min` and `in_max`, to between…",8,[[]]],[10,"lerp","","Linearly interpolates between `a` and `b` using `self`",8,[[]]],[10,"fmod","","Returns the floating-point remainder of `self / y`…",8,[[]]],[10,"hypot","","Computes `sqrt(x * x + y * y)` for each element of the…",8,[[]]],[10,"poly","","Computes the sum `Σ(coefficients[i] * x^i)` from `i=0` to…",8,[[]]],[10,"poly_f","","Computes the sum `Σ(f(i)*x^i)` from `i=0` to `n`",8,[[]]],[10,"sin","","Computes the sine of a vector.",8,[[]]],[10,"cos","","Computes the cosine of a vector.",8,[[]]],[10,"tan","","Computes the tangent of a vector.",8,[[]]],[10,"sin_cos","","Computes both the sine and cosine of a vector together…",8,[[]]],[10,"sinh","","Computes the hyperbolic-sine of a vector.",8,[[]]],[10,"cosh","","Computes the hyperbolic-cosine of a vector.",8,[[]]],[10,"tanh","","Computes the hyperbolic-tangent of a vector.",8,[[]]],[10,"asinh","","Computes the hyperbolic-arcsine of a vector.",8,[[]]],[10,"acosh","","Computes the hyperbolic-arccosine of a vector.",8,[[]]],[10,"atanh","","Computes the hyperbolic-arctangent of a vector.",8,[[]]],[10,"asin","","Computes the arcsine of a vector.",8,[[]]],[10,"acos","","Computes the arccosine of a vector.",8,[[]]],[10,"atan","","Computes the arctangent of a vector.",8,[[]]],[10,"atan2","","Computes the four quadrant arc-tangent of `y`(`self`) and…",8,[[]]],[10,"exp","","The exponential function, returns `e^(self)`",8,[[]]],[10,"exph","","Half-exponential function, returns `0.5 * e^(self)`",8,[[]]],[10,"exp2","","Binary exponential function, returns `2^(self)`",8,[[]]],[10,"exp10","","Base-10 exponential function, returns `10^(self)`",8,[[]]],[10,"exp_m1","","Exponential function minus one, `e^(self) - 1.0`, special…",8,[[]]],[10,"cbrt","","Computes the cubic-root of each lane in a vector.",8,[[]]],[10,"powf","","Computes `x^e` where `x` is `self` and `e` is a vector of…",8,[[]]],[10,"powiv","","Computes `x^e` where `x` is `self` and `e` is a vector of…",8,[[]]],[10,"powi","","Computes `x^e` where `x` is `self` and `e` is a signed…",8,[[]]],[10,"ln","","Computes the natural logarithm of a vector.",8,[[]]],[10,"ln_1p","","Computes `ln(1+x)` where `x` is `self`, more accurately…",8,[[]]],[10,"log2","","Computes the base-2 logarithm of a vector",8,[[]]],[10,"log10","","Computes the base-10 logarithm of a vector",8,[[]]],[10,"erf","","Computes the error function for each value in a vector.",8,[[]]],[10,"erfinv","","Computes the inverse error function for each value in a…",8,[[]]],[10,"tgamma","","Computes the Gamma function (`Γ(z)`) for any real input,…",8,[[]]],[10,"next_float","","Finds the next representable float moving upwards to…",8,[[]]],[10,"prev_float","","Finds the previous representable float moving downwards to…",8,[[]]],[10,"smoothstep","","Calculates a sigmoid-like 3rd-order interpolation function.",8,[[]]],[10,"smootherstep","","Calculates a sigmoid-like 5th-order interpolation function.",8,[[]]],[10,"smootheststep","","Calculates a sigmoid-like 7th-order interpolation function.",8,[[]]],[10,"hermite","","Computes the n-th degree physicists\' Hermite polynomial…",8,[[]]],[10,"hermitev","","Computes the n-th degree physicists\' Hermite polynomial…",8,[[]]],[10,"jacobi","","Computes the n-th degree Jacobi polynomial via the 3-term…",8,[[]]],[10,"jacobi_d","","Computes the m-th derivative of an n-th degree Jacobi…",8,[[]]],[10,"legendre_p","","Computes the m-th associated n-th degree Legendre…",8,[[]]],[0,"rng","thermite","",null,null],[0,"pcg32","thermite::rng","",null,null],[3,"PCG32","thermite::rng::pcg32","",null,null],[0,"xoshiro","thermite::rng","",null,null],[3,"SplitMix64","thermite::rng::xoshiro","",null,null],[3,"Xoshiro128Plus","","",null,null],[3,"Xoshiro256Plus","","",null,null],[11,"new","","",9,[[["vu64",6]]]],[8,"SimdRng","thermite::rng","",null,null],[10,"reseed","","",10,[[["vu64",6]]]],[11,"next_u32","","",10,[[],["vu32",6]]],[11,"next_u64","","",10,[[],["vu64",6]]],[11,"next_f32","","",10,[[],["vf32",6]]],[11,"next_f64","","",10,[[],["vf64",6]]],[6,"AssociatedVector","thermite","Associated vector type for a scalar type",null,null],[6,"Vi32","","",null,null],[6,"Vi64","","",null,null],[6,"Vu32","","",null,null],[6,"Vu64","","",null,null],[6,"Vf32","","",null,null],[6,"Vf64","","",null,null],[6,"Vusize","","",null,null],[6,"Visize","","",null,null],[8,"SimdFromCast","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","Casts one vector to another, performing proper numeric…",11,[[]]],[10,"from_cast_mask","","Casts one mask to another, not caring about the value…",11,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","Casts one vector to another, performing proper numeric…",12,[[]]],[10,"cast_mask","","Casts one mask to another, not caring about the value…",12,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction set",null,null],[11,"cast_to","","",13,[[],["simdfromcast",8]]],[8,"SimdElement","","Umbrella trait for SIMD vector element bounds",null,null],[8,"SimdShuffleIndices","","Helper trait for constant vector shuffles",null,null],[18,"INDICES","","",14,null],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",15,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",15,null],[18,"NUM_ELEMENTS","","",15,null],[18,"ALIGNMENT","","",15,null],[10,"splat","","Creates a new vector with all lanes set to the given value",15,[[]]],[11,"undefined","","Returns a vector containing possibly undefined or…",15,[[]]],[11,"splat_any","","Same as `splat`, but is more convenient for initializing…",15,[[]]],[11,"shuffle","","Shuffles between two vectors based on the static indices…",15,[[["simdshuffleindices",8]]]],[10,"shuffle_unchecked","","Shuffles between two vectors based on the static indices…",15,[[["simdshuffleindices",8]]]],[11,"shuffle_dyn","","Shuffles between two vectors based on the dynamic indices…",15,[[]]],[11,"shuffle_dyn_unchecked","","Like [`Self::shuffle_dyn`], but does not check for valid…",15,[[]]],[11,"alloc","","",15,[[],["simdbuffer",3]]],[11,"extract","","Extracts an element at the given lane index.",15,[[]]],[11,"replace","","Returns a new vector with the given value at the given…",15,[[]]],[10,"extract_unchecked","","Extracts an element at the given lane index.",15,[[]]],[10,"replace_unchecked","","Returns a new vector with the given value at the given…",15,[[]]],[11,"load_aligned","","Loads a vector from a slice that has an alignment of at…",15,[[]]],[11,"load_unaligned","","Loads a vector from a slice",15,[[]]],[11,"store_aligned","","Stores a vector into a slice with an alignment of at least…",15,[[]]],[11,"store_unaligned","","Stores a vector into a slice.",15,[[]]],[11,"load_aligned_unchecked","","Loads a vector from the given aligned address.",15,[[]]],[11,"store_aligned_unchecked","","Stores a vector to the given aligned address.",15,[[]]],[11,"load_unaligned_unchecked","","Loads a vector from a given address (does not have to be…",15,[[]]],[11,"store_unaligned_unchecked","","Stores a vector to a given address (does not have to be…",15,[[]]],[11,"gather_unchecked","","",15,[[]]],[11,"scatter_unchecked","","",15,[[]]],[11,"gather_masked_unchecked","","Like `Self::gather`, but individual lanes are loaded based…",15,[[["mask",3]]]],[11,"scatter_masked_unchecked","","Like `self.scatter()`, but individual lanes are stored…",15,[[["mask",3]]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes `!self & other`, may be more performant than the…",16,[[]]],[18,"FULL_BITMASK","","Bitmask corresponding to all lanes of the mask being truthy.",16,null],[10,"bitmask","","Returns an integer where each bit corresponds to the…",16,[[]]],[8,"SimdVector","","Defines common operations on numeric vectors",null,null],[11,"gather","","Loads values from arbitrary addresses in memory based on…",17,[[]]],[11,"scatter","","Stores values to arbitrary addresses in memory based on…",17,[[]]],[11,"gather_masked","","",17,[[["mask",3]]]],[11,"scatter_masked","","",17,[[["mask",3]]]],[10,"zero","","",17,[[]]],[10,"one","","",17,[[]]],[10,"indexed","","Returns a vector where the first lane is zero, and each…",17,[[]]],[10,"min_value","","Maximum representable valid value",17,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",17,[[]]],[11,"min","","Per-lane, select the minimum value",17,[[]]],[11,"max","","Per-lane, select the maximum value",17,[[]]],[10,"min_element","","Find the minimum value across all lanes",17,[[]]],[10,"max_element","","Find the maximum value across all lanes",17,[[]]],[10,"eq","","",17,[[],["mask",3]]],[10,"gt","","",17,[[],["mask",3]]],[11,"ne","","",17,[[],["mask",3]]],[11,"lt","","",17,[[],["mask",3]]],[11,"le","","",17,[[],["mask",3]]],[11,"ge","","",17,[[],["mask",3]]],[8,"SimdIntoBits","","Transmutations into raw bits",null,null],[11,"into_bits","","",18,[[]]],[8,"SimdFromBits","","Transmutations from raw bits",null,null],[11,"from_bits","","",19,[[]]],[8,"SimdIntegerDivision","","Specialized integer division by [`Divider`]s",null,null],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[10,"saturating_add","","Saturating addition, will not wrap",20,[[]]],[10,"saturating_sub","","Saturating subtraction, will not wrap",20,[[]]],[10,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t…",20,[[]]],[10,"wrapping_product","","Multiply all lanes together, wrapping the result if it…",20,[[]]],[11,"rol","","Rotates the bits in each lane to the left (towards HSB) by…",20,[[]]],[11,"ror","","Rotates the bits in each lane to the right (towards LSB)…",20,[[]]],[10,"rolv","","Rotates the bits in each lane to the left (towards HSB) by…",20,[[]]],[10,"rorv","","Rotates the bits in each lane to the right (towards LSB)…",20,[[]]],[10,"reverse_bits","","Reverses the bits of each lane in the vector.",20,[[]]],[10,"count_ones","","Counts the number of 1 bits in each lane of the vector.",20,[[]]],[11,"count_zeros","","Counts the number of 0 bits in each lane of the vector.",20,[[]]],[10,"leading_zeros","","Counts the number of leading zeros in each lane of the…",20,[[]]],[10,"trailing_zeros","","Counts the number of trailing zeros in each lane of the…",20,[[]]],[11,"leading_ones","","Counts the number of leading ones in each lane of the…",20,[[]]],[11,"trailing_ones","","Counts the number of trailing ones in each lane of the…",20,[[]]],[8,"SimdUnsignedIntVector","","Unsigned SIMD vector",null,null],[11,"log2p1","","Returns `floor(log2(x)) + 1`",21,[[]]],[11,"is_power_of_two","","Returns a mask wherein if a lane was a power of two, the…",21,[[],["mask",3]]],[10,"next_power_of_two_m1","","Returns `next_power_of_two(x) - 1`",21,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",22,[[]]],[10,"min_positive","","Minimum positive number",22,[[]]],[11,"abs","","Absolute value",22,[[]]],[11,"copysign","","Copies the sign from `sign` to `self`",22,[[]]],[11,"signum","","Returns `-1` if less than zero, `+1` otherwise.",22,[[]]],[11,"is_positive","","Test if positive, greater or equal to zero",22,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",22,[[],["mask",3]]],[11,"select_negative","","On platforms with true \\\"select\\\" instructions, they often…",22,[[]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[16,"Vi","","",23,null],[16,"Vu","","",23,null],[10,"epsilon","","",23,[[]]],[10,"infinity","","",23,[[]]],[10,"neg_infinity","","",23,[[]]],[10,"neg_zero","","",23,[[]]],[10,"nan","","",23,[[]]],[11,"load_f16_unaligned","","Load half-precision floats and up-convert them into `Self`",23,[[]]],[11,"store_f16_unaligned","","Down-convert `self` into half-precision and store",23,[[]]],[10,"load_f16_unaligned_unchecked","","",23,[[]]],[10,"store_f16_unaligned_unchecked","","",23,[[]]],[10,"to_int_fast","","Can convert to a signed integer faster than a regular…",23,[[]]],[10,"to_uint_fast","","Can convert to a signed integer faster than a regular…",23,[[]]],[11,"combine_sign","","Same as `self * sign.signum()` or `select(sign_bit(sign),…",23,[[]]],[10,"sum","","Compute the horizontal sum of all elements",23,[[]]],[10,"product","","Compute the horizontal product of all elements",23,[[]]],[10,"mul_add","","Fused multiply-add",23,[[]]],[11,"mul_sub","","Fused multiply-subtract",23,[[]]],[11,"nmul_add","","Fused negated multiply-add",23,[[]]],[11,"nmul_sub","","Fused negated multiply-subtract",23,[[]]],[10,"round","","",23,[[]]],[10,"ceil","","",23,[[]]],[10,"floor","","",23,[[]]],[10,"trunc","","",23,[[]]],[11,"fract","","",23,[[]]],[10,"sqrt","","",23,[[]]],[11,"rsqrt","","Compute the approximate reciprocal of the square root `(1…",23,[[]]],[11,"rsqrt_precise","","A more precise `1 / sqrt(x)` variation, which may use…",23,[[]]],[11,"recepr","","Computes the approximate reciprocal/inverse of each value",23,[[]]],[11,"approx_eq","","",23,[[],["mask",3]]],[11,"clamp","","",23,[[]]],[11,"saturate","","Clamps self to between 0 and 1",23,[[]]],[11,"is_finite","","",23,[[],["mask",3]]],[11,"is_infinite","","",23,[[],["mask",3]]],[11,"is_normal","","",23,[[],["mask",3]]],[10,"is_subnormal","","",23,[[],["mask",3]]],[11,"is_zero_or_subnormal","","",23,[[],["mask",3]]],[11,"is_nan","","",23,[[],["mask",3]]],[8,"SimdPointer","","Guarantees the vector can be used as a pointer in `VPtr`",null,null],[8,"Simd","","SIMD Instruction set, contains all types",null,null],[18,"INSTRSET","","",24,null],[16,"Vi32","","32-bit signed integer vector",24,null],[16,"Vi64","","64-bit signed integer vector",24,null],[16,"Vu32","","32-bit unsigned integer vector",24,null],[16,"Vu64","","64-bit unsigned integer vector",24,null],[16,"Vf32","","Single-precision 32-bit floating point vector",24,null],[16,"Vf64","","Double-precision 64-bit floating point vector",24,null],[16,"Vusize","","",24,null],[16,"Visize","","",24,null],[14,"shuffle","","Shuffles the elements in one or two vectors into a new…",null,null],[11,"from_cast","","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",2,[[]]],[11,"from_cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"cast","","",2,[[]]],[11,"cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from_cast","","",3,[[]]],[11,"from_cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"cast","","",3,[[]]],[11,"cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from_cast","","",4,[[]]],[11,"from_cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"cast","","",4,[[]]],[11,"cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from_cast","","",5,[[]]],[11,"from_cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"cast","","",5,[[]]],[11,"cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from_cast","","",6,[[]]],[11,"from_cast_mask","","",6,[[["mask",3]],["mask",3]]],[11,"cast","","",6,[[]]],[11,"cast_mask","","",6,[[["mask",3]],["mask",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx1","",25,[[]]],[11,"from_cast_mask","","",25,[[["mask",3]],["mask",3]]],[11,"cast","","",25,[[]]],[11,"cast_mask","","",25,[[["mask",3]],["mask",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"scale","","",26,[[]]],[11,"lerp","","",26,[[]]],[11,"fmod","","",26,[[]]],[11,"hypot","","",26,[[]]],[11,"powi","","",26,[[]]],[11,"powiv","","",26,[[]]],[11,"poly_f","","",26,[[]]],[11,"poly","","",26,[[]]],[11,"hermite","","",26,[[]]],[11,"hermitev","","",26,[[]]],[11,"jacobi","","",26,[[]]],[11,"jacobi_d","","",26,[[]]],[11,"legendre_p","","",26,[[]]],[11,"sin","","",26,[[]]],[11,"cos","","",26,[[]]],[11,"tan","","",26,[[]]],[11,"sin_cos","","",26,[[]]],[11,"sinh","","",26,[[]]],[11,"cosh","","",26,[[]]],[11,"tanh","","",26,[[]]],[11,"asinh","","",26,[[]]],[11,"acosh","","",26,[[]]],[11,"atanh","","",26,[[]]],[11,"asin","","",26,[[]]],[11,"acos","","",26,[[]]],[11,"atan","","",26,[[]]],[11,"atan2","","",26,[[]]],[11,"exp","","",26,[[]]],[11,"exph","","",26,[[]]],[11,"exp2","","",26,[[]]],[11,"exp10","","",26,[[]]],[11,"exp_m1","","",26,[[]]],[11,"cbrt","","",26,[[]]],[11,"powf","","",26,[[]]],[11,"ln","","",26,[[]]],[11,"ln_1p","","",26,[[]]],[11,"log2","","",26,[[]]],[11,"log10","","",26,[[]]],[11,"erf","","",26,[[]]],[11,"erfinv","","",26,[[]]],[11,"tgamma","","",26,[[]]],[11,"next_float","","",26,[[]]],[11,"prev_float","","",26,[[]]],[11,"smoothstep","","",26,[[]]],[11,"smootherstep","","",26,[[]]],[11,"smootheststep","","",26,[[]]],[11,"from_cast","","",26,[[]]],[11,"from_cast_mask","","",26,[[["mask",3]],["mask",3]]],[11,"cast","","",26,[[]]],[11,"cast_mask","","",26,[[["mask",3]],["mask",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"scale","","",27,[[]]],[11,"lerp","","",27,[[]]],[11,"fmod","","",27,[[]]],[11,"hypot","","",27,[[]]],[11,"powi","","",27,[[]]],[11,"powiv","","",27,[[]]],[11,"poly_f","","",27,[[]]],[11,"poly","","",27,[[]]],[11,"hermite","","",27,[[]]],[11,"hermitev","","",27,[[]]],[11,"jacobi","","",27,[[]]],[11,"jacobi_d","","",27,[[]]],[11,"legendre_p","","",27,[[]]],[11,"sin","","",27,[[]]],[11,"cos","","",27,[[]]],[11,"tan","","",27,[[]]],[11,"sin_cos","","",27,[[]]],[11,"sinh","","",27,[[]]],[11,"cosh","","",27,[[]]],[11,"tanh","","",27,[[]]],[11,"asinh","","",27,[[]]],[11,"acosh","","",27,[[]]],[11,"atanh","","",27,[[]]],[11,"asin","","",27,[[]]],[11,"acos","","",27,[[]]],[11,"atan","","",27,[[]]],[11,"atan2","","",27,[[]]],[11,"exp","","",27,[[]]],[11,"exph","","",27,[[]]],[11,"exp2","","",27,[[]]],[11,"exp10","","",27,[[]]],[11,"exp_m1","","",27,[[]]],[11,"cbrt","","",27,[[]]],[11,"powf","","",27,[[]]],[11,"ln","","",27,[[]]],[11,"ln_1p","","",27,[[]]],[11,"log2","","",27,[[]]],[11,"log10","","",27,[[]]],[11,"erf","","",27,[[]]],[11,"erfinv","","",27,[[]]],[11,"tgamma","","",27,[[]]],[11,"next_float","","",27,[[]]],[11,"prev_float","","",27,[[]]],[11,"smoothstep","","",27,[[]]],[11,"smootherstep","","",27,[[]]],[11,"smootheststep","","",27,[[]]],[11,"from_cast","","",27,[[]]],[11,"from_cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"cast","","",27,[[]]],[11,"cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from_cast","","",28,[[]]],[11,"from_cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"cast","","",28,[[]]],[11,"cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from_cast","","",29,[[]]],[11,"from_cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"cast","","",29,[[]]],[11,"cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from_cast","","",30,[[]]],[11,"from_cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"cast","","",30,[[]]],[11,"cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from_cast","","",31,[[]]],[11,"from_cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"cast","","",31,[[]]],[11,"cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx2","",32,[[]]],[11,"from_cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"cast","","",32,[[]]],[11,"cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from_cast","","",33,[[]]],[11,"from_cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"cast","","",33,[[]]],[11,"cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from_cast","","",34,[[]]],[11,"from_cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"cast","","",34,[[]]],[11,"cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from_cast","","",35,[[]]],[11,"from_cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"cast","","",35,[[]]],[11,"cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from_cast","","",36,[[]]],[11,"from_cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"cast","","",36,[[]]],[11,"cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from_cast","thermite::math::complex","",7,[[]]],[11,"from_cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"cast","","",7,[[]]],[11,"cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from_cast","thermite::rng::pcg32","",37,[[]]],[11,"from_cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"cast","","",37,[[]]],[11,"cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from_cast","thermite::rng::xoshiro","",9,[[]]],[11,"from_cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"cast","","",9,[[]]],[11,"cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from_cast","","",38,[[]]],[11,"from_cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"cast","","",38,[[]]],[11,"cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from_cast","","",39,[[]]],[11,"from_cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"cast","","",39,[[]]],[11,"cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"reseed","thermite::rng::pcg32","",37,[[["vu64",6]]]],[11,"next_u32","","",37,[[],["vu32",6]]],[11,"reseed","thermite::rng::xoshiro","",9,[[["vu64",6]]]],[11,"next_u32","","",9,[[],["vu32",6]]],[11,"next_u64","","",9,[[],["vu64",6]]],[11,"reseed","","",38,[[["vu64",6]]]],[11,"next_u64","","",38,[[],["vu64",6]]],[11,"reseed","","",39,[[["vu64",6]]]],[11,"next_u64","","",39,[[],["vu64",6]]],[11,"from_cast","thermite::backends::avx1","",26,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",26,[[["mask",3],["i32x8",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",26,[[["u32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",26,[[["avx1",3],["mask",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",26,[[["u64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",26,[[["avx1",3],["mask",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",26,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",26,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",26,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",26,[[["avx1",3],["i64x8",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",27,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["i32x8",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",27,[[["u32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",27,[[["avx1",3],["mask",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",27,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",27,[[["f32x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",27,[[["u64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",27,[[["avx1",3],["mask",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",27,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",27,[[["avx1",3],["i64x8",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",28,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",28,[[["f32x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",28,[[["u32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",28,[[["avx1",3],["mask",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",28,[[["u64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",28,[[["avx1",3],["mask",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",28,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",28,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",28,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",28,[[["avx1",3],["i64x8",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",29,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",29,[[["f32x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",29,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",29,[[["mask",3],["i32x8",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",29,[[["u32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",29,[[["avx1",3],["mask",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",29,[[["u64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",29,[[["avx1",3],["mask",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",29,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",29,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",30,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",30,[[["mask",3],["i32x8",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",30,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",30,[[["f32x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",30,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",30,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",30,[[["u64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",30,[[["avx1",3],["mask",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",30,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",30,[[["avx1",3],["i64x8",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",31,[[["u32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",31,[[["avx1",3],["mask",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",31,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",31,[[["f32x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",31,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",31,[[["mask",3],["i32x8",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",31,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",31,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",31,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",31,[[["avx1",3],["i64x8",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",26,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",26,[[["i32x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",26,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",26,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",26,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",26,[[["mask",3],["u64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",26,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",26,[[["f64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",26,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",26,[[["avx2",3],["mask",3],["i64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",27,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["i32x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",27,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",27,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["f32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",27,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["u64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",27,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",27,[[["avx2",3],["mask",3],["i64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","thermite::backends::avx2","",32,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",32,[[["f32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",32,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",32,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",32,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",32,[[["mask",3],["u64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",32,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",32,[[["f64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",32,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",32,[[["avx2",3],["mask",3],["i64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",33,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",33,[[["f32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",33,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",33,[[["i32x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",33,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",33,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",33,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",33,[[["mask",3],["u64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",33,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",33,[[["f64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",34,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",34,[[["i32x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",34,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",34,[[["f32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",34,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",34,[[["f64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",34,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",34,[[["mask",3],["u64x8",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",34,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",34,[[["avx2",3],["mask",3],["i64x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",35,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["f32x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["i32x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["f64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["avx2",3],["i64x8",3]]]],[11,"from_cast_mask","","",35,[[["avx2",3],["mask",3],["i64x8",3]],[["mask",3],["avx2",3]]]],[11,"splat","thermite::backends::avx1","",26,[[]]],[11,"undefined","","",26,[[]]],[11,"load_aligned_unchecked","","",26,[[]]],[11,"load_unaligned_unchecked","","",26,[[]]],[11,"store_aligned_unchecked","","",26,[[]]],[11,"store_unaligned_unchecked","","",26,[[]]],[11,"extract_unchecked","","",26,[[]]],[11,"replace_unchecked","","",26,[[]]],[11,"shuffle_unchecked","","",26,[[["simdshuffleindices",8]]]],[11,"splat","","",27,[[]]],[11,"undefined","","",27,[[]]],[11,"load_aligned_unchecked","","",27,[[]]],[11,"load_unaligned_unchecked","","",27,[[]]],[11,"store_aligned_unchecked","","",27,[[]]],[11,"store_unaligned_unchecked","","",27,[[]]],[11,"extract_unchecked","","",27,[[]]],[11,"replace_unchecked","","",27,[[]]],[11,"shuffle_unchecked","","",27,[[["simdshuffleindices",8]]]],[11,"splat","","",28,[[]]],[11,"undefined","","",28,[[]]],[11,"load_aligned_unchecked","","",28,[[]]],[11,"load_unaligned_unchecked","","",28,[[]]],[11,"store_aligned_unchecked","","",28,[[]]],[11,"store_unaligned_unchecked","","",28,[[]]],[11,"extract_unchecked","","",28,[[]]],[11,"replace_unchecked","","",28,[[]]],[11,"shuffle_unchecked","","",28,[[["simdshuffleindices",8]]]],[11,"splat","","",29,[[]]],[11,"undefined","","",29,[[]]],[11,"load_aligned_unchecked","","",29,[[]]],[11,"store_aligned_unchecked","","",29,[[]]],[11,"extract_unchecked","","",29,[[]]],[11,"replace_unchecked","","",29,[[]]],[11,"shuffle_unchecked","","",29,[[["simdshuffleindices",8]]]],[11,"splat","","",30,[[]]],[11,"undefined","","",30,[[]]],[11,"load_aligned_unchecked","","",30,[[]]],[11,"load_unaligned_unchecked","","",30,[[]]],[11,"store_aligned_unchecked","","",30,[[]]],[11,"store_unaligned_unchecked","","",30,[[]]],[11,"extract_unchecked","","",30,[[]]],[11,"replace_unchecked","","",30,[[]]],[11,"shuffle_unchecked","","",30,[[["simdshuffleindices",8]]]],[11,"splat","","",31,[[]]],[11,"undefined","","",31,[[]]],[11,"load_aligned_unchecked","","",31,[[]]],[11,"store_aligned_unchecked","","",31,[[]]],[11,"extract_unchecked","","",31,[[]]],[11,"replace_unchecked","","",31,[[]]],[11,"shuffle_unchecked","","",31,[[["simdshuffleindices",8]]]],[11,"splat","","",26,[[]]],[11,"undefined","","",26,[[]]],[11,"load_aligned_unchecked","","",26,[[]]],[11,"load_unaligned_unchecked","","",26,[[]]],[11,"store_aligned_unchecked","","",26,[[]]],[11,"store_unaligned_unchecked","","",26,[[]]],[11,"extract_unchecked","","",26,[[]]],[11,"replace_unchecked","","",26,[[]]],[11,"shuffle_unchecked","","",26,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",26,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",26,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","","",27,[[]]],[11,"undefined","","",27,[[]]],[11,"load_aligned_unchecked","","",27,[[]]],[11,"load_unaligned_unchecked","","",27,[[]]],[11,"store_aligned_unchecked","","",27,[[]]],[11,"store_unaligned_unchecked","","",27,[[]]],[11,"extract_unchecked","","",27,[[]]],[11,"replace_unchecked","","",27,[[]]],[11,"shuffle_unchecked","","",27,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",27,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",27,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","thermite::backends::avx2","",32,[[]]],[11,"undefined","","",32,[[]]],[11,"load_aligned_unchecked","","",32,[[]]],[11,"load_unaligned_unchecked","","",32,[[]]],[11,"store_aligned_unchecked","","",32,[[]]],[11,"store_unaligned_unchecked","","",32,[[]]],[11,"extract_unchecked","","",32,[[]]],[11,"replace_unchecked","","",32,[[]]],[11,"shuffle_unchecked","","",32,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",32,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",32,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","","",33,[[]]],[11,"undefined","","",33,[[]]],[11,"load_aligned_unchecked","","",33,[[]]],[11,"store_aligned_unchecked","","",33,[[]]],[11,"extract_unchecked","","",33,[[]]],[11,"replace_unchecked","","",33,[[]]],[11,"shuffle_unchecked","","",33,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",33,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",33,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","","",34,[[]]],[11,"undefined","","",34,[[]]],[11,"load_aligned_unchecked","","",34,[[]]],[11,"load_unaligned_unchecked","","",34,[[]]],[11,"store_aligned_unchecked","","",34,[[]]],[11,"store_unaligned_unchecked","","",34,[[]]],[11,"extract_unchecked","","",34,[[]]],[11,"replace_unchecked","","",34,[[]]],[11,"shuffle_unchecked","","",34,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",34,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",34,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","","",35,[[]]],[11,"undefined","","",35,[[]]],[11,"load_aligned_unchecked","","",35,[[]]],[11,"store_aligned_unchecked","","",35,[[]]],[11,"extract_unchecked","","",35,[[]]],[11,"replace_unchecked","","",35,[[]]],[11,"shuffle_unchecked","","",35,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",35,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",35,[[["i32x8",3],["avx2",3],["mask",3]]]],[11,"splat","thermite","",6,[[]]],[11,"load_aligned_unchecked","","",6,[[]]],[11,"store_aligned_unchecked","","",6,[[]]],[11,"load_unaligned_unchecked","","",6,[[]]],[11,"store_unaligned_unchecked","","",6,[[]]],[11,"extract_unchecked","","",6,[[]]],[11,"replace_unchecked","","",6,[[]]],[11,"shuffle_unchecked","","",6,[[["simdshuffleindices",8]]]],[11,"and_not","thermite::backends::avx1","",26,[[]]],[11,"bitmask","","",26,[[]]],[11,"_mm_not","","",26,[[]]],[11,"_mm_bitand","","",26,[[]]],[11,"_mm_bitor","","",26,[[]]],[11,"_mm_bitxor","","",26,[[]]],[11,"_mm_shr","","",26,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",26,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",26,[[]]],[11,"_mm_shri","","",26,[[]]],[11,"and_not","","",27,[[]]],[11,"bitmask","","",27,[[]]],[11,"_mm_not","","",27,[[]]],[11,"_mm_bitand","","",27,[[]]],[11,"_mm_bitor","","",27,[[]]],[11,"_mm_bitxor","","",27,[[]]],[11,"_mm_shr","","",27,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",27,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",27,[[]]],[11,"_mm_shri","","",27,[[]]],[11,"and_not","","",28,[[]]],[11,"bitmask","","",28,[[]]],[11,"_mm_not","","",28,[[]]],[11,"_mm_bitand","","",28,[[]]],[11,"_mm_bitor","","",28,[[]]],[11,"_mm_bitxor","","",28,[[]]],[11,"_mm_shr","","",28,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",28,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",28,[[]]],[11,"_mm_shri","","",28,[[]]],[11,"and_not","","",29,[[]]],[11,"bitmask","","",29,[[]]],[11,"_mm_not","","",29,[[]]],[11,"_mm_bitand","","",29,[[]]],[11,"_mm_bitor","","",29,[[]]],[11,"_mm_bitxor","","",29,[[]]],[11,"_mm_shr","","",29,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",29,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",29,[[]]],[11,"_mm_shri","","",29,[[]]],[11,"and_not","","",30,[[]]],[11,"bitmask","","",30,[[]]],[11,"_mm_not","","",30,[[]]],[11,"_mm_bitand","","",30,[[]]],[11,"_mm_bitor","","",30,[[]]],[11,"_mm_bitxor","","",30,[[]]],[11,"_mm_shr","","",30,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",30,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",30,[[]]],[11,"_mm_shri","","",30,[[]]],[11,"and_not","","",31,[[]]],[11,"bitmask","","",31,[[]]],[11,"_mm_not","","",31,[[]]],[11,"_mm_bitand","","",31,[[]]],[11,"_mm_bitor","","",31,[[]]],[11,"_mm_bitxor","","",31,[[]]],[11,"_mm_shr","","",31,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shl","","",31,[[["u32x8",3],["avx1",3]]]],[11,"_mm_shli","","",31,[[]]],[11,"_mm_shri","","",31,[[]]],[11,"and_not","","",26,[[]]],[11,"bitmask","","",26,[[]]],[11,"_mm_not","","",26,[[]]],[11,"_mm_bitand","","",26,[[]]],[11,"_mm_bitor","","",26,[[]]],[11,"_mm_bitxor","","",26,[[]]],[11,"_mm_shr","","",26,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",26,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",26,[[]]],[11,"_mm_shri","","",26,[[]]],[11,"and_not","","",27,[[]]],[11,"bitmask","","",27,[[]]],[11,"_mm_not","","",27,[[]]],[11,"_mm_bitand","","",27,[[]]],[11,"_mm_bitor","","",27,[[]]],[11,"_mm_bitxor","","",27,[[]]],[11,"_mm_shr","","",27,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",27,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",27,[[]]],[11,"_mm_shri","","",27,[[]]],[11,"and_not","thermite::backends::avx2","",32,[[]]],[11,"bitmask","","",32,[[]]],[11,"_mm_not","","",32,[[]]],[11,"_mm_bitand","","",32,[[]]],[11,"_mm_bitor","","",32,[[]]],[11,"_mm_bitxor","","",32,[[]]],[11,"_mm_shr","","",32,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",32,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",32,[[]]],[11,"_mm_shri","","",32,[[]]],[11,"and_not","","",33,[[]]],[11,"bitmask","","",33,[[]]],[11,"_mm_not","","",33,[[]]],[11,"_mm_bitand","","",33,[[]]],[11,"_mm_bitor","","",33,[[]]],[11,"_mm_bitxor","","",33,[[]]],[11,"_mm_shr","","",33,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",33,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",33,[[]]],[11,"_mm_shri","","",33,[[]]],[11,"and_not","","",34,[[]]],[11,"bitmask","","",34,[[]]],[11,"_mm_not","","",34,[[]]],[11,"_mm_bitand","","",34,[[]]],[11,"_mm_bitor","","",34,[[]]],[11,"_mm_bitxor","","",34,[[]]],[11,"_mm_shr","","",34,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",34,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",34,[[]]],[11,"_mm_shri","","",34,[[]]],[11,"and_not","","",35,[[]]],[11,"bitmask","","",35,[[]]],[11,"_mm_not","","",35,[[]]],[11,"_mm_bitand","","",35,[[]]],[11,"_mm_bitor","","",35,[[]]],[11,"_mm_bitxor","","",35,[[]]],[11,"_mm_shr","","",35,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",35,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",35,[[]]],[11,"_mm_shri","","",35,[[]]],[11,"zero","thermite::backends::avx1","",26,[[]]],[11,"one","","",26,[[]]],[11,"indexed","","",26,[[]]],[11,"min_value","","",26,[[]]],[11,"max_value","","",26,[[]]],[11,"min","","",26,[[]]],[11,"max","","",26,[[]]],[11,"min_element","","",26,[[]]],[11,"max_element","","",26,[[]]],[11,"eq","","",26,[[],[["mask",3],["avx1",3]]]],[11,"ne","","",26,[[],[["mask",3],["avx1",3]]]],[11,"lt","","",26,[[],[["mask",3],["avx1",3]]]],[11,"le","","",26,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",26,[[],[["mask",3],["avx1",3]]]],[11,"ge","","",26,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",26,[[]]],[11,"_mm_sub","","",26,[[]]],[11,"_mm_mul","","",26,[[]]],[11,"_mm_div","","",26,[[]]],[11,"_mm_rem","","",26,[[]]],[11,"zero","","",27,[[]]],[11,"one","","",27,[[]]],[11,"indexed","","",27,[[]]],[11,"min_value","","",27,[[]]],[11,"max_value","","",27,[[]]],[11,"min","","",27,[[]]],[11,"max","","",27,[[]]],[11,"min_element","","",27,[[]]],[11,"max_element","","",27,[[]]],[11,"eq","","",27,[[],[["mask",3],["avx1",3]]]],[11,"ne","","",27,[[],[["mask",3],["avx1",3]]]],[11,"lt","","",27,[[],[["mask",3],["avx1",3]]]],[11,"le","","",27,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",27,[[],[["mask",3],["avx1",3]]]],[11,"ge","","",27,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",27,[[]]],[11,"_mm_sub","","",27,[[]]],[11,"_mm_mul","","",27,[[]]],[11,"_mm_div","","",27,[[]]],[11,"_mm_rem","","",27,[[]]],[11,"zero","","",28,[[]]],[11,"one","","",28,[[]]],[11,"indexed","","",28,[[]]],[11,"min","","",28,[[]]],[11,"max","","",28,[[]]],[11,"min_value","","",28,[[]]],[11,"max_value","","",28,[[]]],[11,"min_element","","",28,[[]]],[11,"max_element","","",28,[[]]],[11,"eq","","",28,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",28,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",28,[[]]],[11,"_mm_sub","","",28,[[]]],[11,"_mm_mul","","",28,[[]]],[11,"_mm_div","","",28,[[]]],[11,"_mm_rem","","",28,[[]]],[11,"zero","","",29,[[]]],[11,"one","","",29,[[]]],[11,"indexed","","",29,[[]]],[11,"min_value","","",29,[[]]],[11,"max_value","","",29,[[]]],[11,"min_element","","",29,[[]]],[11,"max_element","","",29,[[]]],[11,"eq","","",29,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",29,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",29,[[]]],[11,"_mm_sub","","",29,[[]]],[11,"_mm_mul","","",29,[[]]],[11,"_mm_div","","",29,[[]]],[11,"_mm_rem","","",29,[[]]],[11,"zero","","",30,[[]]],[11,"one","","",30,[[]]],[11,"indexed","","",30,[[]]],[11,"min","","",30,[[]]],[11,"max","","",30,[[]]],[11,"min_value","","",30,[[]]],[11,"max_value","","",30,[[]]],[11,"min_element","","",30,[[]]],[11,"max_element","","",30,[[]]],[11,"eq","","",30,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",30,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",30,[[]]],[11,"_mm_sub","","",30,[[]]],[11,"_mm_mul","","",30,[[]]],[11,"_mm_div","","",30,[[]]],[11,"_mm_rem","","",30,[[]]],[11,"zero","","",31,[[]]],[11,"one","","",31,[[]]],[11,"indexed","","",31,[[]]],[11,"min_value","","",31,[[]]],[11,"max_value","","",31,[[]]],[11,"min_element","","",31,[[]]],[11,"max_element","","",31,[[]]],[11,"eq","","",31,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",31,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",31,[[]]],[11,"_mm_sub","","",31,[[]]],[11,"_mm_mul","","",31,[[]]],[11,"_mm_div","","",31,[[]]],[11,"_mm_rem","","",31,[[]]],[11,"zero","","",26,[[]]],[11,"one","","",26,[[]]],[11,"indexed","","",26,[[]]],[11,"min_value","","",26,[[]]],[11,"max_value","","",26,[[]]],[11,"min","","",26,[[]]],[11,"max","","",26,[[]]],[11,"min_element","","",26,[[]]],[11,"max_element","","",26,[[]]],[11,"eq","","",26,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",26,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",26,[[],[["mask",3],["avx2",3]]]],[11,"le","","",26,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",26,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",26,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",26,[[]]],[11,"_mm_sub","","",26,[[]]],[11,"_mm_mul","","",26,[[]]],[11,"_mm_div","","",26,[[]]],[11,"_mm_rem","","",26,[[]]],[11,"zero","","",27,[[]]],[11,"one","","",27,[[]]],[11,"indexed","","",27,[[]]],[11,"min_value","","",27,[[]]],[11,"max_value","","",27,[[]]],[11,"min","","",27,[[]]],[11,"max","","",27,[[]]],[11,"min_element","","",27,[[]]],[11,"max_element","","",27,[[]]],[11,"eq","","",27,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",27,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",27,[[],[["mask",3],["avx2",3]]]],[11,"le","","",27,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",27,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",27,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",27,[[]]],[11,"_mm_sub","","",27,[[]]],[11,"_mm_mul","","",27,[[]]],[11,"_mm_div","","",27,[[]]],[11,"_mm_rem","","",27,[[]]],[11,"zero","thermite::backends::avx2","",32,[[]]],[11,"one","","",32,[[]]],[11,"indexed","","",32,[[]]],[11,"min","","",32,[[]]],[11,"max","","",32,[[]]],[11,"min_value","","",32,[[]]],[11,"max_value","","",32,[[]]],[11,"min_element","","",32,[[]]],[11,"max_element","","",32,[[]]],[11,"eq","","",32,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",32,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",32,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",32,[[]]],[11,"_mm_sub","","",32,[[]]],[11,"_mm_mul","","",32,[[]]],[11,"_mm_div","","",32,[[]]],[11,"_mm_rem","","",32,[[]]],[11,"zero","","",33,[[]]],[11,"one","","",33,[[]]],[11,"indexed","","",33,[[]]],[11,"min_value","","",33,[[]]],[11,"max_value","","",33,[[]]],[11,"min_element","","",33,[[]]],[11,"max_element","","",33,[[]]],[11,"eq","","",33,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",33,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",33,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",33,[[]]],[11,"_mm_sub","","",33,[[]]],[11,"_mm_mul","","",33,[[]]],[11,"_mm_div","","",33,[[]]],[11,"_mm_rem","","",33,[[]]],[11,"zero","","",34,[[]]],[11,"one","","",34,[[]]],[11,"indexed","","",34,[[]]],[11,"min","","",34,[[]]],[11,"max","","",34,[[]]],[11,"min_value","","",34,[[]]],[11,"max_value","","",34,[[]]],[11,"min_element","","",34,[[]]],[11,"max_element","","",34,[[]]],[11,"eq","","",34,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",34,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",34,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",34,[[]]],[11,"_mm_sub","","",34,[[]]],[11,"_mm_mul","","",34,[[]]],[11,"_mm_div","","",34,[[]]],[11,"_mm_rem","","",34,[[]]],[11,"zero","","",35,[[]]],[11,"one","","",35,[[]]],[11,"indexed","","",35,[[]]],[11,"min_value","","",35,[[]]],[11,"max_value","","",35,[[]]],[11,"min_element","","",35,[[]]],[11,"max_element","","",35,[[]]],[11,"eq","","",35,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",35,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",35,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",35,[[]]],[11,"_mm_sub","","",35,[[]]],[11,"_mm_mul","","",35,[[]]],[11,"_mm_div","","",35,[[]]],[11,"_mm_rem","","",35,[[]]],[11,"into_bits","thermite::backends::avx1","",26,[[],[["avx1",3],["u32x8",3]]]],[11,"into_bits","","",27,[[],[["avx1",3],["u64x8",3]]]],[11,"into_bits","","",28,[[],[["avx1",3],["u32x8",3]]]],[11,"into_bits","","",29,[[],[["avx1",3],["u64x8",3]]]],[11,"into_bits","","",26,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",27,[[],[["u64x8",3],["avx2",3]]]],[11,"into_bits","thermite::backends::avx2","",32,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",33,[[],[["u64x8",3],["avx2",3]]]],[11,"from_bits","thermite::backends::avx1","",26,[[["u32x8",3],["avx1",3]]]],[11,"from_bits","","",27,[[["u64x8",3],["avx1",3]]]],[11,"from_bits","","",28,[[["u32x8",3],["avx1",3]]]],[11,"from_bits","","",29,[[["u64x8",3],["avx1",3]]]],[11,"from_bits","","",26,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",27,[[["u64x8",3],["avx2",3]]]],[11,"from_bits","thermite::backends::avx2","",32,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",33,[[["u64x8",3],["avx2",3]]]],[11,"saturating_add","thermite::backends::avx1","",28,[[]]],[11,"saturating_sub","","",28,[[]]],[11,"wrapping_sum","","",28,[[]]],[11,"wrapping_product","","",28,[[]]],[11,"rolv","","",28,[[["u32x8",3],["avx1",3]]]],[11,"rorv","","",28,[[["u32x8",3],["avx1",3]]]],[11,"reverse_bits","","",28,[[]]],[11,"count_ones","","",28,[[]]],[11,"leading_zeros","","",28,[[]]],[11,"trailing_zeros","","",28,[[]]],[11,"saturating_add","","",29,[[]]],[11,"saturating_sub","","",29,[[]]],[11,"wrapping_sum","","",29,[[]]],[11,"wrapping_product","","",29,[[]]],[11,"rolv","","",29,[[["u32x8",3],["avx1",3]]]],[11,"rorv","","",29,[[["u32x8",3],["avx1",3]]]],[11,"reverse_bits","","",29,[[]]],[11,"count_ones","","",29,[[]]],[11,"leading_zeros","","",29,[[]]],[11,"trailing_zeros","","",29,[[]]],[11,"saturating_add","","",30,[[]]],[11,"saturating_sub","","",30,[[]]],[11,"wrapping_sum","","",30,[[]]],[11,"wrapping_product","","",30,[[]]],[11,"rolv","","",30,[[["u32x8",3],["avx1",3]]]],[11,"rorv","","",30,[[["u32x8",3],["avx1",3]]]],[11,"reverse_bits","","",30,[[]]],[11,"count_ones","","",30,[[]]],[11,"leading_zeros","","",30,[[]]],[11,"trailing_zeros","","",30,[[]]],[11,"saturating_add","","",31,[[]]],[11,"saturating_sub","","",31,[[]]],[11,"wrapping_sum","","",31,[[]]],[11,"wrapping_product","","",31,[[]]],[11,"rolv","","",31,[[["u32x8",3],["avx1",3]]]],[11,"rorv","","",31,[[["u32x8",3],["avx1",3]]]],[11,"reverse_bits","","",31,[[]]],[11,"count_ones","","",31,[[]]],[11,"leading_zeros","","",31,[[]]],[11,"trailing_zeros","","",31,[[]]],[11,"saturating_add","thermite::backends::avx2","",32,[[]]],[11,"saturating_sub","","",32,[[]]],[11,"wrapping_sum","","",32,[[]]],[11,"wrapping_product","","",32,[[]]],[11,"rolv","","",32,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",32,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",32,[[]]],[11,"count_ones","","",32,[[]]],[11,"leading_zeros","","",32,[[]]],[11,"trailing_zeros","","",32,[[]]],[11,"saturating_add","","",33,[[]]],[11,"saturating_sub","","",33,[[]]],[11,"wrapping_sum","","",33,[[]]],[11,"wrapping_product","","",33,[[]]],[11,"rolv","","",33,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",33,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",33,[[]]],[11,"count_ones","","",33,[[]]],[11,"leading_zeros","","",33,[[]]],[11,"trailing_zeros","","",33,[[]]],[11,"saturating_add","","",34,[[]]],[11,"saturating_sub","","",34,[[]]],[11,"wrapping_sum","","",34,[[]]],[11,"wrapping_product","","",34,[[]]],[11,"rolv","","",34,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",34,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",34,[[]]],[11,"count_ones","","",34,[[]]],[11,"leading_zeros","","",34,[[]]],[11,"trailing_zeros","","",34,[[]]],[11,"saturating_add","","",35,[[]]],[11,"saturating_sub","","",35,[[]]],[11,"wrapping_sum","","",35,[[]]],[11,"wrapping_product","","",35,[[]]],[11,"rolv","","",35,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",35,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",35,[[]]],[11,"count_ones","","",35,[[]]],[11,"leading_zeros","","",35,[[]]],[11,"trailing_zeros","","",35,[[]]],[11,"next_power_of_two_m1","thermite::backends::avx1","",30,[[]]],[11,"next_power_of_two_m1","","",31,[[]]],[11,"next_power_of_two_m1","thermite::backends::avx2","",34,[[]]],[11,"next_power_of_two_m1","","",35,[[]]],[11,"neg_one","thermite::backends::avx1","",26,[[]]],[11,"min_positive","","",26,[[]]],[11,"signum","","",26,[[]]],[11,"copysign","","",26,[[]]],[11,"abs","","",26,[[]]],[11,"_mm_neg","","",26,[[]]],[11,"neg_one","","",27,[[]]],[11,"min_positive","","",27,[[]]],[11,"signum","","",27,[[]]],[11,"copysign","","",27,[[]]],[11,"abs","","",27,[[]]],[11,"_mm_neg","","",27,[[]]],[11,"neg_one","","",28,[[]]],[11,"min_positive","","",28,[[]]],[11,"abs","","",28,[[]]],[11,"_mm_neg","","",28,[[]]],[11,"neg_one","","",29,[[]]],[11,"min_positive","","",29,[[]]],[11,"abs","","",29,[[]]],[11,"_mm_neg","","",29,[[]]],[11,"neg_one","","",26,[[]]],[11,"min_positive","","",26,[[]]],[11,"signum","","",26,[[]]],[11,"copysign","","",26,[[]]],[11,"abs","","",26,[[]]],[11,"select_negative","","",26,[[]]],[11,"_mm_neg","","",26,[[]]],[11,"neg_one","","",27,[[]]],[11,"min_positive","","",27,[[]]],[11,"signum","","",27,[[]]],[11,"copysign","","",27,[[]]],[11,"abs","","",27,[[]]],[11,"select_negative","","",27,[[]]],[11,"_mm_neg","","",27,[[]]],[11,"neg_one","thermite::backends::avx2","",32,[[]]],[11,"min_positive","","",32,[[]]],[11,"abs","","",32,[[]]],[11,"is_positive","","",32,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",32,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",32,[[]]],[11,"_mm_neg","","",32,[[]]],[11,"neg_one","","",33,[[]]],[11,"min_positive","","",33,[[]]],[11,"abs","","",33,[[]]],[11,"is_positive","","",33,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",33,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",33,[[]]],[11,"_mm_neg","","",33,[[]]],[11,"epsilon","thermite::backends::avx1","",26,[[]]],[11,"infinity","","",26,[[]]],[11,"neg_infinity","","",26,[[]]],[11,"neg_zero","","",26,[[]]],[11,"nan","","",26,[[]]],[11,"load_f16_unaligned_unchecked","","",26,[[]]],[11,"store_f16_unaligned_unchecked","","",26,[[]]],[11,"to_int_fast","","",26,[[]]],[11,"to_uint_fast","","",26,[[]]],[11,"sum","","",26,[[]]],[11,"product","","",26,[[]]],[11,"mul_add","","",26,[[]]],[11,"mul_sub","","",26,[[]]],[11,"nmul_add","","",26,[[]]],[11,"nmul_sub","","",26,[[]]],[11,"floor","","",26,[[]]],[11,"ceil","","",26,[[]]],[11,"round","","",26,[[]]],[11,"trunc","","",26,[[]]],[11,"sqrt","","",26,[[]]],[11,"rsqrt","","",26,[[]]],[11,"rsqrt_precise","","",26,[[]]],[11,"recepr","","",26,[[]]],[11,"is_subnormal","","",26,[[],[["mask",3],["avx1",3]]]],[11,"is_zero_or_subnormal","","",26,[[],[["mask",3],["avx1",3]]]],[11,"epsilon","","",27,[[]]],[11,"infinity","","",27,[[]]],[11,"neg_infinity","","",27,[[]]],[11,"neg_zero","","",27,[[]]],[11,"nan","","",27,[[]]],[11,"load_f16_unaligned_unchecked","","",27,[[]]],[11,"store_f16_unaligned_unchecked","","",27,[[]]],[11,"to_int_fast","","",27,[[]]],[11,"to_uint_fast","","",27,[[]]],[11,"sum","","",27,[[]]],[11,"product","","",27,[[]]],[11,"mul_add","","",27,[[]]],[11,"mul_sub","","",27,[[]]],[11,"nmul_add","","",27,[[]]],[11,"nmul_sub","","",27,[[]]],[11,"floor","","",27,[[]]],[11,"ceil","","",27,[[]]],[11,"round","","",27,[[]]],[11,"trunc","","",27,[[]]],[11,"sqrt","","",27,[[]]],[11,"is_subnormal","","",27,[[],[["mask",3],["avx1",3]]]],[11,"is_zero_or_subnormal","","",27,[[],[["mask",3],["avx1",3]]]],[11,"epsilon","","",26,[[]]],[11,"infinity","","",26,[[]]],[11,"neg_infinity","","",26,[[]]],[11,"neg_zero","","",26,[[]]],[11,"nan","","",26,[[]]],[11,"load_f16_unaligned_unchecked","","",26,[[]]],[11,"store_f16_unaligned_unchecked","","",26,[[]]],[11,"to_int_fast","","",26,[[]]],[11,"to_uint_fast","","",26,[[]]],[11,"sum","","",26,[[]]],[11,"product","","",26,[[]]],[11,"mul_add","","",26,[[]]],[11,"mul_sub","","",26,[[]]],[11,"nmul_add","","",26,[[]]],[11,"nmul_sub","","",26,[[]]],[11,"floor","","",26,[[]]],[11,"ceil","","",26,[[]]],[11,"round","","",26,[[]]],[11,"trunc","","",26,[[]]],[11,"sqrt","","",26,[[]]],[11,"rsqrt","","",26,[[]]],[11,"rsqrt_precise","","",26,[[]]],[11,"recepr","","",26,[[]]],[11,"is_subnormal","","",26,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",26,[[],[["mask",3],["avx2",3]]]],[11,"epsilon","","",27,[[]]],[11,"infinity","","",27,[[]]],[11,"neg_infinity","","",27,[[]]],[11,"neg_zero","","",27,[[]]],[11,"nan","","",27,[[]]],[11,"load_f16_unaligned_unchecked","","",27,[[]]],[11,"store_f16_unaligned_unchecked","","",27,[[]]],[11,"to_int_fast","","",27,[[]]],[11,"to_uint_fast","","",27,[[]]],[11,"sum","","",27,[[]]],[11,"product","","",27,[[]]],[11,"mul_add","","",27,[[]]],[11,"mul_sub","","",27,[[]]],[11,"nmul_add","","",27,[[]]],[11,"nmul_sub","","",27,[[]]],[11,"floor","","",27,[[]]],[11,"ceil","","",27,[[]]],[11,"round","","",27,[[]]],[11,"trunc","","",27,[[]]],[11,"sqrt","","",27,[[]]],[11,"is_subnormal","","",27,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",27,[[],[["mask",3],["avx2",3]]]],[11,"drop","thermite","",1,[[]]],[11,"clone","thermite::backends::avx1","",25,[[],["avx1",3]]],[11,"clone","","",26,[[],["f32x8",3]]],[11,"clone","","",27,[[],["f64x8",3]]],[11,"clone","","",28,[[],["i32x8",3]]],[11,"clone","","",29,[[],["i64x8",3]]],[11,"clone","","",30,[[],["u32x8",3]]],[11,"clone","","",31,[[],["u64x8",3]]],[11,"clone","thermite::backends::avx2","",32,[[],["i32x8",3]]],[11,"clone","","",33,[[],["i64x8",3]]],[11,"clone","","",34,[[],["u32x8",3]]],[11,"clone","","",35,[[],["u64x8",3]]],[11,"clone","","",36,[[],["avx2",3]]],[11,"clone","thermite","",3,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",4,[[],["vptr",3]]],[11,"clone","","",6,[[],["mask",3]]],[11,"clone","","",5,[[]]],[11,"clone","thermite::math::complex","",7,[[],["complex",3]]],[11,"clone","thermite::rng::pcg32","",37,[[],["pcg32",3]]],[11,"clone","thermite::rng::xoshiro","",9,[[],["splitmix64",3]]],[11,"clone","","",38,[[],["xoshiro128plus",3]]],[11,"clone","","",39,[[],["xoshiro256plus",3]]],[11,"clone","thermite","",0,[[],["simdinstructionset",4]]],[11,"default","thermite::backends::avx1","",26,[[]]],[11,"default","","",27,[[]]],[11,"default","","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","thermite::backends::avx2","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","","",35,[[]]],[11,"default","thermite","",6,[[]]],[11,"cmp","","",0,[[["simdinstructionset",4]],["ordering",4]]],[11,"eq","thermite::backends::avx1","",25,[[["avx1",3]]]],[11,"eq","","",26,[[]]],[11,"ne","","",26,[[]]],[11,"eq","","",27,[[]]],[11,"ne","","",27,[[]]],[11,"eq","","",28,[[]]],[11,"ne","","",28,[[]]],[11,"eq","","",29,[[]]],[11,"ne","","",29,[[]]],[11,"eq","","",30,[[]]],[11,"ne","","",30,[[]]],[11,"eq","","",31,[[]]],[11,"ne","","",31,[[]]],[11,"eq","","",26,[[]]],[11,"ne","","",26,[[]]],[11,"eq","","",27,[[]]],[11,"ne","","",27,[[]]],[11,"eq","thermite::backends::avx2","",32,[[]]],[11,"ne","","",32,[[]]],[11,"eq","","",33,[[]]],[11,"ne","","",33,[[]]],[11,"eq","","",34,[[]]],[11,"ne","","",34,[[]]],[11,"eq","","",35,[[]]],[11,"ne","","",35,[[]]],[11,"eq","","",36,[[["avx2",3]]]],[11,"eq","thermite","",3,[[["branchfreedivider",3]]]],[11,"ne","","",3,[[["branchfreedivider",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",4,[[["vptr",3]]]],[11,"ne","","",4,[[["vptr",3]]]],[11,"eq","","",5,[[]]],[11,"ne","","",5,[[]]],[11,"eq","thermite::rng::pcg32","",37,[[["pcg32",3]]]],[11,"ne","","",37,[[["pcg32",3]]]],[11,"eq","thermite::rng::xoshiro","",9,[[["splitmix64",3]]]],[11,"ne","","",9,[[["splitmix64",3]]]],[11,"eq","","",38,[[["xoshiro128plus",3]]]],[11,"ne","","",38,[[["xoshiro128plus",3]]]],[11,"eq","","",39,[[["xoshiro256plus",3]]]],[11,"ne","","",39,[[["xoshiro256plus",3]]]],[11,"eq","thermite","",0,[[["simdinstructionset",4]]]],[11,"partial_cmp","","",0,[[["simdinstructionset",4]],[["ordering",4],["option",4]]]],[11,"deref","","",1,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx1","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math::complex","",7,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::pcg32","",37,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::xoshiro","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",0,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx1","",26,[[]]],[11,"div","","",27,[[]]],[11,"div","","",28,[[["divider",3]]]],[11,"div","","",28,[[]]],[11,"div","","",29,[[["divider",3]]]],[11,"div","","",29,[[]]],[11,"div","","",30,[[["divider",3]]]],[11,"div","","",30,[[]]],[11,"div","","",31,[[["divider",3]]]],[11,"div","","",31,[[]]],[11,"div","","",26,[[]]],[11,"div","","",27,[[]]],[11,"div","thermite::backends::avx2","",32,[[["divider",3]]]],[11,"div","","",32,[[]]],[11,"div","","",33,[[["divider",3]]]],[11,"div","","",33,[[]]],[11,"div","","",34,[[["divider",3]]]],[11,"div","","",34,[[]]],[11,"div","","",35,[[["divider",3]]]],[11,"div","","",35,[[]]],[11,"div","thermite::math::complex","",7,[[]]],[11,"rem","thermite::backends::avx1","",26,[[]]],[11,"rem","","",27,[[]]],[11,"rem","","",28,[[]]],[11,"rem","","",29,[[]]],[11,"rem","","",30,[[]]],[11,"rem","","",31,[[]]],[11,"rem","","",26,[[]]],[11,"rem","","",27,[[]]],[11,"rem","thermite::backends::avx2","",32,[[]]],[11,"rem","","",33,[[]]],[11,"rem","","",34,[[]]],[11,"rem","","",35,[[]]],[11,"sub","thermite::backends::avx1","",26,[[]]],[11,"sub","","",27,[[]]],[11,"sub","","",28,[[]]],[11,"sub","","",29,[[]]],[11,"sub","","",30,[[]]],[11,"sub","","",31,[[]]],[11,"sub","","",26,[[]]],[11,"sub","","",27,[[]]],[11,"sub","thermite::backends::avx2","",32,[[]]],[11,"sub","","",33,[[]]],[11,"sub","","",34,[[]]],[11,"sub","","",35,[[]]],[11,"sub","thermite::math::complex","",7,[[]]],[11,"add","thermite::backends::avx1","",26,[[]]],[11,"add","","",27,[[]]],[11,"add","","",28,[[]]],[11,"add","","",29,[[]]],[11,"add","","",30,[[]]],[11,"add","","",31,[[]]],[11,"add","","",26,[[]]],[11,"add","","",27,[[]]],[11,"add","thermite::backends::avx2","",32,[[]]],[11,"add","","",33,[[]]],[11,"add","","",34,[[]]],[11,"add","","",35,[[]]],[11,"add","thermite::math::complex","",7,[[]]],[11,"mul","thermite::backends::avx1","",26,[[]]],[11,"mul","","",27,[[]]],[11,"mul","","",28,[[]]],[11,"mul","","",29,[[]]],[11,"mul","","",30,[[]]],[11,"mul","","",31,[[]]],[11,"mul","","",26,[[]]],[11,"mul","","",27,[[]]],[11,"mul","thermite::backends::avx2","",32,[[]]],[11,"mul","","",33,[[]]],[11,"mul","","",34,[[]]],[11,"mul","","",35,[[]]],[11,"mul","thermite::math::complex","",7,[[]]],[11,"neg","thermite::backends::avx1","",26,[[]]],[11,"neg","","",27,[[]]],[11,"neg","","",28,[[]]],[11,"neg","","",29,[[]]],[11,"neg","","",26,[[]]],[11,"neg","","",27,[[]]],[11,"neg","thermite::backends::avx2","",32,[[]]],[11,"neg","","",33,[[]]],[11,"neg","thermite::math::complex","",7,[[]]],[11,"add_assign","thermite::backends::avx1","",26,[[]]],[11,"add_assign","","",26,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","","",28,[[]]],[11,"add_assign","","",28,[[]]],[11,"add_assign","","",29,[[]]],[11,"add_assign","","",29,[[]]],[11,"add_assign","","",30,[[]]],[11,"add_assign","","",30,[[]]],[11,"add_assign","","",31,[[]]],[11,"add_assign","","",31,[[]]],[11,"add_assign","","",26,[[]]],[11,"add_assign","","",26,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","thermite::backends::avx2","",32,[[]]],[11,"add_assign","","",32,[[]]],[11,"add_assign","","",33,[[]]],[11,"add_assign","","",33,[[]]],[11,"add_assign","","",34,[[]]],[11,"add_assign","","",34,[[]]],[11,"add_assign","","",35,[[]]],[11,"add_assign","","",35,[[]]],[11,"sub_assign","thermite::backends::avx1","",26,[[]]],[11,"sub_assign","","",26,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","","",28,[[]]],[11,"sub_assign","","",28,[[]]],[11,"sub_assign","","",29,[[]]],[11,"sub_assign","","",29,[[]]],[11,"sub_assign","","",30,[[]]],[11,"sub_assign","","",30,[[]]],[11,"sub_assign","","",31,[[]]],[11,"sub_assign","","",31,[[]]],[11,"sub_assign","","",26,[[]]],[11,"sub_assign","","",26,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","thermite::backends::avx2","",32,[[]]],[11,"sub_assign","","",32,[[]]],[11,"sub_assign","","",33,[[]]],[11,"sub_assign","","",33,[[]]],[11,"sub_assign","","",34,[[]]],[11,"sub_assign","","",34,[[]]],[11,"sub_assign","","",35,[[]]],[11,"sub_assign","","",35,[[]]],[11,"mul_assign","thermite::backends::avx1","",26,[[]]],[11,"mul_assign","","",26,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","","",28,[[]]],[11,"mul_assign","","",28,[[]]],[11,"mul_assign","","",29,[[]]],[11,"mul_assign","","",29,[[]]],[11,"mul_assign","","",30,[[]]],[11,"mul_assign","","",30,[[]]],[11,"mul_assign","","",31,[[]]],[11,"mul_assign","","",31,[[]]],[11,"mul_assign","","",26,[[]]],[11,"mul_assign","","",26,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","thermite::backends::avx2","",32,[[]]],[11,"mul_assign","","",32,[[]]],[11,"mul_assign","","",33,[[]]],[11,"mul_assign","","",33,[[]]],[11,"mul_assign","","",34,[[]]],[11,"mul_assign","","",34,[[]]],[11,"mul_assign","","",35,[[]]],[11,"mul_assign","","",35,[[]]],[11,"div_assign","thermite::backends::avx1","",26,[[]]],[11,"div_assign","","",26,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","","",28,[[]]],[11,"div_assign","","",28,[[]]],[11,"div_assign","","",29,[[]]],[11,"div_assign","","",29,[[]]],[11,"div_assign","","",30,[[]]],[11,"div_assign","","",30,[[]]],[11,"div_assign","","",31,[[]]],[11,"div_assign","","",31,[[]]],[11,"div_assign","","",26,[[]]],[11,"div_assign","","",26,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","thermite::backends::avx2","",32,[[]]],[11,"div_assign","","",32,[[]]],[11,"div_assign","","",33,[[]]],[11,"div_assign","","",33,[[]]],[11,"div_assign","","",34,[[]]],[11,"div_assign","","",34,[[]]],[11,"div_assign","","",35,[[]]],[11,"div_assign","","",35,[[]]],[11,"rem_assign","thermite::backends::avx1","",26,[[]]],[11,"rem_assign","","",26,[[]]],[11,"rem_assign","","",27,[[]]],[11,"rem_assign","","",27,[[]]],[11,"rem_assign","","",28,[[]]],[11,"rem_assign","","",28,[[]]],[11,"rem_assign","","",29,[[]]],[11,"rem_assign","","",29,[[]]],[11,"rem_assign","","",30,[[]]],[11,"rem_assign","","",30,[[]]],[11,"rem_assign","","",31,[[]]],[11,"rem_assign","","",31,[[]]],[11,"rem_assign","","",26,[[]]],[11,"rem_assign","","",26,[[]]],[11,"rem_assign","","",27,[[]]],[11,"rem_assign","","",27,[[]]],[11,"rem_assign","thermite::backends::avx2","",32,[[]]],[11,"rem_assign","","",32,[[]]],[11,"rem_assign","","",33,[[]]],[11,"rem_assign","","",33,[[]]],[11,"rem_assign","","",34,[[]]],[11,"rem_assign","","",34,[[]]],[11,"rem_assign","","",35,[[]]],[11,"rem_assign","","",35,[[]]],[11,"not","thermite::backends::avx1","",26,[[]]],[11,"not","","",27,[[]]],[11,"not","","",28,[[]]],[11,"not","","",29,[[]]],[11,"not","","",30,[[]]],[11,"not","","",31,[[]]],[11,"not","","",26,[[]]],[11,"not","","",27,[[]]],[11,"not","thermite::backends::avx2","",32,[[]]],[11,"not","","",33,[[]]],[11,"not","","",34,[[]]],[11,"not","","",35,[[]]],[11,"not","thermite","",5,[[]]],[11,"not","","",6,[[]]],[11,"bitand","thermite::backends::avx1","",26,[[]]],[11,"bitand","","",27,[[]]],[11,"bitand","","",28,[[]]],[11,"bitand","","",29,[[]]],[11,"bitand","","",30,[[]]],[11,"bitand","","",31,[[]]],[11,"bitand","","",26,[[]]],[11,"bitand","","",27,[[]]],[11,"bitand","thermite::backends::avx2","",32,[[]]],[11,"bitand","","",33,[[]]],[11,"bitand","","",34,[[]]],[11,"bitand","","",35,[[]]],[11,"bitand","thermite","",5,[[]]],[11,"bitand","","",6,[[]]],[11,"bitor","thermite::backends::avx1","",26,[[]]],[11,"bitor","","",27,[[]]],[11,"bitor","","",28,[[]]],[11,"bitor","","",29,[[]]],[11,"bitor","","",30,[[]]],[11,"bitor","","",31,[[]]],[11,"bitor","","",26,[[]]],[11,"bitor","","",27,[[]]],[11,"bitor","thermite::backends::avx2","",32,[[]]],[11,"bitor","","",33,[[]]],[11,"bitor","","",34,[[]]],[11,"bitor","","",35,[[]]],[11,"bitor","thermite","",5,[[]]],[11,"bitor","","",6,[[]]],[11,"bitxor","thermite::backends::avx1","",26,[[]]],[11,"bitxor","","",27,[[]]],[11,"bitxor","","",28,[[]]],[11,"bitxor","","",29,[[]]],[11,"bitxor","","",30,[[]]],[11,"bitxor","","",31,[[]]],[11,"bitxor","","",26,[[]]],[11,"bitxor","","",27,[[]]],[11,"bitxor","thermite::backends::avx2","",32,[[]]],[11,"bitxor","","",33,[[]]],[11,"bitxor","","",34,[[]]],[11,"bitxor","","",35,[[]]],[11,"bitxor","thermite","",5,[[]]],[11,"bitxor","","",6,[[]]],[11,"shl","thermite::backends::avx1","",26,[[]]],[11,"shl","","",26,[[]]],[11,"shl","","",27,[[]]],[11,"shl","","",27,[[]]],[11,"shl","","",28,[[]]],[11,"shl","","",28,[[]]],[11,"shl","","",29,[[]]],[11,"shl","","",29,[[]]],[11,"shl","","",30,[[]]],[11,"shl","","",30,[[]]],[11,"shl","","",31,[[]]],[11,"shl","","",31,[[]]],[11,"shl","","",26,[[]]],[11,"shl","","",26,[[]]],[11,"shl","","",27,[[]]],[11,"shl","","",27,[[]]],[11,"shl","thermite::backends::avx2","",32,[[]]],[11,"shl","","",32,[[]]],[11,"shl","","",33,[[]]],[11,"shl","","",33,[[]]],[11,"shl","","",34,[[]]],[11,"shl","","",34,[[]]],[11,"shl","","",35,[[]]],[11,"shl","","",35,[[]]],[11,"shr","thermite::backends::avx1","",26,[[]]],[11,"shr","","",26,[[]]],[11,"shr","","",27,[[]]],[11,"shr","","",27,[[]]],[11,"shr","","",28,[[]]],[11,"shr","","",28,[[]]],[11,"shr","","",29,[[]]],[11,"shr","","",29,[[]]],[11,"shr","","",30,[[]]],[11,"shr","","",30,[[]]],[11,"shr","","",31,[[]]],[11,"shr","","",31,[[]]],[11,"shr","","",26,[[]]],[11,"shr","","",26,[[]]],[11,"shr","","",27,[[]]],[11,"shr","","",27,[[]]],[11,"shr","thermite::backends::avx2","",32,[[]]],[11,"shr","","",32,[[]]],[11,"shr","","",33,[[]]],[11,"shr","","",33,[[]]],[11,"shr","","",34,[[]]],[11,"shr","","",34,[[]]],[11,"shr","","",35,[[]]],[11,"shr","","",35,[[]]],[11,"bitand_assign","thermite::backends::avx1","",26,[[]]],[11,"bitand_assign","","",26,[[]]],[11,"bitand_assign","","",27,[[]]],[11,"bitand_assign","","",27,[[]]],[11,"bitand_assign","","",28,[[]]],[11,"bitand_assign","","",28,[[]]],[11,"bitand_assign","","",29,[[]]],[11,"bitand_assign","","",29,[[]]],[11,"bitand_assign","","",30,[[]]],[11,"bitand_assign","","",30,[[]]],[11,"bitand_assign","","",31,[[]]],[11,"bitand_assign","","",31,[[]]],[11,"bitand_assign","","",26,[[]]],[11,"bitand_assign","","",26,[[]]],[11,"bitand_assign","","",27,[[]]],[11,"bitand_assign","","",27,[[]]],[11,"bitand_assign","thermite::backends::avx2","",32,[[]]],[11,"bitand_assign","","",32,[[]]],[11,"bitand_assign","","",33,[[]]],[11,"bitand_assign","","",33,[[]]],[11,"bitand_assign","","",34,[[]]],[11,"bitand_assign","","",34,[[]]],[11,"bitand_assign","","",35,[[]]],[11,"bitand_assign","","",35,[[]]],[11,"bitand_assign","thermite","",5,[[]]],[11,"bitand_assign","","",6,[[]]],[11,"bitor_assign","thermite::backends::avx1","",26,[[]]],[11,"bitor_assign","","",26,[[]]],[11,"bitor_assign","","",27,[[]]],[11,"bitor_assign","","",27,[[]]],[11,"bitor_assign","","",28,[[]]],[11,"bitor_assign","","",28,[[]]],[11,"bitor_assign","","",29,[[]]],[11,"bitor_assign","","",29,[[]]],[11,"bitor_assign","","",30,[[]]],[11,"bitor_assign","","",30,[[]]],[11,"bitor_assign","","",31,[[]]],[11,"bitor_assign","","",31,[[]]],[11,"bitor_assign","","",26,[[]]],[11,"bitor_assign","","",26,[[]]],[11,"bitor_assign","","",27,[[]]],[11,"bitor_assign","","",27,[[]]],[11,"bitor_assign","thermite::backends::avx2","",32,[[]]],[11,"bitor_assign","","",32,[[]]],[11,"bitor_assign","","",33,[[]]],[11,"bitor_assign","","",33,[[]]],[11,"bitor_assign","","",34,[[]]],[11,"bitor_assign","","",34,[[]]],[11,"bitor_assign","","",35,[[]]],[11,"bitor_assign","","",35,[[]]],[11,"bitor_assign","thermite","",5,[[]]],[11,"bitor_assign","","",6,[[]]],[11,"bitxor_assign","thermite::backends::avx1","",26,[[]]],[11,"bitxor_assign","","",26,[[]]],[11,"bitxor_assign","","",27,[[]]],[11,"bitxor_assign","","",27,[[]]],[11,"bitxor_assign","","",28,[[]]],[11,"bitxor_assign","","",28,[[]]],[11,"bitxor_assign","","",29,[[]]],[11,"bitxor_assign","","",29,[[]]],[11,"bitxor_assign","","",30,[[]]],[11,"bitxor_assign","","",30,[[]]],[11,"bitxor_assign","","",31,[[]]],[11,"bitxor_assign","","",31,[[]]],[11,"bitxor_assign","","",26,[[]]],[11,"bitxor_assign","","",26,[[]]],[11,"bitxor_assign","","",27,[[]]],[11,"bitxor_assign","","",27,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",32,[[]]],[11,"bitxor_assign","","",32,[[]]],[11,"bitxor_assign","","",33,[[]]],[11,"bitxor_assign","","",33,[[]]],[11,"bitxor_assign","","",34,[[]]],[11,"bitxor_assign","","",34,[[]]],[11,"bitxor_assign","","",35,[[]]],[11,"bitxor_assign","","",35,[[]]],[11,"bitxor_assign","thermite","",5,[[]]],[11,"bitxor_assign","","",6,[[]]],[11,"shl_assign","thermite::backends::avx1","",26,[[]]],[11,"shl_assign","","",26,[[]]],[11,"shl_assign","","",27,[[]]],[11,"shl_assign","","",27,[[]]],[11,"shl_assign","","",28,[[]]],[11,"shl_assign","","",28,[[]]],[11,"shl_assign","","",29,[[]]],[11,"shl_assign","","",29,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",31,[[]]],[11,"shl_assign","","",31,[[]]],[11,"shl_assign","","",26,[[]]],[11,"shl_assign","","",26,[[]]],[11,"shl_assign","","",27,[[]]],[11,"shl_assign","","",27,[[]]],[11,"shl_assign","thermite::backends::avx2","",32,[[]]],[11,"shl_assign","","",32,[[]]],[11,"shl_assign","","",33,[[]]],[11,"shl_assign","","",33,[[]]],[11,"shl_assign","","",34,[[]]],[11,"shl_assign","","",34,[[]]],[11,"shl_assign","","",35,[[]]],[11,"shl_assign","","",35,[[]]],[11,"shr_assign","thermite::backends::avx1","",26,[[]]],[11,"shr_assign","","",26,[[]]],[11,"shr_assign","","",27,[[]]],[11,"shr_assign","","",27,[[]]],[11,"shr_assign","","",28,[[]]],[11,"shr_assign","","",28,[[]]],[11,"shr_assign","","",29,[[]]],[11,"shr_assign","","",29,[[]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",31,[[]]],[11,"shr_assign","","",31,[[]]],[11,"shr_assign","","",26,[[]]],[11,"shr_assign","","",26,[[]]],[11,"shr_assign","","",27,[[]]],[11,"shr_assign","","",27,[[]]],[11,"shr_assign","thermite::backends::avx2","",32,[[]]],[11,"shr_assign","","",32,[[]]],[11,"shr_assign","","",33,[[]]],[11,"shr_assign","","",33,[[]]],[11,"shr_assign","","",34,[[]]],[11,"shr_assign","","",34,[[]]],[11,"shr_assign","","",35,[[]]],[11,"shr_assign","","",35,[[]]],[11,"hash","thermite::backends::avx1","",25,[[]]],[11,"hash","thermite::backends::avx2","",36,[[]]],[11,"hash","thermite","",0,[[]]]],"p":[[4,"SimdInstructionSet"],[3,"SimdBuffer"],[3,"Divider"],[3,"BranchfreeDivider"],[3,"VPtr"],[3,"BitMask"],[3,"Mask"],[3,"Complex"],[8,"SimdVectorizedMath"],[3,"SplitMix64"],[8,"SimdRng"],[8,"SimdFromCast"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdShuffleIndices"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntoBits"],[8,"SimdFromBits"],[8,"SimdIntVector"],[8,"SimdUnsignedIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[8,"Simd"],[3,"AVX1"],[3,"f32x8"],[3,"f64x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"AVX2"],[3,"PCG32"],[3,"Xoshiro128Plus"],[3,"Xoshiro256Plus"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);