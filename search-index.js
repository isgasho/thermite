var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[3,"SimdBuffer","thermite","Aligned SIMD vector storage",null,null],[3,"VPtr","","",null,null],[3,"BitMask","","Small integer representation of a mask using individual bits",null,null],[3,"Mask","","",null,null],[4,"SimdInstructionSet","","",null,null],[13,"SSE2","","",0,null],[13,"SSE41","","",0,null],[13,"AVX","","",0,null],[13,"AVX2","","",0,null],[13,"AVX512F","","",0,null],[13,"AVX512FBW","","",0,null],[11,"alloc","","Allocates a new SIMD-aligned element buffer and zeroes the…",1,[[]]],[11,"gather_checked","","Gathers values from the buffer using more efficient…",1,[[]]],[11,"fill","","Fills the buffer with vectors using aligned stores",1,[[]]],[11,"len","","",1,[[]]],[11,"len_vectors","","",1,[[]]],[11,"as_slice","","",1,[[]]],[11,"as_vector_slice","","",1,[[]]],[11,"as_mut_slice","","",1,[[]]],[11,"as_mut_vector_slice","","",1,[[]]],[11,"load_vector","","",1,[[]]],[11,"store_vector","","",1,[[]]],[0,"backends","","",null,null],[0,"common","thermite::backends","",null,null],[5,"div_128_64_to_64","thermite::backends::common","",null,[[]]],[5,"div_64_32_to_32","","",null,[[]]],[5,"gen_u32","","",null,[[]]],[5,"gen_u64","","",null,[[]]],[0,"polyfills","thermite::backends","",null,null],[5,"_mm_shuffle","thermite::backends::polyfills","",null,[[]]],[5,"_mm256_shuffle","","",null,[[]]],[0,"avx1","thermite::backends","",null,null],[3,"AVX1","thermite::backends::avx1","",null,null],[3,"f32x8","","",null,null],[3,"f64x8","","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"i16x8","thermite::backends::avx2","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[3,"AVX2","","",null,null],[11,"splat","thermite","",2,[[]]],[11,"add","","",2,[[]]],[11,"is_null","","",2,[[],["mask",3]]],[11,"read","","",2,[[],["associatedvector",6]]],[11,"read_masked","","",2,[[["mask",3],["associatedvector",6]],["associatedvector",6]]],[11,"write","","",2,[[["associatedvector",6]]]],[11,"write_masked","","",2,[[["mask",3],["associatedvector",6]]]],[11,"truthy","","Create a bitmask for this vector type of all true bits",3,[[]]],[11,"falsey","","Create a bitmask with all false bits",3,[[]]],[11,"raw","","",3,[[]]],[11,"all","","Return true if all lanes for this vector type are set to…",3,[[]]],[11,"any","","Return true if any lane for this vector type is set to true",3,[[]]],[11,"none","","Return true if no lanes for this vector type are set to true",3,[[]]],[11,"count","","Count the number of set bits",3,[[]]],[11,"value","","",4,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",4,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",4,[[]]],[11,"from_value","","Creates a mask from a value. Any non-zero lanes are…",4,[[]]],[11,"cast_to","","",4,[[],[["simdfromcast",8],["mask",3]]]],[18,"FULL_BITMASK","","Bitmask indicating all truthy values for each lane",4,null],[11,"and_not","","Computes `!self & other` for each lane of the mask.",4,[[]]],[11,"bitmask","","Returns a bitmask that can be trivially evaluated to…",4,[[],["bitmask",3]]],[11,"from_bitmask","","Creates a wide SIMD mask from a single-bit bitmask",4,[[]]],[11,"all","","Returns `true` if all lanes are truthy",4,[[]]],[11,"any","","Returns `true` if any lanes are truthy",4,[[]]],[11,"none","","Returns `true` if all lanes are falsey",4,[[]]],[11,"count","","Counts the number of truthy lanes",4,[[]]],[11,"select","","For each lane, selects from `t` if the mask lane is…",4,[[]]],[0,"math","","",null,null],[0,"complex","thermite::math","Complex Number Vectors",null,null],[3,"Complex","thermite::math::complex","",null,null],[12,"re","","",5,null],[12,"im","","",5,null],[11,"new","","",5,[[]]],[11,"splat","","Creates a new Complex with all lanes of `re` and `im` set…",5,[[]]],[11,"real","","Create a new Complex",5,[[]]],[11,"i","","Returns imaginary unit",5,[[]]],[11,"one","","real(1)",5,[[]]],[11,"zero","","real(0)",5,[[]]],[11,"norm_sqr","","Returns the square of the norm",5,[[]]],[11,"norm","","Calculate |self|",5,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",5,[[]]],[11,"unscale","","Divides `self` by the scalar `t`.",5,[[]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",5,[[]]],[11,"inv","","Returns `1/self`",5,[[]]],[11,"mul_add","","",5,[[]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the [Manhattan…",5,[[]]],[11,"arg","","Calculate the principal Arg of self.",5,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",5,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",5,[[]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",5,[[]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",5,[[]]],[11,"sqrt","","",5,[[]]],[11,"cbrt","","",5,[[]]],[11,"powf","","Raises `self` to a floating point power.",5,[[]]],[11,"log","","Returns the logarithm of `self` with respect to an…",5,[[]]],[11,"powc","","Raises `self` to a complex power.",5,[[]]],[11,"expf","","Raises a floating point number to the complex power `self`.",5,[[]]],[11,"sin","","Computes the sine of `self`.",5,[[]]],[11,"cos","","Computes the cosine of `self`.",5,[[]]],[11,"tan","","Computes the tangent of `self`.",5,[[]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",5,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of…",5,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of…",5,[[]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",5,[[]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",5,[[]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",5,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",5,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",5,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",5,[[]]],[11,"finv","","Returns `1/self` using floating-point operations.",5,[[]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",5,[[]]],[0,"poly","thermite::math","Optimized fixed-degree polynomial evaluation",null,null],[5,"poly_1","thermite::math::poly","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_2","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_3","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_4","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_5","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_6","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_7","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_8","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_9","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_10","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_11","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_12","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_13","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_14","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_15","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[5,"poly_30","","",null,[[["simdfloatvector",8],["simd",8]],[["simdfloatvector",8],["simd",8]]]],[8,"SimdVectorizedMath","thermite::math","Set of vectorized special functions optimized for both…",null,null],[10,"scale","","Scales values between `in_min` and `in_max`, to between…",6,[[]]],[10,"lerp","","Linearly interpolates between `a` and `b` using `self`",6,[[]]],[10,"fmod","","Returns the floating-point remainder of `self / y`…",6,[[]]],[10,"hypot","","Computes `sqrt(x * x + y * y)` for each element of the…",6,[[]]],[10,"poly","","Computes the sum `Σ(coefficients[i] * x^i)` from `i=0` to…",6,[[]]],[10,"poly_f","","Computes the sum `Σ(f(i)*x^i)` from `i=0` to `n`",6,[[]]],[10,"sin","","Computes the sine of a vector.",6,[[]]],[10,"cos","","Computes the cosine of a vector.",6,[[]]],[10,"tan","","Computes the tangent of a vector.",6,[[]]],[10,"sin_cos","","Computes both the sine and cosine of a vector together…",6,[[]]],[10,"sinh","","Computes the hyperbolic-sine of a vector.",6,[[]]],[10,"cosh","","Computes the hyperbolic-cosine of a vector.",6,[[]]],[10,"tanh","","Computes the hyperbolic-tangent of a vector.",6,[[]]],[10,"asinh","","Computes the hyperbolic-arcsine of a vector.",6,[[]]],[10,"acosh","","Computes the hyperbolic-arccosine of a vector.",6,[[]]],[10,"atanh","","Computes the hyperbolic-arctangent of a vector.",6,[[]]],[10,"asin","","Computes the arcsine of a vector.",6,[[]]],[10,"acos","","Computes the arccosine of a vector.",6,[[]]],[10,"atan","","Computes the arctangent of a vector.",6,[[]]],[10,"atan2","","Computes the four quadrant arc-tangent of `y`(`self`) and…",6,[[]]],[10,"exp","","The exponential function, returns `e^(self)`",6,[[]]],[10,"exph","","Half-exponential function, returns `0.5 * e^(self)`",6,[[]]],[10,"exp2","","Binary exponential function, returns `2^(self)`",6,[[]]],[10,"exp10","","Base-10 exponential function, returns `10^(self)`",6,[[]]],[10,"exp_m1","","Exponential function minus one, `e^(self) - 1.0`, special…",6,[[]]],[10,"cbrt","","Computes the cubic-root of each lane in a vector.",6,[[]]],[10,"powf","","Computes `x^e` where `x` is `self` and `e` is a vector of…",6,[[]]],[10,"powiv","","Computes `x^e` where `x` is `self` and `e` is a vector of…",6,[[]]],[10,"powi","","Computes `x^e` where `x` is `self` and `e` is a signed…",6,[[]]],[10,"ln","","Computes the natural logarithm of a vector.",6,[[]]],[10,"ln_1p","","Computes `ln(1+x)` where `x` is `self`, more accurately…",6,[[]]],[10,"log2","","Computes the base-2 logarithm of a vector",6,[[]]],[10,"log10","","Computes the base-10 logarithm of a vector",6,[[]]],[10,"erf","","Computes the error function for each value in a vector",6,[[]]],[10,"erfinv","","Computes the inverse error function for each value in a…",6,[[]]],[10,"tgamma","","",6,[[]]],[10,"next_float","","Finds the next representable float moving upwards to…",6,[[]]],[10,"prev_float","","Finds the previous representable float moving downwards to…",6,[[]]],[10,"smoothstep","","Calculates a sigmoid-like 3rd-order interpolation function.",6,[[]]],[10,"smootherstep","","Calculates a sigmoid-like 5th-order interpolation function.",6,[[]]],[10,"smootheststep","","Calculates a signmoid-like 7th-order interpolation function.",6,[[]]],[10,"hermite","","Computes the n-th degree physicists\' Hermite polynomial…",6,[[]]],[10,"hermitev","","Computes the n-th degree physicists\' Hermite polynomial…",6,[[]]],[10,"jacobi","","Computes the n-th degree Jacobi polynomial via the 3-term…",6,[[]]],[10,"jacobi_d","","Computes the m-th derivative of an n-th degree Jacobi…",6,[[]]],[10,"legendre_p","","Computes the m-th associated n-th degree Legendre…",6,[[]]],[6,"AssociatedVector","thermite","Associated vector type for a scalar type",null,null],[6,"Vi32","","",null,null],[6,"Vi64","","",null,null],[6,"Vu32","","",null,null],[6,"Vu64","","",null,null],[6,"Vf32","","",null,null],[6,"Vf64","","",null,null],[6,"Vusize","","",null,null],[6,"Visize","","",null,null],[8,"SimdFromCast","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","Casts one vector to another, performing proper numeric…",7,[[]]],[10,"from_cast_mask","","Casts one mask to another, not caring about the value…",7,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","Casts one vector to another, performing proper numeric…",8,[[]]],[10,"cast_mask","","Casts one mask to another, not caring about the value…",8,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction set",null,null],[11,"cast_to","","",9,[[],["simdfromcast",8]]],[8,"SimdElement","","Umbrella trait for SIMD vector element bounds",null,null],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",10,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",10,null],[18,"NUM_ELEMENTS","","",10,null],[18,"ALIGNMENT","","",10,null],[10,"splat","","Creates a new vector with all lanes set to the given value",10,[[]]],[11,"undefined","","Returns a vector containing possibly undefined or…",10,[[]]],[11,"splat_any","","Same as `splat`, but is more convenient for initializing…",10,[[]]],[11,"alloc","","",10,[[],["simdbuffer",3]]],[11,"extract","","Extracts an element at the given lane index.",10,[[]]],[11,"replace","","Returns a new vector with the given value at the given…",10,[[]]],[10,"extract_unchecked","","Extracts an element at the given lane index.",10,[[]]],[10,"replace_unchecked","","Returns a new vector with the given value at the given…",10,[[]]],[11,"load_aligned","","Loads a vector from a slice that has an alignment of at…",10,[[]]],[11,"load_unaligned","","Loads a vector from a slice",10,[[]]],[11,"store_aligned","","Stores a vector into a slice with an alignment of at least…",10,[[]]],[11,"store_unaligned","","Stores a vector into a slice.",10,[[]]],[11,"load_aligned_unchecked","","Loads a vector from the given aligned address.",10,[[]]],[11,"store_aligned_unchecked","","Stores a vector to the given aligned address.",10,[[]]],[11,"load_unaligned_unchecked","","Loads a vector from a given address (does not have to be…",10,[[]]],[11,"store_unaligned_unchecked","","Stores a vector to a given address (does not have to be…",10,[[]]],[11,"gather","","Loads values from arbitrary addresses in memory based on…",10,[[]]],[11,"scatter","","Stores values to arbitrary addresses in memory based on…",10,[[]]],[11,"gather_masked","","Like `Self::gather`, but individual lanes are loaded based…",10,[[["mask",3]]]],[11,"scatter_masked","","Like `self.scatter()`, but individual lanes are stored…",10,[[["mask",3]]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes `!self & other`, may be more performant than the…",11,[[]]],[18,"FULL_BITMASK","","Bitmask corresponding to all lanes of the mask being truthy.",11,null],[10,"bitmask","","Returns an integer where each bit corresponds to the…",11,[[]]],[8,"SimdVector","","Defines common operations on numeric vectors",null,null],[10,"zero","","",12,[[]]],[10,"one","","",12,[[]]],[10,"index","","Returns a vector where the first lane is zero, and each…",12,[[]]],[10,"min_value","","Maximum representable valid value",12,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",12,[[]]],[11,"min","","Per-lane, select the minimum value",12,[[]]],[11,"max","","Per-lane, select the maximum value",12,[[]]],[10,"min_element","","Find the minimum value across all lanes",12,[[]]],[10,"max_element","","Find the maximum value across all lanes",12,[[]]],[10,"eq","","",12,[[],["mask",3]]],[10,"gt","","",12,[[],["mask",3]]],[11,"ne","","",12,[[],["mask",3]]],[11,"lt","","",12,[[],["mask",3]]],[11,"le","","",12,[[],["mask",3]]],[11,"ge","","",12,[[],["mask",3]]],[8,"SimdIntoBits","","Transmutations into raw bits",null,null],[11,"into_bits","","",13,[[]]],[8,"SimdFromBits","","Transmutations from raw bits",null,null],[11,"from_bits","","",14,[[]]],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[10,"saturating_add","","Saturating addition, will not wrap",15,[[]]],[10,"saturating_sub","","Saturating subtraction, will not wrap",15,[[]]],[10,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t…",15,[[]]],[10,"wrapping_product","","Multiply all lanes together, wrapping the result if it…",15,[[]]],[11,"div_const","","For some vectors, this can provide a significant speedup…",15,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",16,[[]]],[10,"min_positive","","Minimum positive number",16,[[]]],[11,"abs","","Absolute value",16,[[]]],[11,"copysign","","Copies the sign from `sign` to `self`",16,[[]]],[11,"signum","","Returns `-1` if less than zero, `+1` otherwise.",16,[[]]],[11,"is_positive","","Test if positive, greater or equal to zero",16,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",16,[[],["mask",3]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[16,"Vi","","",17,null],[16,"Vu","","",17,null],[10,"epsilon","","",17,[[]]],[10,"infinity","","",17,[[]]],[10,"neg_infinity","","",17,[[]]],[10,"neg_zero","","",17,[[]]],[10,"nan","","",17,[[]]],[11,"load_f16_unaligned","","Load half-precision floats and up-convert them into `Self`",17,[[]]],[11,"store_f16_unaligned","","Down-convert `self` into half-precision and store",17,[[]]],[10,"load_f16_unaligned_unchecked","","",17,[[]]],[10,"store_f16_unaligned_unchecked","","",17,[[]]],[10,"to_int_fast","","Can convert to a signed integer faster than a regular…",17,[[]]],[10,"to_uint_fast","","Can convert to a signed integer faster than a regular…",17,[[]]],[11,"combine_sign","","Same as `self * sign.signum()` or `select(sign_bit(sign),…",17,[[]]],[10,"sum","","Compute the horizontal sum of all elements",17,[[]]],[10,"product","","Compute the horizontal product of all elements",17,[[]]],[10,"mul_add","","Fused multiply-add",17,[[]]],[11,"mul_sub","","Fused multiply-subtract",17,[[]]],[11,"nmul_add","","Fused negated multiply-add",17,[[]]],[11,"nmul_sub","","Fused negated multiply-subtract",17,[[]]],[10,"round","","",17,[[]]],[10,"ceil","","",17,[[]]],[10,"floor","","",17,[[]]],[10,"trunc","","",17,[[]]],[11,"fract","","",17,[[]]],[10,"sqrt","","",17,[[]]],[11,"rsqrt","","Compute the approximate reciprocal of the square root `(1…",17,[[]]],[11,"rsqrt_precise","","A more precise `1 / sqrt(x)` variation, which may use…",17,[[]]],[11,"recepr","","Computes the approximate reciprocal/inverse of each value",17,[[]]],[11,"approx_eq","","",17,[[],["mask",3]]],[11,"clamp","","",17,[[]]],[11,"saturate","","Clamps self to between 0 and 1",17,[[]]],[11,"is_finite","","",17,[[],["mask",3]]],[11,"is_infinite","","",17,[[],["mask",3]]],[11,"is_normal","","",17,[[],["mask",3]]],[10,"is_subnormal","","",17,[[],["mask",3]]],[11,"is_zero_or_subnormal","","",17,[[],["mask",3]]],[11,"is_nan","","",17,[[],["mask",3]]],[8,"SimdPointer","","Guarantees the vector can be used as a pointer in `VPtr`",null,null],[8,"Simd","","SIMD Instruction set, contains all types",null,null],[18,"INSTRSET","","",18,null],[16,"Vi32","","32-bit signed integer vector",18,null],[16,"Vi64","","64-bit signed integer vector",18,null],[16,"Vu32","","32-bit unsigned integer vector",18,null],[16,"Vu64","","64-bit unsigned integer vector",18,null],[16,"Vf32","","Single-precision 32-bit floating point vector",18,null],[16,"Vf64","","Double-precision 64-bit floating point vector",18,null],[16,"Vusize","","",18,null],[16,"Visize","","",18,null],[11,"from_cast","","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",2,[[]]],[11,"from_cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"cast","","",2,[[]]],[11,"cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from_cast","","",3,[[]]],[11,"from_cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"cast","","",3,[[]]],[11,"cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from_cast","","",4,[[]]],[11,"from_cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"cast","","",4,[[]]],[11,"cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx1","",19,[[]]],[11,"from_cast_mask","","",19,[[["mask",3]],["mask",3]]],[11,"cast","","",19,[[]]],[11,"cast_mask","","",19,[[["mask",3]],["mask",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"scale","","",20,[[]]],[11,"lerp","","",20,[[]]],[11,"fmod","","",20,[[]]],[11,"hypot","","",20,[[]]],[11,"powi","","",20,[[]]],[11,"powiv","","",20,[[]]],[11,"poly_f","","",20,[[]]],[11,"poly","","",20,[[]]],[11,"hermite","","",20,[[]]],[11,"hermitev","","",20,[[]]],[11,"jacobi","","",20,[[]]],[11,"jacobi_d","","",20,[[]]],[11,"legendre_p","","",20,[[]]],[11,"sin","","",20,[[]]],[11,"cos","","",20,[[]]],[11,"tan","","",20,[[]]],[11,"sin_cos","","",20,[[]]],[11,"sinh","","",20,[[]]],[11,"cosh","","",20,[[]]],[11,"tanh","","",20,[[]]],[11,"asinh","","",20,[[]]],[11,"acosh","","",20,[[]]],[11,"atanh","","",20,[[]]],[11,"asin","","",20,[[]]],[11,"acos","","",20,[[]]],[11,"atan","","",20,[[]]],[11,"atan2","","",20,[[]]],[11,"exp","","",20,[[]]],[11,"exph","","",20,[[]]],[11,"exp2","","",20,[[]]],[11,"exp10","","",20,[[]]],[11,"exp_m1","","",20,[[]]],[11,"cbrt","","",20,[[]]],[11,"powf","","",20,[[]]],[11,"ln","","",20,[[]]],[11,"ln_1p","","",20,[[]]],[11,"log2","","",20,[[]]],[11,"log10","","",20,[[]]],[11,"erf","","",20,[[]]],[11,"erfinv","","",20,[[]]],[11,"tgamma","","",20,[[]]],[11,"next_float","","",20,[[]]],[11,"prev_float","","",20,[[]]],[11,"smoothstep","","",20,[[]]],[11,"smootherstep","","",20,[[]]],[11,"smootheststep","","",20,[[]]],[11,"from_cast","","",20,[[]]],[11,"from_cast_mask","","",20,[[["mask",3]],["mask",3]]],[11,"cast","","",20,[[]]],[11,"cast_mask","","",20,[[["mask",3]],["mask",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"scale","","",21,[[]]],[11,"lerp","","",21,[[]]],[11,"fmod","","",21,[[]]],[11,"hypot","","",21,[[]]],[11,"powi","","",21,[[]]],[11,"powiv","","",21,[[]]],[11,"poly_f","","",21,[[]]],[11,"poly","","",21,[[]]],[11,"hermite","","",21,[[]]],[11,"hermitev","","",21,[[]]],[11,"jacobi","","",21,[[]]],[11,"jacobi_d","","",21,[[]]],[11,"legendre_p","","",21,[[]]],[11,"sin","","",21,[[]]],[11,"cos","","",21,[[]]],[11,"tan","","",21,[[]]],[11,"sin_cos","","",21,[[]]],[11,"sinh","","",21,[[]]],[11,"cosh","","",21,[[]]],[11,"tanh","","",21,[[]]],[11,"asinh","","",21,[[]]],[11,"acosh","","",21,[[]]],[11,"atanh","","",21,[[]]],[11,"asin","","",21,[[]]],[11,"acos","","",21,[[]]],[11,"atan","","",21,[[]]],[11,"atan2","","",21,[[]]],[11,"exp","","",21,[[]]],[11,"exph","","",21,[[]]],[11,"exp2","","",21,[[]]],[11,"exp10","","",21,[[]]],[11,"exp_m1","","",21,[[]]],[11,"cbrt","","",21,[[]]],[11,"powf","","",21,[[]]],[11,"ln","","",21,[[]]],[11,"ln_1p","","",21,[[]]],[11,"log2","","",21,[[]]],[11,"log10","","",21,[[]]],[11,"erf","","",21,[[]]],[11,"erfinv","","",21,[[]]],[11,"tgamma","","",21,[[]]],[11,"next_float","","",21,[[]]],[11,"prev_float","","",21,[[]]],[11,"smoothstep","","",21,[[]]],[11,"smootherstep","","",21,[[]]],[11,"smootheststep","","",21,[[]]],[11,"from_cast","","",21,[[]]],[11,"from_cast_mask","","",21,[[["mask",3]],["mask",3]]],[11,"cast","","",21,[[]]],[11,"cast_mask","","",21,[[["mask",3]],["mask",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from_cast","","",22,[[]]],[11,"from_cast_mask","","",22,[[["mask",3]],["mask",3]]],[11,"cast","","",22,[[]]],[11,"cast_mask","","",22,[[["mask",3]],["mask",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from_cast","","",23,[[]]],[11,"from_cast_mask","","",23,[[["mask",3]],["mask",3]]],[11,"cast","","",23,[[]]],[11,"cast_mask","","",23,[[["mask",3]],["mask",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from_cast","","",24,[[]]],[11,"from_cast_mask","","",24,[[["mask",3]],["mask",3]]],[11,"cast","","",24,[[]]],[11,"cast_mask","","",24,[[["mask",3]],["mask",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from_cast","","",25,[[]]],[11,"from_cast_mask","","",25,[[["mask",3]],["mask",3]]],[11,"cast","","",25,[[]]],[11,"cast_mask","","",25,[[["mask",3]],["mask",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx2","",26,[[]]],[11,"from_cast_mask","","",26,[[["mask",3]],["mask",3]]],[11,"cast","","",26,[[]]],[11,"cast_mask","","",26,[[["mask",3]],["mask",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from_cast","","",27,[[]]],[11,"from_cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"cast","","",27,[[]]],[11,"cast_mask","","",27,[[["mask",3]],["mask",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from_cast","","",28,[[]]],[11,"from_cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"cast","","",28,[[]]],[11,"cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from_cast","","",29,[[]]],[11,"from_cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"cast","","",29,[[]]],[11,"cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from_cast","","",30,[[]]],[11,"from_cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"cast","","",30,[[]]],[11,"cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from_cast","","",31,[[]]],[11,"from_cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"cast","","",31,[[]]],[11,"cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from_cast","thermite::math::complex","",5,[[]]],[11,"from_cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"cast","","",5,[[]]],[11,"cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from_cast","thermite::backends::avx1","",20,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",20,[[["i32x8",3],["avx1",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",20,[[["avx1",3],["u32x8",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["avx1",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",20,[[["avx1",3],["u64x8",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["avx1",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",20,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",20,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",20,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["avx1",3],["i64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",21,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",21,[[["i32x8",3],["avx1",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",21,[[["avx1",3],["u32x8",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["avx1",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",21,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["avx1",3],["f32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",21,[[["avx1",3],["u64x8",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["avx1",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",21,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["avx1",3],["i64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",22,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["avx1",3],["f32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",22,[[["avx1",3],["u32x8",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["avx1",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",22,[[["avx1",3],["u64x8",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["avx1",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",22,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",22,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",22,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",22,[[["mask",3],["avx1",3],["i64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",23,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["avx1",3],["f32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",23,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",23,[[["i32x8",3],["avx1",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",23,[[["avx1",3],["u32x8",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["avx1",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",23,[[["avx1",3],["u64x8",3]]]],[11,"from_cast_mask","","",23,[[["mask",3],["avx1",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",23,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",23,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",24,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",24,[[["i32x8",3],["avx1",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",24,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["avx1",3],["f32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",24,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",24,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",24,[[["avx1",3],["u64x8",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["avx1",3],["u64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",24,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",24,[[["mask",3],["avx1",3],["i64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",25,[[["avx1",3],["u32x8",3]]]],[11,"from_cast_mask","","",25,[[["mask",3],["avx1",3],["u32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",25,[[["f32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",25,[[["mask",3],["avx1",3],["f32x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",25,[[["i32x8",3],["avx1",3]]]],[11,"from_cast_mask","","",25,[[["i32x8",3],["avx1",3],["mask",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",25,[[["f64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",25,[[["f64x8",3],["mask",3],["avx1",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",25,[[["i64x8",3],["avx1",3]]]],[11,"from_cast_mask","","",25,[[["mask",3],["avx1",3],["i64x8",3]],[["mask",3],["avx1",3]]]],[11,"from_cast","","",20,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",20,[[["i32x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",20,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["avx2",3],["u32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",20,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",20,[[["u64x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",20,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["f64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",20,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",20,[[["mask",3],["i64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",21,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["i32x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",21,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["avx2",3],["u32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",21,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["f32x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",21,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["u64x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",21,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",21,[[["mask",3],["i64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","thermite::backends::avx2","",27,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["f32x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",27,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["avx2",3],["u32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",27,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["u64x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",27,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["f64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",27,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",27,[[["mask",3],["i64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",28,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",28,[[["mask",3],["f32x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",28,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",28,[[["i32x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",28,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",28,[[["mask",3],["avx2",3],["u32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",28,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",28,[[["u64x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",28,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",28,[[["mask",3],["f64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",29,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",29,[[["i32x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",29,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",29,[[["mask",3],["f32x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",29,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",29,[[["mask",3],["f64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",29,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",29,[[["u64x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",29,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",29,[[["mask",3],["i64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",30,[[["u32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",30,[[["mask",3],["avx2",3],["u32x8",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",30,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",30,[[["mask",3],["f32x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",30,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",30,[[["i32x8",3],["mask",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",30,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",30,[[["mask",3],["f64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"from_cast","","",30,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",30,[[["mask",3],["i64x8",3],["avx2",3]],[["avx2",3],["mask",3]]]],[11,"splat","thermite::backends::avx1","",20,[[]]],[11,"undefined","","",20,[[]]],[11,"load_aligned_unchecked","","",20,[[]]],[11,"load_unaligned_unchecked","","",20,[[]]],[11,"store_aligned_unchecked","","",20,[[]]],[11,"store_unaligned_unchecked","","",20,[[]]],[11,"extract_unchecked","","",20,[[]]],[11,"replace_unchecked","","",20,[[]]],[11,"splat","","",21,[[]]],[11,"undefined","","",21,[[]]],[11,"load_aligned_unchecked","","",21,[[]]],[11,"store_aligned_unchecked","","",21,[[]]],[11,"extract_unchecked","","",21,[[]]],[11,"replace_unchecked","","",21,[[]]],[11,"splat","","",22,[[]]],[11,"undefined","","",22,[[]]],[11,"load_aligned_unchecked","","",22,[[]]],[11,"load_unaligned_unchecked","","",22,[[]]],[11,"store_aligned_unchecked","","",22,[[]]],[11,"store_unaligned_unchecked","","",22,[[]]],[11,"extract_unchecked","","",22,[[]]],[11,"replace_unchecked","","",22,[[]]],[11,"splat","","",23,[[]]],[11,"undefined","","",23,[[]]],[11,"load_aligned_unchecked","","",23,[[]]],[11,"store_aligned_unchecked","","",23,[[]]],[11,"extract_unchecked","","",23,[[]]],[11,"replace_unchecked","","",23,[[]]],[11,"splat","","",24,[[]]],[11,"undefined","","",24,[[]]],[11,"load_aligned_unchecked","","",24,[[]]],[11,"load_unaligned_unchecked","","",24,[[]]],[11,"store_aligned_unchecked","","",24,[[]]],[11,"store_unaligned_unchecked","","",24,[[]]],[11,"extract_unchecked","","",24,[[]]],[11,"replace_unchecked","","",24,[[]]],[11,"splat","","",25,[[]]],[11,"undefined","","",25,[[]]],[11,"load_aligned_unchecked","","",25,[[]]],[11,"store_aligned_unchecked","","",25,[[]]],[11,"extract_unchecked","","",25,[[]]],[11,"replace_unchecked","","",25,[[]]],[11,"splat","","",20,[[]]],[11,"undefined","","",20,[[]]],[11,"load_aligned_unchecked","","",20,[[]]],[11,"load_unaligned_unchecked","","",20,[[]]],[11,"store_aligned_unchecked","","",20,[[]]],[11,"store_unaligned_unchecked","","",20,[[]]],[11,"extract_unchecked","","",20,[[]]],[11,"replace_unchecked","","",20,[[]]],[11,"gather","","",20,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",20,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",21,[[]]],[11,"undefined","","",21,[[]]],[11,"load_aligned_unchecked","","",21,[[]]],[11,"store_aligned_unchecked","","",21,[[]]],[11,"extract_unchecked","","",21,[[]]],[11,"replace_unchecked","","",21,[[]]],[11,"gather","","",21,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",21,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","thermite::backends::avx2","",26,[[]]],[11,"undefined","","",26,[[]]],[11,"load_aligned_unchecked","","",26,[[]]],[11,"load_unaligned_unchecked","","",26,[[]]],[11,"store_aligned_unchecked","","",26,[[]]],[11,"store_unaligned_unchecked","","",26,[[]]],[11,"extract_unchecked","","",26,[[]]],[11,"replace_unchecked","","",26,[[]]],[11,"splat","","",27,[[]]],[11,"undefined","","",27,[[]]],[11,"load_aligned_unchecked","","",27,[[]]],[11,"load_unaligned_unchecked","","",27,[[]]],[11,"store_aligned_unchecked","","",27,[[]]],[11,"store_unaligned_unchecked","","",27,[[]]],[11,"extract_unchecked","","",27,[[]]],[11,"replace_unchecked","","",27,[[]]],[11,"gather","","",27,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",27,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",28,[[]]],[11,"undefined","","",28,[[]]],[11,"load_aligned_unchecked","","",28,[[]]],[11,"store_aligned_unchecked","","",28,[[]]],[11,"extract_unchecked","","",28,[[]]],[11,"replace_unchecked","","",28,[[]]],[11,"gather","","",28,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",28,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",29,[[]]],[11,"undefined","","",29,[[]]],[11,"load_aligned_unchecked","","",29,[[]]],[11,"load_unaligned_unchecked","","",29,[[]]],[11,"store_aligned_unchecked","","",29,[[]]],[11,"store_unaligned_unchecked","","",29,[[]]],[11,"extract_unchecked","","",29,[[]]],[11,"replace_unchecked","","",29,[[]]],[11,"gather","","",29,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",29,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","","",30,[[]]],[11,"undefined","","",30,[[]]],[11,"load_aligned_unchecked","","",30,[[]]],[11,"store_aligned_unchecked","","",30,[[]]],[11,"extract_unchecked","","",30,[[]]],[11,"replace_unchecked","","",30,[[]]],[11,"gather","","",30,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked","","",30,[[["i32x8",3],["mask",3],["avx2",3]]]],[11,"splat","thermite","",4,[[]]],[11,"load_aligned_unchecked","","",4,[[]]],[11,"store_aligned_unchecked","","",4,[[]]],[11,"load_unaligned_unchecked","","",4,[[]]],[11,"store_unaligned_unchecked","","",4,[[]]],[11,"extract_unchecked","","",4,[[]]],[11,"replace_unchecked","","",4,[[]]],[11,"and_not","thermite::backends::avx1","",20,[[]]],[11,"bitmask","","",20,[[]]],[11,"_mm_not","","",20,[[]]],[11,"_mm_bitand","","",20,[[]]],[11,"_mm_bitor","","",20,[[]]],[11,"_mm_bitxor","","",20,[[]]],[11,"_mm_shr","","",20,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",20,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",20,[[]]],[11,"_mm_shri","","",20,[[]]],[11,"and_not","","",21,[[]]],[11,"bitmask","","",21,[[]]],[11,"_mm_not","","",21,[[]]],[11,"_mm_bitand","","",21,[[]]],[11,"_mm_bitor","","",21,[[]]],[11,"_mm_bitxor","","",21,[[]]],[11,"_mm_shr","","",21,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",21,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",21,[[]]],[11,"_mm_shri","","",21,[[]]],[11,"and_not","","",22,[[]]],[11,"bitmask","","",22,[[]]],[11,"_mm_not","","",22,[[]]],[11,"_mm_bitand","","",22,[[]]],[11,"_mm_bitor","","",22,[[]]],[11,"_mm_bitxor","","",22,[[]]],[11,"_mm_shr","","",22,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",22,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",22,[[]]],[11,"_mm_shri","","",22,[[]]],[11,"and_not","","",23,[[]]],[11,"bitmask","","",23,[[]]],[11,"_mm_not","","",23,[[]]],[11,"_mm_bitand","","",23,[[]]],[11,"_mm_bitor","","",23,[[]]],[11,"_mm_bitxor","","",23,[[]]],[11,"_mm_shr","","",23,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",23,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",23,[[]]],[11,"_mm_shri","","",23,[[]]],[11,"and_not","","",24,[[]]],[11,"bitmask","","",24,[[]]],[11,"_mm_not","","",24,[[]]],[11,"_mm_bitand","","",24,[[]]],[11,"_mm_bitor","","",24,[[]]],[11,"_mm_bitxor","","",24,[[]]],[11,"_mm_shr","","",24,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",24,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",24,[[]]],[11,"_mm_shri","","",24,[[]]],[11,"and_not","","",25,[[]]],[11,"bitmask","","",25,[[]]],[11,"_mm_not","","",25,[[]]],[11,"_mm_bitand","","",25,[[]]],[11,"_mm_bitor","","",25,[[]]],[11,"_mm_bitxor","","",25,[[]]],[11,"_mm_shr","","",25,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shl","","",25,[[["avx1",3],["u32x8",3]]]],[11,"_mm_shli","","",25,[[]]],[11,"_mm_shri","","",25,[[]]],[11,"and_not","","",20,[[]]],[11,"bitmask","","",20,[[]]],[11,"_mm_not","","",20,[[]]],[11,"_mm_bitand","","",20,[[]]],[11,"_mm_bitor","","",20,[[]]],[11,"_mm_bitxor","","",20,[[]]],[11,"_mm_shr","","",20,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",20,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",20,[[]]],[11,"_mm_shri","","",20,[[]]],[11,"and_not","","",21,[[]]],[11,"bitmask","","",21,[[]]],[11,"_mm_not","","",21,[[]]],[11,"_mm_bitand","","",21,[[]]],[11,"_mm_bitor","","",21,[[]]],[11,"_mm_bitxor","","",21,[[]]],[11,"_mm_shr","","",21,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",21,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",21,[[]]],[11,"_mm_shri","","",21,[[]]],[11,"and_not","thermite::backends::avx2","",27,[[]]],[11,"bitmask","","",27,[[]]],[11,"_mm_not","","",27,[[]]],[11,"_mm_bitand","","",27,[[]]],[11,"_mm_bitor","","",27,[[]]],[11,"_mm_bitxor","","",27,[[]]],[11,"_mm_shr","","",27,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",27,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",27,[[]]],[11,"_mm_shri","","",27,[[]]],[11,"and_not","","",28,[[]]],[11,"bitmask","","",28,[[]]],[11,"_mm_not","","",28,[[]]],[11,"_mm_bitand","","",28,[[]]],[11,"_mm_bitor","","",28,[[]]],[11,"_mm_bitxor","","",28,[[]]],[11,"_mm_shr","","",28,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",28,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",28,[[]]],[11,"_mm_shri","","",28,[[]]],[11,"and_not","","",29,[[]]],[11,"bitmask","","",29,[[]]],[11,"_mm_not","","",29,[[]]],[11,"_mm_bitand","","",29,[[]]],[11,"_mm_bitor","","",29,[[]]],[11,"_mm_bitxor","","",29,[[]]],[11,"_mm_shr","","",29,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",29,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",29,[[]]],[11,"_mm_shri","","",29,[[]]],[11,"and_not","","",30,[[]]],[11,"bitmask","","",30,[[]]],[11,"_mm_not","","",30,[[]]],[11,"_mm_bitand","","",30,[[]]],[11,"_mm_bitor","","",30,[[]]],[11,"_mm_bitxor","","",30,[[]]],[11,"_mm_shr","","",30,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shl","","",30,[[["u32x8",3],["avx2",3]]]],[11,"_mm_shli","","",30,[[]]],[11,"_mm_shri","","",30,[[]]],[11,"zero","thermite::backends::avx1","",20,[[]]],[11,"one","","",20,[[]]],[11,"index","","",20,[[]]],[11,"min_value","","",20,[[]]],[11,"max_value","","",20,[[]]],[11,"min","","",20,[[]]],[11,"max","","",20,[[]]],[11,"min_element","","",20,[[]]],[11,"max_element","","",20,[[]]],[11,"eq","","",20,[[],[["mask",3],["avx1",3]]]],[11,"ne","","",20,[[],[["mask",3],["avx1",3]]]],[11,"lt","","",20,[[],[["mask",3],["avx1",3]]]],[11,"le","","",20,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",20,[[],[["mask",3],["avx1",3]]]],[11,"ge","","",20,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",20,[[]]],[11,"_mm_sub","","",20,[[]]],[11,"_mm_mul","","",20,[[]]],[11,"_mm_div","","",20,[[]]],[11,"_mm_rem","","",20,[[]]],[11,"zero","","",21,[[]]],[11,"one","","",21,[[]]],[11,"index","","",21,[[]]],[11,"min_value","","",21,[[]]],[11,"max_value","","",21,[[]]],[11,"min","","",21,[[]]],[11,"max","","",21,[[]]],[11,"min_element","","",21,[[]]],[11,"max_element","","",21,[[]]],[11,"eq","","",21,[[],[["mask",3],["avx1",3]]]],[11,"ne","","",21,[[],[["mask",3],["avx1",3]]]],[11,"lt","","",21,[[],[["mask",3],["avx1",3]]]],[11,"le","","",21,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",21,[[],[["mask",3],["avx1",3]]]],[11,"ge","","",21,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",21,[[]]],[11,"_mm_sub","","",21,[[]]],[11,"_mm_mul","","",21,[[]]],[11,"_mm_div","","",21,[[]]],[11,"_mm_rem","","",21,[[]]],[11,"zero","","",22,[[]]],[11,"one","","",22,[[]]],[11,"index","","",22,[[]]],[11,"min","","",22,[[]]],[11,"max","","",22,[[]]],[11,"min_value","","",22,[[]]],[11,"max_value","","",22,[[]]],[11,"min_element","","",22,[[]]],[11,"max_element","","",22,[[]]],[11,"eq","","",22,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",22,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",22,[[]]],[11,"_mm_sub","","",22,[[]]],[11,"_mm_mul","","",22,[[]]],[11,"_mm_div","","",22,[[]]],[11,"_mm_rem","","",22,[[]]],[11,"zero","","",23,[[]]],[11,"one","","",23,[[]]],[11,"index","","",23,[[]]],[11,"min_value","","",23,[[]]],[11,"max_value","","",23,[[]]],[11,"min_element","","",23,[[]]],[11,"max_element","","",23,[[]]],[11,"eq","","",23,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",23,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",23,[[]]],[11,"_mm_sub","","",23,[[]]],[11,"_mm_mul","","",23,[[]]],[11,"_mm_div","","",23,[[]]],[11,"_mm_rem","","",23,[[]]],[11,"zero","","",24,[[]]],[11,"one","","",24,[[]]],[11,"index","","",24,[[]]],[11,"min","","",24,[[]]],[11,"max","","",24,[[]]],[11,"min_value","","",24,[[]]],[11,"max_value","","",24,[[]]],[11,"min_element","","",24,[[]]],[11,"max_element","","",24,[[]]],[11,"eq","","",24,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",24,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",24,[[]]],[11,"_mm_sub","","",24,[[]]],[11,"_mm_mul","","",24,[[]]],[11,"_mm_div","","",24,[[]]],[11,"_mm_rem","","",24,[[]]],[11,"zero","","",25,[[]]],[11,"one","","",25,[[]]],[11,"index","","",25,[[]]],[11,"min_value","","",25,[[]]],[11,"max_value","","",25,[[]]],[11,"min_element","","",25,[[]]],[11,"max_element","","",25,[[]]],[11,"eq","","",25,[[],[["mask",3],["avx1",3]]]],[11,"gt","","",25,[[],[["mask",3],["avx1",3]]]],[11,"_mm_add","","",25,[[]]],[11,"_mm_sub","","",25,[[]]],[11,"_mm_mul","","",25,[[]]],[11,"_mm_div","","",25,[[]]],[11,"_mm_rem","","",25,[[]]],[11,"zero","","",20,[[]]],[11,"one","","",20,[[]]],[11,"index","","",20,[[]]],[11,"min_value","","",20,[[]]],[11,"max_value","","",20,[[]]],[11,"min","","",20,[[]]],[11,"max","","",20,[[]]],[11,"min_element","","",20,[[]]],[11,"max_element","","",20,[[]]],[11,"eq","","",20,[[],[["avx2",3],["mask",3]]]],[11,"ne","","",20,[[],[["avx2",3],["mask",3]]]],[11,"lt","","",20,[[],[["avx2",3],["mask",3]]]],[11,"le","","",20,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",20,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",20,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",20,[[]]],[11,"_mm_sub","","",20,[[]]],[11,"_mm_mul","","",20,[[]]],[11,"_mm_div","","",20,[[]]],[11,"_mm_rem","","",20,[[]]],[11,"zero","","",21,[[]]],[11,"one","","",21,[[]]],[11,"index","","",21,[[]]],[11,"min_value","","",21,[[]]],[11,"max_value","","",21,[[]]],[11,"min","","",21,[[]]],[11,"max","","",21,[[]]],[11,"min_element","","",21,[[]]],[11,"max_element","","",21,[[]]],[11,"eq","","",21,[[],[["avx2",3],["mask",3]]]],[11,"ne","","",21,[[],[["avx2",3],["mask",3]]]],[11,"lt","","",21,[[],[["avx2",3],["mask",3]]]],[11,"le","","",21,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",21,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",21,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",21,[[]]],[11,"_mm_sub","","",21,[[]]],[11,"_mm_mul","","",21,[[]]],[11,"_mm_div","","",21,[[]]],[11,"_mm_rem","","",21,[[]]],[11,"zero","thermite::backends::avx2","",27,[[]]],[11,"one","","",27,[[]]],[11,"index","","",27,[[]]],[11,"min","","",27,[[]]],[11,"max","","",27,[[]]],[11,"min_value","","",27,[[]]],[11,"max_value","","",27,[[]]],[11,"min_element","","",27,[[]]],[11,"max_element","","",27,[[]]],[11,"eq","","",27,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",27,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",27,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",27,[[]]],[11,"_mm_sub","","",27,[[]]],[11,"_mm_mul","","",27,[[]]],[11,"_mm_div","","",27,[[]]],[11,"_mm_rem","","",27,[[]]],[11,"zero","","",28,[[]]],[11,"one","","",28,[[]]],[11,"index","","",28,[[]]],[11,"min_value","","",28,[[]]],[11,"max_value","","",28,[[]]],[11,"min_element","","",28,[[]]],[11,"max_element","","",28,[[]]],[11,"eq","","",28,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",28,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",28,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",28,[[]]],[11,"_mm_sub","","",28,[[]]],[11,"_mm_mul","","",28,[[]]],[11,"_mm_div","","",28,[[]]],[11,"_mm_rem","","",28,[[]]],[11,"zero","","",29,[[]]],[11,"one","","",29,[[]]],[11,"index","","",29,[[]]],[11,"min","","",29,[[]]],[11,"max","","",29,[[]]],[11,"min_value","","",29,[[]]],[11,"max_value","","",29,[[]]],[11,"min_element","","",29,[[]]],[11,"max_element","","",29,[[]]],[11,"eq","","",29,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",29,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",29,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",29,[[]]],[11,"_mm_sub","","",29,[[]]],[11,"_mm_mul","","",29,[[]]],[11,"_mm_div","","",29,[[]]],[11,"_mm_rem","","",29,[[]]],[11,"zero","","",30,[[]]],[11,"one","","",30,[[]]],[11,"index","","",30,[[]]],[11,"min_value","","",30,[[]]],[11,"max_value","","",30,[[]]],[11,"min_element","","",30,[[]]],[11,"max_element","","",30,[[]]],[11,"eq","","",30,[[],[["avx2",3],["mask",3]]]],[11,"gt","","",30,[[],[["avx2",3],["mask",3]]]],[11,"ge","","",30,[[],[["avx2",3],["mask",3]]]],[11,"_mm_add","","",30,[[]]],[11,"_mm_sub","","",30,[[]]],[11,"_mm_mul","","",30,[[]]],[11,"_mm_div","","",30,[[]]],[11,"_mm_rem","","",30,[[]]],[11,"into_bits","thermite::backends::avx1","",20,[[],[["avx1",3],["u32x8",3]]]],[11,"into_bits","","",21,[[],[["avx1",3],["u64x8",3]]]],[11,"into_bits","","",22,[[],[["avx1",3],["u32x8",3]]]],[11,"into_bits","","",23,[[],[["avx1",3],["u64x8",3]]]],[11,"into_bits","","",20,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",21,[[],[["u64x8",3],["avx2",3]]]],[11,"into_bits","thermite::backends::avx2","",27,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",28,[[],[["u64x8",3],["avx2",3]]]],[11,"from_bits","thermite::backends::avx1","",20,[[["avx1",3],["u32x8",3]]]],[11,"from_bits","","",21,[[["avx1",3],["u64x8",3]]]],[11,"from_bits","","",22,[[["avx1",3],["u32x8",3]]]],[11,"from_bits","","",23,[[["avx1",3],["u64x8",3]]]],[11,"from_bits","","",20,[[["u32x8",3],["avx2",3]]]],[11,"from_bits","","",21,[[["u64x8",3],["avx2",3]]]],[11,"from_bits","thermite::backends::avx2","",27,[[["u32x8",3],["avx2",3]]]],[11,"from_bits","","",28,[[["u64x8",3],["avx2",3]]]],[11,"saturating_add","thermite::backends::avx1","",22,[[]]],[11,"saturating_sub","","",22,[[]]],[11,"wrapping_sum","","",22,[[]]],[11,"wrapping_product","","",22,[[]]],[11,"saturating_add","","",23,[[]]],[11,"saturating_sub","","",23,[[]]],[11,"wrapping_sum","","",23,[[]]],[11,"wrapping_product","","",23,[[]]],[11,"saturating_add","","",24,[[]]],[11,"saturating_sub","","",24,[[]]],[11,"wrapping_sum","","",24,[[]]],[11,"wrapping_product","","",24,[[]]],[11,"saturating_add","","",25,[[]]],[11,"saturating_sub","","",25,[[]]],[11,"wrapping_sum","","",25,[[]]],[11,"wrapping_product","","",25,[[]]],[11,"saturating_add","thermite::backends::avx2","",27,[[]]],[11,"saturating_sub","","",27,[[]]],[11,"wrapping_sum","","",27,[[]]],[11,"wrapping_product","","",27,[[]]],[11,"saturating_add","","",28,[[]]],[11,"saturating_sub","","",28,[[]]],[11,"wrapping_sum","","",28,[[]]],[11,"wrapping_product","","",28,[[]]],[11,"saturating_add","","",29,[[]]],[11,"saturating_sub","","",29,[[]]],[11,"wrapping_sum","","",29,[[]]],[11,"wrapping_product","","",29,[[]]],[11,"div_const","","",29,[[]]],[11,"saturating_add","","",30,[[]]],[11,"saturating_sub","","",30,[[]]],[11,"wrapping_sum","","",30,[[]]],[11,"wrapping_product","","",30,[[]]],[11,"div_const","","",30,[[]]],[11,"neg_one","thermite::backends::avx1","",20,[[]]],[11,"min_positive","","",20,[[]]],[11,"signum","","",20,[[]]],[11,"copysign","","",20,[[]]],[11,"abs","","",20,[[]]],[11,"_mm_neg","","",20,[[]]],[11,"neg_one","","",21,[[]]],[11,"min_positive","","",21,[[]]],[11,"signum","","",21,[[]]],[11,"copysign","","",21,[[]]],[11,"abs","","",21,[[]]],[11,"_mm_neg","","",21,[[]]],[11,"neg_one","","",22,[[]]],[11,"min_positive","","",22,[[]]],[11,"abs","","",22,[[]]],[11,"_mm_neg","","",22,[[]]],[11,"neg_one","","",23,[[]]],[11,"min_positive","","",23,[[]]],[11,"abs","","",23,[[]]],[11,"_mm_neg","","",23,[[]]],[11,"neg_one","","",20,[[]]],[11,"min_positive","","",20,[[]]],[11,"signum","","",20,[[]]],[11,"copysign","","",20,[[]]],[11,"abs","","",20,[[]]],[11,"_mm_neg","","",20,[[]]],[11,"neg_one","","",21,[[]]],[11,"min_positive","","",21,[[]]],[11,"signum","","",21,[[]]],[11,"copysign","","",21,[[]]],[11,"abs","","",21,[[]]],[11,"_mm_neg","","",21,[[]]],[11,"neg_one","thermite::backends::avx2","",27,[[]]],[11,"min_positive","","",27,[[]]],[11,"abs","","",27,[[]]],[11,"_mm_neg","","",27,[[]]],[11,"neg_one","","",28,[[]]],[11,"min_positive","","",28,[[]]],[11,"abs","","",28,[[]]],[11,"_mm_neg","","",28,[[]]],[11,"epsilon","thermite::backends::avx1","",20,[[]]],[11,"infinity","","",20,[[]]],[11,"neg_infinity","","",20,[[]]],[11,"neg_zero","","",20,[[]]],[11,"nan","","",20,[[]]],[11,"load_f16_unaligned_unchecked","","",20,[[]]],[11,"store_f16_unaligned_unchecked","","",20,[[]]],[11,"to_int_fast","","",20,[[]]],[11,"to_uint_fast","","",20,[[]]],[11,"sum","","",20,[[]]],[11,"product","","",20,[[]]],[11,"mul_add","","",20,[[]]],[11,"mul_sub","","",20,[[]]],[11,"nmul_add","","",20,[[]]],[11,"nmul_sub","","",20,[[]]],[11,"floor","","",20,[[]]],[11,"ceil","","",20,[[]]],[11,"round","","",20,[[]]],[11,"trunc","","",20,[[]]],[11,"sqrt","","",20,[[]]],[11,"rsqrt","","",20,[[]]],[11,"rsqrt_precise","","",20,[[]]],[11,"recepr","","",20,[[]]],[11,"is_subnormal","","",20,[[],[["mask",3],["avx1",3]]]],[11,"is_zero_or_subnormal","","",20,[[],[["mask",3],["avx1",3]]]],[11,"epsilon","","",21,[[]]],[11,"infinity","","",21,[[]]],[11,"neg_infinity","","",21,[[]]],[11,"neg_zero","","",21,[[]]],[11,"nan","","",21,[[]]],[11,"load_f16_unaligned_unchecked","","",21,[[]]],[11,"store_f16_unaligned_unchecked","","",21,[[]]],[11,"to_int_fast","","",21,[[]]],[11,"to_uint_fast","","",21,[[]]],[11,"sum","","",21,[[]]],[11,"product","","",21,[[]]],[11,"mul_add","","",21,[[]]],[11,"mul_sub","","",21,[[]]],[11,"nmul_add","","",21,[[]]],[11,"nmul_sub","","",21,[[]]],[11,"floor","","",21,[[]]],[11,"ceil","","",21,[[]]],[11,"round","","",21,[[]]],[11,"trunc","","",21,[[]]],[11,"sqrt","","",21,[[]]],[11,"is_subnormal","","",21,[[],[["mask",3],["avx1",3]]]],[11,"is_zero_or_subnormal","","",21,[[],[["mask",3],["avx1",3]]]],[11,"epsilon","","",20,[[]]],[11,"infinity","","",20,[[]]],[11,"neg_infinity","","",20,[[]]],[11,"neg_zero","","",20,[[]]],[11,"nan","","",20,[[]]],[11,"load_f16_unaligned_unchecked","","",20,[[]]],[11,"store_f16_unaligned_unchecked","","",20,[[]]],[11,"to_int_fast","","",20,[[]]],[11,"to_uint_fast","","",20,[[]]],[11,"sum","","",20,[[]]],[11,"product","","",20,[[]]],[11,"mul_add","","",20,[[]]],[11,"mul_sub","","",20,[[]]],[11,"nmul_add","","",20,[[]]],[11,"nmul_sub","","",20,[[]]],[11,"floor","","",20,[[]]],[11,"ceil","","",20,[[]]],[11,"round","","",20,[[]]],[11,"trunc","","",20,[[]]],[11,"sqrt","","",20,[[]]],[11,"rsqrt","","",20,[[]]],[11,"rsqrt_precise","","",20,[[]]],[11,"recepr","","",20,[[]]],[11,"is_subnormal","","",20,[[],[["avx2",3],["mask",3]]]],[11,"is_zero_or_subnormal","","",20,[[],[["avx2",3],["mask",3]]]],[11,"epsilon","","",21,[[]]],[11,"infinity","","",21,[[]]],[11,"neg_infinity","","",21,[[]]],[11,"neg_zero","","",21,[[]]],[11,"nan","","",21,[[]]],[11,"load_f16_unaligned_unchecked","","",21,[[]]],[11,"store_f16_unaligned_unchecked","","",21,[[]]],[11,"to_int_fast","","",21,[[]]],[11,"to_uint_fast","","",21,[[]]],[11,"sum","","",21,[[]]],[11,"product","","",21,[[]]],[11,"mul_add","","",21,[[]]],[11,"mul_sub","","",21,[[]]],[11,"nmul_add","","",21,[[]]],[11,"nmul_sub","","",21,[[]]],[11,"floor","","",21,[[]]],[11,"ceil","","",21,[[]]],[11,"round","","",21,[[]]],[11,"trunc","","",21,[[]]],[11,"sqrt","","",21,[[]]],[11,"is_subnormal","","",21,[[],[["avx2",3],["mask",3]]]],[11,"is_zero_or_subnormal","","",21,[[],[["avx2",3],["mask",3]]]],[11,"drop","thermite","",1,[[]]],[11,"clone","thermite::backends::avx1","",19,[[],["avx1",3]]],[11,"clone","","",20,[[],["f32x8",3]]],[11,"clone","","",21,[[],["f64x8",3]]],[11,"clone","","",22,[[],["i32x8",3]]],[11,"clone","","",23,[[],["i64x8",3]]],[11,"clone","","",24,[[],["u32x8",3]]],[11,"clone","","",25,[[],["u64x8",3]]],[11,"clone","thermite::backends::avx2","",26,[[],["i16x8",3]]],[11,"clone","","",27,[[],["i32x8",3]]],[11,"clone","","",28,[[],["i64x8",3]]],[11,"clone","","",29,[[],["u32x8",3]]],[11,"clone","","",30,[[],["u64x8",3]]],[11,"clone","","",31,[[],["avx2",3]]],[11,"clone","thermite","",2,[[],["vptr",3]]],[11,"clone","","",4,[[],["mask",3]]],[11,"clone","","",3,[[]]],[11,"clone","thermite::math::complex","",5,[[],["complex",3]]],[11,"clone","thermite","",0,[[],["simdinstructionset",4]]],[11,"default","thermite::backends::avx1","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",22,[[]]],[11,"default","","",23,[[]]],[11,"default","","",24,[[]]],[11,"default","","",25,[[]]],[11,"default","thermite::backends::avx2","",26,[[]]],[11,"default","","",27,[[]]],[11,"default","","",28,[[]]],[11,"default","","",29,[[]]],[11,"default","","",30,[[]]],[11,"default","thermite","",4,[[]]],[11,"cmp","","",0,[[["simdinstructionset",4]],["ordering",4]]],[11,"eq","thermite::backends::avx1","",19,[[["avx1",3]]]],[11,"eq","","",20,[[]]],[11,"ne","","",20,[[]]],[11,"eq","","",21,[[]]],[11,"ne","","",21,[[]]],[11,"eq","","",22,[[]]],[11,"ne","","",22,[[]]],[11,"eq","","",23,[[]]],[11,"ne","","",23,[[]]],[11,"eq","","",24,[[]]],[11,"ne","","",24,[[]]],[11,"eq","","",25,[[]]],[11,"ne","","",25,[[]]],[11,"eq","","",20,[[]]],[11,"ne","","",20,[[]]],[11,"eq","","",21,[[]]],[11,"ne","","",21,[[]]],[11,"eq","thermite::backends::avx2","",27,[[]]],[11,"ne","","",27,[[]]],[11,"eq","","",28,[[]]],[11,"ne","","",28,[[]]],[11,"eq","","",29,[[]]],[11,"ne","","",29,[[]]],[11,"eq","","",30,[[]]],[11,"ne","","",30,[[]]],[11,"eq","","",31,[[["avx2",3]]]],[11,"eq","thermite","",2,[[["vptr",3]]]],[11,"ne","","",2,[[["vptr",3]]]],[11,"eq","","",3,[[]]],[11,"ne","","",3,[[]]],[11,"eq","","",0,[[["simdinstructionset",4]]]],[11,"partial_cmp","","",0,[[["simdinstructionset",4]],[["option",4],["ordering",4]]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx1","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math::complex","",5,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",0,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx1","",20,[[]]],[11,"div","","",21,[[]]],[11,"div","","",22,[[]]],[11,"div","","",23,[[]]],[11,"div","","",24,[[]]],[11,"div","","",25,[[]]],[11,"div","","",20,[[]]],[11,"div","","",21,[[]]],[11,"div","thermite::backends::avx2","",27,[[]]],[11,"div","","",28,[[]]],[11,"div","","",29,[[]]],[11,"div","","",30,[[]]],[11,"div","thermite::math::complex","",5,[[]]],[11,"rem","thermite::backends::avx1","",20,[[]]],[11,"rem","","",21,[[]]],[11,"rem","","",22,[[]]],[11,"rem","","",23,[[]]],[11,"rem","","",24,[[]]],[11,"rem","","",25,[[]]],[11,"rem","","",20,[[]]],[11,"rem","","",21,[[]]],[11,"rem","thermite::backends::avx2","",27,[[]]],[11,"rem","","",28,[[]]],[11,"rem","","",29,[[]]],[11,"rem","","",30,[[]]],[11,"sub","thermite::backends::avx1","",20,[[]]],[11,"sub","","",21,[[]]],[11,"sub","","",22,[[]]],[11,"sub","","",23,[[]]],[11,"sub","","",24,[[]]],[11,"sub","","",25,[[]]],[11,"sub","","",20,[[]]],[11,"sub","","",21,[[]]],[11,"sub","thermite::backends::avx2","",27,[[]]],[11,"sub","","",28,[[]]],[11,"sub","","",29,[[]]],[11,"sub","","",30,[[]]],[11,"sub","thermite::math::complex","",5,[[]]],[11,"add","thermite::backends::avx1","",20,[[]]],[11,"add","","",21,[[]]],[11,"add","","",22,[[]]],[11,"add","","",23,[[]]],[11,"add","","",24,[[]]],[11,"add","","",25,[[]]],[11,"add","","",20,[[]]],[11,"add","","",21,[[]]],[11,"add","thermite::backends::avx2","",27,[[]]],[11,"add","","",28,[[]]],[11,"add","","",29,[[]]],[11,"add","","",30,[[]]],[11,"add","thermite::math::complex","",5,[[]]],[11,"mul","thermite::backends::avx1","",20,[[]]],[11,"mul","","",21,[[]]],[11,"mul","","",22,[[]]],[11,"mul","","",23,[[]]],[11,"mul","","",24,[[]]],[11,"mul","","",25,[[]]],[11,"mul","","",20,[[]]],[11,"mul","","",21,[[]]],[11,"mul","thermite::backends::avx2","",27,[[]]],[11,"mul","","",28,[[]]],[11,"mul","","",29,[[]]],[11,"mul","","",30,[[]]],[11,"mul","thermite::math::complex","",5,[[]]],[11,"neg","thermite::backends::avx1","",20,[[]]],[11,"neg","","",21,[[]]],[11,"neg","","",22,[[]]],[11,"neg","","",23,[[]]],[11,"neg","","",20,[[]]],[11,"neg","","",21,[[]]],[11,"neg","thermite::backends::avx2","",27,[[]]],[11,"neg","","",28,[[]]],[11,"neg","thermite::math::complex","",5,[[]]],[11,"add_assign","thermite::backends::avx1","",20,[[]]],[11,"add_assign","","",20,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",23,[[]]],[11,"add_assign","","",23,[[]]],[11,"add_assign","","",24,[[]]],[11,"add_assign","","",24,[[]]],[11,"add_assign","","",25,[[]]],[11,"add_assign","","",25,[[]]],[11,"add_assign","","",20,[[]]],[11,"add_assign","","",20,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","","",21,[[]]],[11,"add_assign","thermite::backends::avx2","",27,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","","",28,[[]]],[11,"add_assign","","",28,[[]]],[11,"add_assign","","",29,[[]]],[11,"add_assign","","",29,[[]]],[11,"add_assign","","",30,[[]]],[11,"add_assign","","",30,[[]]],[11,"sub_assign","thermite::backends::avx1","",20,[[]]],[11,"sub_assign","","",20,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",23,[[]]],[11,"sub_assign","","",23,[[]]],[11,"sub_assign","","",24,[[]]],[11,"sub_assign","","",24,[[]]],[11,"sub_assign","","",25,[[]]],[11,"sub_assign","","",25,[[]]],[11,"sub_assign","","",20,[[]]],[11,"sub_assign","","",20,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","","",21,[[]]],[11,"sub_assign","thermite::backends::avx2","",27,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","","",28,[[]]],[11,"sub_assign","","",28,[[]]],[11,"sub_assign","","",29,[[]]],[11,"sub_assign","","",29,[[]]],[11,"sub_assign","","",30,[[]]],[11,"sub_assign","","",30,[[]]],[11,"mul_assign","thermite::backends::avx1","",20,[[]]],[11,"mul_assign","","",20,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",23,[[]]],[11,"mul_assign","","",23,[[]]],[11,"mul_assign","","",24,[[]]],[11,"mul_assign","","",24,[[]]],[11,"mul_assign","","",25,[[]]],[11,"mul_assign","","",25,[[]]],[11,"mul_assign","","",20,[[]]],[11,"mul_assign","","",20,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","","",21,[[]]],[11,"mul_assign","thermite::backends::avx2","",27,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","","",28,[[]]],[11,"mul_assign","","",28,[[]]],[11,"mul_assign","","",29,[[]]],[11,"mul_assign","","",29,[[]]],[11,"mul_assign","","",30,[[]]],[11,"mul_assign","","",30,[[]]],[11,"div_assign","thermite::backends::avx1","",20,[[]]],[11,"div_assign","","",20,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",23,[[]]],[11,"div_assign","","",23,[[]]],[11,"div_assign","","",24,[[]]],[11,"div_assign","","",24,[[]]],[11,"div_assign","","",25,[[]]],[11,"div_assign","","",25,[[]]],[11,"div_assign","","",20,[[]]],[11,"div_assign","","",20,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","","",21,[[]]],[11,"div_assign","thermite::backends::avx2","",27,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","","",28,[[]]],[11,"div_assign","","",28,[[]]],[11,"div_assign","","",29,[[]]],[11,"div_assign","","",29,[[]]],[11,"div_assign","","",30,[[]]],[11,"div_assign","","",30,[[]]],[11,"rem_assign","thermite::backends::avx1","",20,[[]]],[11,"rem_assign","","",20,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",23,[[]]],[11,"rem_assign","","",23,[[]]],[11,"rem_assign","","",24,[[]]],[11,"rem_assign","","",24,[[]]],[11,"rem_assign","","",25,[[]]],[11,"rem_assign","","",25,[[]]],[11,"rem_assign","","",20,[[]]],[11,"rem_assign","","",20,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","","",21,[[]]],[11,"rem_assign","thermite::backends::avx2","",27,[[]]],[11,"rem_assign","","",27,[[]]],[11,"rem_assign","","",28,[[]]],[11,"rem_assign","","",28,[[]]],[11,"rem_assign","","",29,[[]]],[11,"rem_assign","","",29,[[]]],[11,"rem_assign","","",30,[[]]],[11,"rem_assign","","",30,[[]]],[11,"not","thermite::backends::avx1","",20,[[]]],[11,"not","","",21,[[]]],[11,"not","","",22,[[]]],[11,"not","","",23,[[]]],[11,"not","","",24,[[]]],[11,"not","","",25,[[]]],[11,"not","","",20,[[]]],[11,"not","","",21,[[]]],[11,"not","thermite::backends::avx2","",27,[[]]],[11,"not","","",28,[[]]],[11,"not","","",29,[[]]],[11,"not","","",30,[[]]],[11,"not","thermite","",3,[[]]],[11,"not","","",4,[[]]],[11,"bitand","thermite::backends::avx1","",20,[[]]],[11,"bitand","","",21,[[]]],[11,"bitand","","",22,[[]]],[11,"bitand","","",23,[[]]],[11,"bitand","","",24,[[]]],[11,"bitand","","",25,[[]]],[11,"bitand","","",20,[[]]],[11,"bitand","","",21,[[]]],[11,"bitand","thermite::backends::avx2","",27,[[]]],[11,"bitand","","",28,[[]]],[11,"bitand","","",29,[[]]],[11,"bitand","","",30,[[]]],[11,"bitand","thermite","",3,[[]]],[11,"bitand","","",4,[[]]],[11,"bitor","thermite::backends::avx1","",20,[[]]],[11,"bitor","","",21,[[]]],[11,"bitor","","",22,[[]]],[11,"bitor","","",23,[[]]],[11,"bitor","","",24,[[]]],[11,"bitor","","",25,[[]]],[11,"bitor","","",20,[[]]],[11,"bitor","","",21,[[]]],[11,"bitor","thermite::backends::avx2","",27,[[]]],[11,"bitor","","",28,[[]]],[11,"bitor","","",29,[[]]],[11,"bitor","","",30,[[]]],[11,"bitor","thermite","",3,[[]]],[11,"bitor","","",4,[[]]],[11,"bitxor","thermite::backends::avx1","",20,[[]]],[11,"bitxor","","",21,[[]]],[11,"bitxor","","",22,[[]]],[11,"bitxor","","",23,[[]]],[11,"bitxor","","",24,[[]]],[11,"bitxor","","",25,[[]]],[11,"bitxor","","",20,[[]]],[11,"bitxor","","",21,[[]]],[11,"bitxor","thermite::backends::avx2","",27,[[]]],[11,"bitxor","","",28,[[]]],[11,"bitxor","","",29,[[]]],[11,"bitxor","","",30,[[]]],[11,"bitxor","thermite","",3,[[]]],[11,"bitxor","","",4,[[]]],[11,"shl","thermite::backends::avx1","",20,[[]]],[11,"shl","","",20,[[]]],[11,"shl","","",21,[[]]],[11,"shl","","",21,[[]]],[11,"shl","","",22,[[]]],[11,"shl","","",22,[[]]],[11,"shl","","",23,[[]]],[11,"shl","","",23,[[]]],[11,"shl","","",24,[[]]],[11,"shl","","",24,[[]]],[11,"shl","","",25,[[]]],[11,"shl","","",25,[[]]],[11,"shl","","",20,[[]]],[11,"shl","","",20,[[]]],[11,"shl","","",21,[[]]],[11,"shl","","",21,[[]]],[11,"shl","thermite::backends::avx2","",27,[[]]],[11,"shl","","",27,[[]]],[11,"shl","","",28,[[]]],[11,"shl","","",28,[[]]],[11,"shl","","",29,[[]]],[11,"shl","","",29,[[]]],[11,"shl","","",30,[[]]],[11,"shl","","",30,[[]]],[11,"shr","thermite::backends::avx1","",20,[[]]],[11,"shr","","",20,[[]]],[11,"shr","","",21,[[]]],[11,"shr","","",21,[[]]],[11,"shr","","",22,[[]]],[11,"shr","","",22,[[]]],[11,"shr","","",23,[[]]],[11,"shr","","",23,[[]]],[11,"shr","","",24,[[]]],[11,"shr","","",24,[[]]],[11,"shr","","",25,[[]]],[11,"shr","","",25,[[]]],[11,"shr","","",20,[[]]],[11,"shr","","",20,[[]]],[11,"shr","","",21,[[]]],[11,"shr","","",21,[[]]],[11,"shr","thermite::backends::avx2","",27,[[]]],[11,"shr","","",27,[[]]],[11,"shr","","",28,[[]]],[11,"shr","","",28,[[]]],[11,"shr","","",29,[[]]],[11,"shr","","",29,[[]]],[11,"shr","","",30,[[]]],[11,"shr","","",30,[[]]],[11,"bitand_assign","thermite::backends::avx1","",20,[[]]],[11,"bitand_assign","","",20,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","","",22,[[]]],[11,"bitand_assign","","",22,[[]]],[11,"bitand_assign","","",23,[[]]],[11,"bitand_assign","","",23,[[]]],[11,"bitand_assign","","",24,[[]]],[11,"bitand_assign","","",24,[[]]],[11,"bitand_assign","","",25,[[]]],[11,"bitand_assign","","",25,[[]]],[11,"bitand_assign","","",20,[[]]],[11,"bitand_assign","","",20,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","","",21,[[]]],[11,"bitand_assign","thermite::backends::avx2","",27,[[]]],[11,"bitand_assign","","",27,[[]]],[11,"bitand_assign","","",28,[[]]],[11,"bitand_assign","","",28,[[]]],[11,"bitand_assign","","",29,[[]]],[11,"bitand_assign","","",29,[[]]],[11,"bitand_assign","","",30,[[]]],[11,"bitand_assign","","",30,[[]]],[11,"bitand_assign","thermite","",3,[[]]],[11,"bitand_assign","","",4,[[]]],[11,"bitor_assign","thermite::backends::avx1","",20,[[]]],[11,"bitor_assign","","",20,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","","",22,[[]]],[11,"bitor_assign","","",22,[[]]],[11,"bitor_assign","","",23,[[]]],[11,"bitor_assign","","",23,[[]]],[11,"bitor_assign","","",24,[[]]],[11,"bitor_assign","","",24,[[]]],[11,"bitor_assign","","",25,[[]]],[11,"bitor_assign","","",25,[[]]],[11,"bitor_assign","","",20,[[]]],[11,"bitor_assign","","",20,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","","",21,[[]]],[11,"bitor_assign","thermite::backends::avx2","",27,[[]]],[11,"bitor_assign","","",27,[[]]],[11,"bitor_assign","","",28,[[]]],[11,"bitor_assign","","",28,[[]]],[11,"bitor_assign","","",29,[[]]],[11,"bitor_assign","","",29,[[]]],[11,"bitor_assign","","",30,[[]]],[11,"bitor_assign","","",30,[[]]],[11,"bitor_assign","thermite","",3,[[]]],[11,"bitor_assign","","",4,[[]]],[11,"bitxor_assign","thermite::backends::avx1","",20,[[]]],[11,"bitxor_assign","","",20,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","","",22,[[]]],[11,"bitxor_assign","","",22,[[]]],[11,"bitxor_assign","","",23,[[]]],[11,"bitxor_assign","","",23,[[]]],[11,"bitxor_assign","","",24,[[]]],[11,"bitxor_assign","","",24,[[]]],[11,"bitxor_assign","","",25,[[]]],[11,"bitxor_assign","","",25,[[]]],[11,"bitxor_assign","","",20,[[]]],[11,"bitxor_assign","","",20,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","","",21,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",27,[[]]],[11,"bitxor_assign","","",27,[[]]],[11,"bitxor_assign","","",28,[[]]],[11,"bitxor_assign","","",28,[[]]],[11,"bitxor_assign","","",29,[[]]],[11,"bitxor_assign","","",29,[[]]],[11,"bitxor_assign","","",30,[[]]],[11,"bitxor_assign","","",30,[[]]],[11,"bitxor_assign","thermite","",3,[[]]],[11,"bitxor_assign","","",4,[[]]],[11,"shl_assign","thermite::backends::avx1","",20,[[]]],[11,"shl_assign","","",20,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",23,[[]]],[11,"shl_assign","","",23,[[]]],[11,"shl_assign","","",24,[[]]],[11,"shl_assign","","",24,[[]]],[11,"shl_assign","","",25,[[]]],[11,"shl_assign","","",25,[[]]],[11,"shl_assign","","",20,[[]]],[11,"shl_assign","","",20,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","","",21,[[]]],[11,"shl_assign","thermite::backends::avx2","",27,[[]]],[11,"shl_assign","","",27,[[]]],[11,"shl_assign","","",28,[[]]],[11,"shl_assign","","",28,[[]]],[11,"shl_assign","","",29,[[]]],[11,"shl_assign","","",29,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shl_assign","","",30,[[]]],[11,"shr_assign","thermite::backends::avx1","",20,[[]]],[11,"shr_assign","","",20,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",23,[[]]],[11,"shr_assign","","",23,[[]]],[11,"shr_assign","","",24,[[]]],[11,"shr_assign","","",24,[[]]],[11,"shr_assign","","",25,[[]]],[11,"shr_assign","","",25,[[]]],[11,"shr_assign","","",20,[[]]],[11,"shr_assign","","",20,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","","",21,[[]]],[11,"shr_assign","thermite::backends::avx2","",27,[[]]],[11,"shr_assign","","",27,[[]]],[11,"shr_assign","","",28,[[]]],[11,"shr_assign","","",28,[[]]],[11,"shr_assign","","",29,[[]]],[11,"shr_assign","","",29,[[]]],[11,"shr_assign","","",30,[[]]],[11,"shr_assign","","",30,[[]]],[11,"hash","thermite::backends::avx1","",19,[[]]],[11,"hash","thermite::backends::avx2","",31,[[]]],[11,"hash","thermite","",0,[[]]]],"p":[[4,"SimdInstructionSet"],[3,"SimdBuffer"],[3,"VPtr"],[3,"BitMask"],[3,"Mask"],[3,"Complex"],[8,"SimdVectorizedMath"],[8,"SimdFromCast"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntoBits"],[8,"SimdFromBits"],[8,"SimdIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[8,"Simd"],[3,"AVX1"],[3,"f32x8"],[3,"f64x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"i16x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"AVX2"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);