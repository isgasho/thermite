var searchIndex = JSON.parse('{\
"thermite":{"doc":"","i":[[23,"dispatch","thermite","Generates monomorphized backend `target_feature` function…",null,null],[3,"VectorBuffer","","Aligned SIMD vector storage",null,null],[3,"Divider","","Divider recommended for constant divisors.",null,null],[3,"BranchfreeDivider","","Divider without branching, useful for dynamic divisors.",null,null],[3,"VPtr","","",null,null],[3,"BitMask","","Small integer representation of a mask using individual bits",null,null],[3,"Mask","","",null,null],[4,"SimdInstructionSet","","Enum of supported instruction sets",null,null],[13,"SSE2","","",0,null],[13,"SSE42","","",0,null],[13,"AVX","","",0,null],[13,"AVX2","","",0,null],[0,"arch","","Organized target-feature intrinsics",null,null],[0,"sse","thermite::arch","",null,null],[3,"__m128","thermite::arch::sse","128-bit wide set of four `f32` types, x86-specific",null,null],[3,"__m128d","","128-bit wide set of two `f64` types, x86-specific",null,null],[3,"__m128i","","128-bit wide integer vector type, x86-specific",null,null],[17,"_CMP_EQ_OQ","","Equal (ordered, non-signaling)",null,null],[17,"_CMP_EQ_OS","","Equal (ordered, signaling)",null,null],[17,"_CMP_EQ_UQ","","Equal (unordered, non-signaling)",null,null],[17,"_CMP_EQ_US","","Equal (unordered, signaling)",null,null],[17,"_CMP_FALSE_OQ","","False (ordered, non-signaling)",null,null],[17,"_CMP_FALSE_OS","","False (ordered, signaling)",null,null],[17,"_CMP_GE_OQ","","Greater-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_GE_OS","","Greater-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_GT_OQ","","Greater-than (ordered, non-signaling)",null,null],[17,"_CMP_GT_OS","","Greater-than (ordered, signaling)",null,null],[17,"_CMP_LE_OQ","","Less-than-or-equal (ordered, non-signaling)",null,null],[17,"_CMP_LE_OS","","Less-than-or-equal (ordered, signaling)",null,null],[17,"_CMP_LT_OQ","","Less-than (ordered, non-signaling)",null,null],[17,"_CMP_LT_OS","","Less-than (ordered, signaling)",null,null],[17,"_CMP_NEQ_OQ","","Not-equal (ordered, non-signaling)",null,null],[17,"_CMP_NEQ_OS","","Not-equal (ordered, signaling)",null,null],[17,"_CMP_NEQ_UQ","","Not-equal (unordered, non-signaling)",null,null],[17,"_CMP_NEQ_US","","Not-equal (unordered, signaling)",null,null],[17,"_CMP_NGE_UQ","","Not-greater-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NGE_US","","Not-greater-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NGT_UQ","","Not-greater-than (unordered, non-signaling)",null,null],[17,"_CMP_NGT_US","","Not-greater-than (unordered, signaling)",null,null],[17,"_CMP_NLE_UQ","","Not-less-than-or-equal (unordered, non-signaling)",null,null],[17,"_CMP_NLE_US","","Not-less-than-or-equal (unordered, signaling)",null,null],[17,"_CMP_NLT_UQ","","Not-less-than (unordered, non-signaling)",null,null],[17,"_CMP_NLT_US","","Not-less-than (unordered, signaling)",null,null],[17,"_CMP_ORD_Q","","Ordered (non-signaling)",null,null],[17,"_CMP_ORD_S","","Ordered (signaling)",null,null],[17,"_CMP_TRUE_UQ","","True (unordered, non-signaling)",null,null],[17,"_CMP_TRUE_US","","True (unordered, signaling)",null,null],[17,"_CMP_UNORD_Q","","Unordered (non-signaling)",null,null],[17,"_CMP_UNORD_S","","Unordered (signaling)",null,null],[17,"_MM_FROUND_CEIL","","round up and do not suppress exceptions",null,null],[17,"_MM_FROUND_CUR_DIRECTION","","use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`",null,null],[17,"_MM_FROUND_FLOOR","","round down and do not suppress exceptions",null,null],[17,"_MM_FROUND_NEARBYINT","","use MXCSR.RC and suppress exceptions; see…",null,null],[17,"_MM_FROUND_NINT","","round to nearest and do not suppress exceptions",null,null],[17,"_MM_FROUND_NO_EXC","","suppress exceptions",null,null],[17,"_MM_FROUND_RAISE_EXC","","do not suppress exceptions",null,null],[17,"_MM_FROUND_RINT","","use MXCSR.RC and do not suppress exceptions; see…",null,null],[17,"_MM_FROUND_TO_NEAREST_INT","","round to nearest",null,null],[17,"_MM_FROUND_TO_NEG_INF","","round down",null,null],[17,"_MM_FROUND_TO_POS_INF","","round up",null,null],[17,"_MM_FROUND_TO_ZERO","","truncate",null,null],[17,"_MM_FROUND_TRUNC","","truncate and do not suppress exceptions",null,null],[5,"_mm_add_ps","","Adds __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_add_ss","","Adds the first component of `a` and `b`, the other…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_and_ps","","Bitwise AND of packed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_andnot_ps","","Bitwise AND-NOT of packed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_ss","","Compares the lowest `f32` of both inputs for equality. The…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpge_ss","","Compares the lowest `f32` of both inputs for greater than…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpgt_ss","","Compares the lowest `f32` of both inputs for greater than.…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmple_ss","","Compares the lowest `f32` of both inputs for less than or…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmplt_ss","","Compares the lowest `f32` of both inputs for less than.…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpneq_ss","","Compares the lowest `f32` of both inputs for inequality.…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnge_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpngt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnle_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpnlt_ss","","Compares the lowest `f32` of both inputs for…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpord_ss","","Checks if the lowest `f32` of both inputs are ordered. The…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ps","","Compares each of the four floats in `a` to the…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpunord_ss","","Checks if the lowest `f32` of both inputs are unordered.…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_comieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_comige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_comigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_comile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_comilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_comineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_cvt_si2ss","","Alias for `_mm_cvtsi32_ss`.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvt_ss2si","","Alias for `_mm_cvtss_si32`.",null,[[["__m128",3]]]],[5,"_mm_cvtsi32_ss","","Converts a 32 bit integer to a 32 bit float. The result…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtss_f32","","Extracts the lowest 32 bit float from the input vector.",null,[[["__m128",3]]]],[5,"_mm_cvtss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128",3]]]],[5,"_mm_cvtt_ss2si","","Alias for `_mm_cvttss_si32`.",null,[[["__m128",3]]]],[5,"_mm_cvttss_si32","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128",3]]]],[5,"_mm_div_ps","","Divides __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_div_ss","","Divides the first component of `b` by `a`, the other…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_load_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128",3]]],[5,"_mm_load_ps1","","Alias for `_mm_load1_ps`",null,[[],["__m128",3]]],[5,"_mm_load_ss","","Construct a `__m128` with the lowest element read from `p`…",null,[[],["__m128",3]]],[5,"_mm_load1_ps","","Construct a `__m128` by duplicating the value read from…",null,[[],["__m128",3]]],[5,"_mm_loadr_ps","","Loads four `f32` values from aligned memory into a…",null,[[],["__m128",3]]],[5,"_mm_loadu_ps","","Loads four `f32` values from memory into a `__m128`. There…",null,[[],["__m128",3]]],[5,"_mm_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_min_ss","","Compares the first single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_move_ss","","Returns a `__m128` with the first component from `b` and…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movehl_ps","","Combine higher half of `a` and `b`. The highwe half of `b`…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movelh_ps","","Combine lower half of `a` and `b`. The lower half of `b`…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_movemask_ps","","Returns a mask of the most significant bit of each element…",null,[[["__m128",3]]]],[5,"_mm_mul_ps","","Multiplies __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_mul_ss","","Multiplies the first component of `a` and `b`, the other…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_or_ps","","Bitwise OR of packed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_prefetch","","Fetch the cache line that contains address `p` using the…",null,[[]]],[5,"_mm_rcp_ps","","Returns the approximate reciprocal of packed…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rcp_ss","","Returns the approximate reciprocal of the first…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ps","","Returns the approximate reciprocal square root of packed…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_rsqrt_ss","","Returns the approximate reciprocal square root of the fist…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_set_ps","","Construct a `__m128` from four floating point values…",null,[[],["__m128",3]]],[5,"_mm_set_ps1","","Alias for `_mm_set1_ps`",null,[[],["__m128",3]]],[5,"_mm_set_ss","","Construct a `__m128` with the lowest element set to `a`…",null,[[],["__m128",3]]],[5,"_mm_set1_ps","","Construct a `__m128` with all element set to `a`.",null,[[],["__m128",3]]],[5,"_mm_setcsr","","Sets the MXCSR register with the 32-bit unsigned integer…",null,[[]]],[5,"_mm_setr_ps","","Construct a `__m128` from four floating point values…",null,[[],["__m128",3]]],[5,"_mm_setzero_ps","","Construct a `__m128` with all elements initialized to zero.",null,[[],["__m128",3]]],[5,"_mm_sfence","","Performs a serializing operation on all store-to-memory…",null,[[]]],[5,"_mm_shuffle_ps","","Shuffles packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sqrt_ss","","Returns the square root of the first single-precision…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_store_ps","","Stores four 32-bit floats into aligned memory.",null,[[["__m128",3]]]],[5,"_mm_store_ps1","","Alias for `_mm_store1_ps`",null,[[["__m128",3]]]],[5,"_mm_store_ss","","Stores the lowest 32 bit float of `a` into memory.",null,[[["__m128",3]]]],[5,"_mm_store1_ps","","Stores the lowest 32 bit float of `a` repeated four times…",null,[[["__m128",3]]]],[5,"_mm_storer_ps","","Stores four 32-bit floats into aligned memory in reverse…",null,[[["__m128",3]]]],[5,"_mm_storeu_ps","","Stores four 32-bit floats into memory. There are no…",null,[[["__m128",3]]]],[5,"_mm_stream_ps","","Stores `a` into the memory at `mem_addr` using a…",null,[[["__m128",3]]]],[5,"_mm_sub_ps","","Subtracts __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_sub_ss","","Subtracts the first component of `b` from `a`, the other…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ucomieq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_ucomige_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_ucomigt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_ucomile_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_ucomilt_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_ucomineq_ss","","Compares two 32-bit floats from the low-order bits of `a`…",null,[[["__m128",3]]]],[5,"_mm_undefined_ps","","Returns vector of type __m128 with undefined elements.",null,[[],["__m128",3]]],[5,"_mm_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_xor_ps","","Bitwise exclusive OR of packed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtsi64_ss","","Converts a 64 bit integer to a 32 bit float. The result…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cvtss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128",3]]]],[5,"_mm_cvttss_si64","","Converts the lowest 32 bit float in the input vector to a…",null,[[["__m128",3]]]],[5,"_mm_loadu_si64","","Loads unaligned 64-bits of integer data from memory into…",null,[[],["__m128i",3]]],[0,"sse2","thermite::arch","",null,null],[5,"_mm_add_epi16","thermite::arch::sse2","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_add_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_and_pd","","Computes the bitwise AND of packed double-precision…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_and_si128","","Computes the bitwise AND of 128 bits (representing integer…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_andnot_pd","","Computes the bitwise NOT of `a` and then AND with `b`.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_andnot_si128","","Computes the bitwise NOT of 128 bits (representing integer…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bslli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_bsrli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_castpd_ps","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_castpd_si128","","Casts a 128-bit floating-point vector of `[2 x double]`…",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_castps_pd","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_castps_si128","","Casts a 128-bit floating-point vector of `[4 x float]`…",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_castsi128_pd","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_castsi128_ps","","Casts a 128-bit integer vector into a 128-bit…",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_clflush","","Invalidates and flushes the cache line that contains `p`…",null,[[]]],[5,"_mm_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpeq_pd","","Compares corresponding elements in `a` and `b` for equality.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpeq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpgt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpgt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmple_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_epi8","","Compares packed 8-bit integers in `a` and `b` for less-than.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmplt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmplt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpneq_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnge_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpngt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnle_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_pd","","Compares corresponding elements in `a` and `b` for…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpnlt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_pd","","Compares corresponding elements in `a` and `b` to see if…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmpunord_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_comieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d",3]]]],[5,"_mm_comige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d",3]]]],[5,"_mm_comigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_comile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d",3]]]],[5,"_mm_comilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d",3]]]],[5,"_mm_comineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_cvtepi32_pd","","Converts the lower two packed 32-bit integers in `a` to…",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128",3]]],[5,"_mm_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128d",3]]],[5,"_mm_cvtsd_f64","","Returns the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d",3]]]],[5,"_mm_cvtsd_ss","","Converts the lower double-precision (64-bit)…",null,[[["__m128d",3],["__m128",3]],["__m128",3]]],[5,"_mm_cvtsi128_si32","","Returns the lowest element of `a`.",null,[[["__m128i",3]]]],[5,"_mm_cvtsi128_si64","","Returns the lowest element of `a`.",null,[[["__m128i",3]]]],[5,"_mm_cvtsi128_si64x","","Returns the lowest element of `a`.",null,[[["__m128i",3]]]],[5,"_mm_cvtsi32_sd","","Returns `a` with its lower element replaced by `b` after…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cvtsi32_si128","","Returns a vector whose lowest element is `a` and all…",null,[[],["__m128i",3]]],[5,"_mm_cvtsi64x_si128","","Returns a vector whose lowest element is `a` and all…",null,[[],["__m128i",3]]],[5,"_mm_cvtss_sd","","Converts the lower single-precision (32-bit)…",null,[[["__m128d",3],["__m128",3]],["__m128d",3]]],[5,"_mm_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128i",3]]],[5,"_mm_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128i",3]]],[5,"_mm_cvttsd_si32","","Converts the lower double-precision (64-bit)…",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_si64","","Converts the lower double-precision (64-bit)…",null,[[["__m128d",3]]]],[5,"_mm_cvttsd_si64x","","Alias for `_mm_cvttsd_si64`",null,[[["__m128d",3]]]],[5,"_mm_div_pd","","Divide packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_div_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_extract_epi16","","Returns the `imm8` element of `a`.",null,[[["__m128i",3]]]],[5,"_mm_insert_epi16","","Returns a new vector where the `imm8` element of `a` is…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_lfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_load_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d",3]]],[5,"_mm_load_pd1","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d",3]]],[5,"_mm_load_sd","","Loads a 64-bit double-precision value to the low element…",null,[[],["__m128d",3]]],[5,"_mm_load_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i",3]]],[5,"_mm_load1_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d",3]]],[5,"_mm_loadh_pd","","Loads a double-precision value into the high-order bits of…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadl_epi64","","Loads 64-bit integer from memory into first element of…",null,[[],["__m128i",3]]],[5,"_mm_loadl_pd","","Loads a double-precision value into the low-order bits of…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_loadr_pd","","Loads 2 double-precision (64-bit) floating-point elements…",null,[[],["__m128d",3]]],[5,"_mm_loadu_pd","","Loads 128-bits (composed of 2 packed double-precision…",null,[[],["__m128d",3]]],[5,"_mm_loadu_si128","","Loads 128-bits of integer data from memory into a new…",null,[[],["__m128i",3]]],[5,"_mm_madd_epi16","","Multiplies and then horizontally add signed 16 bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maskmoveu_si128","","Conditionally store 8-bit integer elements from `a` into…",null,[[["__m128i",3]]]],[5,"_mm_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_pd","","Returns a new vector with the maximum values from…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_max_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mfence","","Performs a serializing operation on all load-from-memory…",null,[[]]],[5,"_mm_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_pd","","Returns a new vector with the minimum values from…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_min_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_move_epi64","","Returns a vector where the low element is extracted from…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_move_sd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_movemask_epi8","","Returns a mask of the most significant bit of each element…",null,[[["__m128i",3]]]],[5,"_mm_movemask_pd","","Returns a mask of the most significant bit of each element…",null,[[["__m128d",3]]]],[5,"_mm_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mul_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_or_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_or_si128","","Computes the bitwise OR of 128 bits (representing integer…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_pause","","Provides a hint to the processor that the code sequence is…",null,[[]]],[5,"_mm_sad_epu8","","Sum the absolute differences of packed unsigned 8-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_set_epi16","","Sets packed 16-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi32","","Sets packed 32-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_epi64x","","Sets packed 64-bit integers with the supplied values, from…",null,[[],["__m128i",3]]],[5,"_mm_set_epi8","","Sets packed 8-bit integers with the supplied values.",null,[[],["__m128i",3]]],[5,"_mm_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[],["__m128d",3]]],[5,"_mm_set_pd1","","Broadcasts double-precision (64-bit) floating-point value…",null,[[],["__m128d",3]]],[5,"_mm_set_sd","","Copies double-precision (64-bit) floating-point element…",null,[[],["__m128d",3]]],[5,"_mm_set1_epi16","","Broadcasts 16-bit integer `a` to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi32","","Broadcasts 32-bit integer `a` to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_epi8","","Broadcasts 8-bit integer `a` to all elements.",null,[[],["__m128i",3]]],[5,"_mm_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[],["__m128d",3]]],[5,"_mm_setr_epi16","","Sets packed 16-bit integers with the supplied values in…",null,[[],["__m128i",3]]],[5,"_mm_setr_epi32","","Sets packed 32-bit integers with the supplied values in…",null,[[],["__m128i",3]]],[5,"_mm_setr_epi8","","Sets packed 8-bit integers with the supplied values in…",null,[[],["__m128i",3]]],[5,"_mm_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[],["__m128d",3]]],[5,"_mm_setzero_pd","","Returns packed double-precision (64-bit) floating-point…",null,[[],["__m128d",3]]],[5,"_mm_setzero_si128","","Returns a vector with all elements set to zero.",null,[[],["__m128i",3]]],[5,"_mm_shuffle_epi32","","Shuffles 32-bit integers in `a` using the control in `imm8`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shuffle_pd","","Constructs a 128-bit floating-point vector of `[2 x…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of `a` using…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of `a` using…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_slli_si128","","Shifts `a` left by `imm8` bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sqrt_pd","","Returns a new vector with the square root of each of the…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sqrt_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_srli_si128","","Shifts `a` right by `imm8` bytes while shifting in zeros.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_store_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d",3]]]],[5,"_mm_store_pd1","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]]]],[5,"_mm_store_sd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d",3]]]],[5,"_mm_store_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i",3]]]],[5,"_mm_store1_pd","","Stores the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]]]],[5,"_mm_storeh_pd","","Stores the upper 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d",3]]]],[5,"_mm_storel_epi64","","Stores the lower 64-bit integer `a` to a memory location.",null,[[["__m128i",3]]]],[5,"_mm_storel_pd","","Stores the lower 64 bits of a 128-bit vector of `[2 x…",null,[[["__m128d",3]]]],[5,"_mm_storer_pd","","Stores 2 double-precision (64-bit) floating-point elements…",null,[[["__m128d",3]]]],[5,"_mm_storeu_pd","","Stores 128-bits (composed of 2 packed double-precision…",null,[[["__m128d",3]]]],[5,"_mm_storeu_si128","","Stores 128-bits of integer data from `a` into memory.",null,[[["__m128i",3]]]],[5,"_mm_stream_pd","","Stores a 128-bit floating point vector of `[2 x double]`…",null,[[["__m128d",3]]]],[5,"_mm_stream_si128","","Stores a 128-bit integer vector to a 128-bit aligned…",null,[[["__m128i",3]]]],[5,"_mm_stream_si32","","Stores a 32-bit integer value in the specified memory…",null,[[]]],[5,"_mm_stream_si64","","Stores a 64-bit integer value in the specified memory…",null,[[]]],[5,"_mm_sub_epi16","","Subtracts packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_epi8","","Subtracts packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sub_pd","","Subtract packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_sub_sd","","Returns a new vector with the low element of `a` replaced…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_ucomieq_sd","","Compares the lower element of `a` and `b` for equality.",null,[[["__m128d",3]]]],[5,"_mm_ucomige_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d",3]]]],[5,"_mm_ucomigt_sd","","Compares the lower element of `a` and `b` for greater-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomile_sd","","Compares the lower element of `a` and `b` for…",null,[[["__m128d",3]]]],[5,"_mm_ucomilt_sd","","Compares the lower element of `a` and `b` for less-than.",null,[[["__m128d",3]]]],[5,"_mm_ucomineq_sd","","Compares the lower element of `a` and `b` for not-equal.",null,[[["__m128d",3]]]],[5,"_mm_undefined_pd","","Returns vector of type __m128d with undefined elements.",null,[[],["__m128d",3]]],[5,"_mm_undefined_si128","","Returns vector of type __m128i with undefined elements.",null,[[],["__m128i",3]]],[5,"_mm_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpackhi_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_unpacklo_pd","","The resulting `__m128d` element is composed by the…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_pd","","Computes the bitwise OR of `a` and `b`.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_xor_si128","","Computes the bitwise XOR of 128 bits (representing integer…",null,[[["__m128i",3]],["__m128i",3]]],[0,"sse3","thermite::arch","",null,null],[5,"_mm_addsub_pd","thermite::arch::sse3","Alternatively add and subtract packed double-precision…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_addsub_ps","","Alternatively add and subtract packed single-precision…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hadd_pd","","Horizontally adds adjacent pairs of double-precision…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hadd_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_hsub_pd","","Horizontally subtract adjacent pairs of double-precision…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_hsub_ps","","Horizontally adds adjacent pairs of single-precision…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_lddqu_si128","","Loads 128-bits of integer data from unaligned memory. This…",null,[[],["__m128i",3]]],[5,"_mm_loaddup_pd","","Loads a double-precision (64-bit) floating-point element…",null,[[],["__m128d",3]]],[5,"_mm_movedup_pd","","Duplicate the low double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[0,"ssse3","thermite::arch","",null,null],[5,"_mm_abs_epi16","thermite::arch::ssse3","Computes the absolute value of each of the packed 16-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi32","","Computes the absolute value of each of the packed 32-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_abs_epi8","","Computes the absolute value of packed 8-bit signed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_alignr_epi8","","Concatenate 16-byte blocks in `a` and `b` into a 32-byte…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadd_epi32","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hadds_epi16","","Horizontally adds the adjacent pairs of values contained…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsub_epi32","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_hsubs_epi16","","Horizontally subtract the adjacent pairs of values…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_maddubs_epi16","","Multiplies corresponding pairs of packed 8-bit unsigned…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mulhrs_epi16","","Multiplies packed 16-bit signed integer values, truncate…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m128i",3]],["__m128i",3]]],[0,"sse41","thermite::arch","",null,null],[5,"_mm_blend_epi16","thermite::arch::sse41","Blend packed 16-bit integers from `a` and `b` using the…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blend_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blend_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_blendv_epi8","","Blend packed 8-bit integers from `a` and `b` using `mask`",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_blendv_pd","","Blend packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_blendv_ps","","Blend packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_ceil_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_ceil_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi32","","Sign extend packed 16-bit integers in `a` to packed 32-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi16_epi64","","Sign extend packed 16-bit integers in `a` to packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi32_epi64","","Sign extend packed 32-bit integers in `a` to packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi16","","Sign extend packed 8-bit integers in `a` to packed 16-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi32","","Sign extend packed 8-bit integers in `a` to packed 32-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepi8_epi64","","Sign extend packed 8-bit integers in the low 8 bytes of…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu16_epi64","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu32_epi64","","Zeroes extend packed unsigned 32-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi16","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi32","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cvtepu8_epi64","","Zeroes extend packed unsigned 8-bit integers in `a` to…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_dp_pd","","Returns the dot product of two __m128d vectors.",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_dp_ps","","Returns the dot product of two __m128 vectors.",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_extract_epi32","","Extracts an 32-bit integer from `a` selected with `imm8`",null,[[["__m128i",3]]]],[5,"_mm_extract_epi64","","Extracts an 64-bit integer from `a` selected with `imm8`",null,[[["__m128i",3]]]],[5,"_mm_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m128i",3]]]],[5,"_mm_extract_ps","","Extracts a single-precision (32-bit) floating-point…",null,[[["__m128",3]]]],[5,"_mm_floor_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_floor_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_floor_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_insert_epi32","","Returns a copy of `a` with the 32-bit integer from `i`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_epi64","","Returns a copy of `a` with the 64-bit integer from `i`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_epi8","","Returns a copy of `a` with the 8-bit integer from `i`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_insert_ps","","Select a single value in `a` to store at some position in…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epi8","","Compares packed 8-bit integers in `a` and `b` and returns…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_minpos_epu16","","Finds the minimum unsigned 16-bit element in the 128-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mpsadbw_epu8","","Subtracts 8-bit unsigned integer values and computes the…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_round_pd","","Round the packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ps","","Round the packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_round_sd","","Round the lower double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_round_ss","","Round the lower single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_test_all_ones","","Tests whether the specified bits in `a` 128-bit integer…",null,[[["__m128i",3]]]],[5,"_mm_test_all_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i",3]]]],[5,"_mm_test_mix_ones_zeros","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i",3]]]],[5,"_mm_testc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i",3]]]],[5,"_mm_testnzc_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i",3]]]],[5,"_mm_testz_si128","","Tests whether the specified bits in a 128-bit integer…",null,[[["__m128i",3]]]],[0,"sse42","thermite::arch","",null,null],[5,"_mm_cmpestra","thermite::arch::sse42","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]]]],[5,"_mm_cmpestrc","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]]]],[5,"_mm_cmpestri","","Compares packed strings `a` and `b` with lengths `la` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpestrm","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpestro","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]]]],[5,"_mm_cmpestrs","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]]]],[5,"_mm_cmpestrz","","Compares packed strings in `a` and `b` with lengths `la`…",null,[[["__m128i",3]]]],[5,"_mm_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpistra","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpistrc","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpistri","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpistrm","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_cmpistro","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpistrs","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_cmpistrz","","Compares packed strings with implicit lengths in `a` and…",null,[[["__m128i",3]]]],[5,"_mm_crc32_u16","","Starting with the initial value in `crc`, return the…",null,[[]]],[5,"_mm_crc32_u32","","Starting with the initial value in `crc`, return the…",null,[[]]],[5,"_mm_crc32_u64","","Starting with the initial value in `crc`, return the…",null,[[]]],[5,"_mm_crc32_u8","","Starting with the initial value in `crc`, return the…",null,[[]]],[0,"f16c","thermite::arch","",null,null],[0,"avx","","",null,null],[3,"__m256","thermite::arch::avx","256-bit wide set of eight `f32` types, x86-specific",null,null],[3,"__m256d","","256-bit wide set of four `f64` types, x86-specific",null,null],[3,"__m256i","","256-bit wide integer vector type, x86-specific",null,null],[5,"_mm256_add_pd","","Adds packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_add_ps","","Adds packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_addsub_pd","","Alternatively adds and subtracts packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_addsub_ps","","Alternatively adds and subtracts packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_and_pd","","Computes the bitwise AND of a packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_and_ps","","Computes the bitwise AND of packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_andnot_pd","","Computes the bitwise NOT of packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_andnot_ps","","Computes the bitwise NOT of packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_blend_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blend_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_blendv_pd","","Blends packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_blendv_ps","","Blends packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_broadcast_pd","","Broadcasts 128 bits from memory (composed of 2 packed…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcast_ps","","Broadcasts 128 bits from memory (composed of 4 packed…",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_broadcast_sd","","Broadcasts a double-precision (64-bit) floating-point…",null,[[],["__m256d",3]]],[5,"_mm_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[],["__m128",3]]],[5,"_mm256_broadcast_ss","","Broadcasts a single-precision (32-bit) floating-point…",null,[[],["__m256",3]]],[5,"_mm256_castpd_ps","","Cast vector of type __m256d to type __m256.",null,[[["__m256d",3]],["__m256",3]]],[5,"_mm256_castpd_si256","","Casts vector of type __m256d to type __m256i.",null,[[["__m256d",3]],["__m256i",3]]],[5,"_mm256_castpd128_pd256","","Casts vector of type __m128d to type __m256d; the upper…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_castpd256_pd128","","Casts vector of type __m256d to type __m128d.",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_castps_pd","","Cast vector of type __m256 to type __m256d.",null,[[["__m256",3]],["__m256d",3]]],[5,"_mm256_castps_si256","","Casts vector of type __m256 to type __m256i.",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_castps128_ps256","","Casts vector of type __m128 to type __m256; the upper 128…",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_castps256_ps128","","Casts vector of type __m256 to type __m128.",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_castsi128_si256","","Casts vector of type __m128i to type __m256i; the upper…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_castsi256_pd","","Casts vector of type __m256i to type __m256d.",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_castsi256_ps","","Casts vector of type __m256i to type __m256.",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_castsi256_si128","","Casts vector of type __m256i to type __m128i.",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_ceil_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_ceil_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_cmp_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cmp_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_cmp_sd","","Compares the lower double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_cmp_ss","","Compares the lower single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_cvtepi32_pd","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_cvtepi32_ps","","Converts packed 32-bit integers in `a` to packed…",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_cvtpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvtpd_ps","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m128",3]]],[5,"_mm256_cvtps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_cvtps_pd","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m256d",3]]],[5,"_mm256_cvtsd_f64","","Returns the first element of the input vector of `[4 x…",null,[[["__m256d",3]]]],[5,"_mm256_cvtsi256_si32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256i",3]]]],[5,"_mm256_cvtss_f32","","Returns the first element of the input vector of `[8 x…",null,[[["__m256",3]]]],[5,"_mm256_cvttpd_epi32","","Converts packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m128i",3]]],[5,"_mm256_cvttps_epi32","","Converts packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256i",3]]],[5,"_mm256_div_pd","","Computes the division of each of the 4 packed 64-bit…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_div_ps","","Computes the division of each of the 8 packed 32-bit…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_dp_ps","","Conditionally multiplies the packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_extract_epi32","","Extracts a 32-bit integer from `a`, selected with `imm8`.",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi64","","Extracts a 64-bit integer from `a`, selected with `imm8`.",null,[[["__m256i",3]]]],[5,"_mm256_extractf128_pd","","Extracts 128 bits (composed of 2 packed double-precision…",null,[[["__m256d",3]],["__m128d",3]]],[5,"_mm256_extractf128_ps","","Extracts 128 bits (composed of 4 packed single-precision…",null,[[["__m256",3]],["__m128",3]]],[5,"_mm256_extractf128_si256","","Extracts 128 bits (composed of integer data) from `a`,…",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_floor_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_floor_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hadd_pd","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hadd_ps","","Horizontal addition of adjacent pairs in the two packed…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_hsub_pd","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_hsub_ps","","Horizontal subtraction of adjacent pairs in the two packed…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_insert_epi16","","Copies `a` to result, and inserts the 16-bit integer `i`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi32","","Copies `a` to result, and inserts the 32-bit integer `i`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi64","","Copies `a` to result, and insert the 64-bit integer `i`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insert_epi8","","Copies `a` to result, and inserts the 8-bit integer `i`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_insertf128_pd","","Copies `a` to result, then inserts 128 bits (composed of 2…",null,[[["__m256d",3],["__m128d",3]],["__m256d",3]]],[5,"_mm256_insertf128_ps","","Copies `a` to result, then inserts 128 bits (composed of 4…",null,[[["__m128",3],["__m256",3]],["__m256",3]]],[5,"_mm256_insertf128_si256","","Copies `a` to result, then inserts 128 bits from `b` into…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_lddqu_si256","","Loads 256-bits of integer data from unaligned memory into…",null,[[],["__m256i",3]]],[5,"_mm256_load_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d",3]]],[5,"_mm256_load_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256",3]]],[5,"_mm256_load_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i",3]]],[5,"_mm256_loadu_pd","","Loads 256-bits (composed of 4 packed double-precision…",null,[[],["__m256d",3]]],[5,"_mm256_loadu_ps","","Loads 256-bits (composed of 8 packed single-precision…",null,[[],["__m256",3]]],[5,"_mm256_loadu_si256","","Loads 256-bits of integer data from memory into result.…",null,[[],["__m256i",3]]],[5,"_mm256_loadu2_m128","","Loads two 128-bit values (composed of 4 packed…",null,[[],["__m256",3]]],[5,"_mm256_loadu2_m128d","","Loads two 128-bit values (composed of 2 packed…",null,[[],["__m256d",3]]],[5,"_mm256_loadu2_m128i","","Loads two 128-bit values (composed of integer data) from…",null,[[],["__m256i",3]]],[5,"_mm_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm256_maskload_pd","","Loads packed double-precision (64-bit) floating-point…",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm256_maskload_ps","","Loads packed single-precision (32-bit) floating-point…",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m128i",3],["__m128d",3]]]],[5,"_mm256_maskstore_pd","","Stores packed double-precision (64-bit) floating-point…",null,[[["__m256d",3],["__m256i",3]]]],[5,"_mm_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m128i",3],["__m128",3]]]],[5,"_mm256_maskstore_ps","","Stores packed single-precision (32-bit) floating-point…",null,[[["__m256i",3],["__m256",3]]]],[5,"_mm256_max_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_max_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_min_pd","","Compares packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_min_ps","","Compares packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movedup_pd","","Duplicate even-indexed double-precision (64-bit)…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_movehdup_ps","","Duplicate odd-indexed single-precision (32-bit)…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_moveldup_ps","","Duplicate even-indexed single-precision (32-bit)…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_movemask_pd","","Sets each bit of the returned mask based on the most…",null,[[["__m256d",3]]]],[5,"_mm256_movemask_ps","","Sets each bit of the returned mask based on the most…",null,[[["__m256",3]]]],[5,"_mm256_mul_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_mul_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_or_pd","","Computes the bitwise OR packed double-precision (64-bit)…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_or_ps","","Computes the bitwise OR packed single-precision (32-bit)…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_permute_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_permute_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_pd","","Shuffles 256 bits (composed of 4 packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permute2f128_ps","","Shuffles 256 bits (composed of 8 packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_permute2f128_si256","","Shuffles 128-bits (composed of integer data) selected by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_permutevar_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d",3],["__m256i",3]],["__m256d",3]]],[5,"_mm_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m128i",3],["__m128",3]],["__m128",3]]],[5,"_mm256_permutevar_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256i",3],["__m256",3]],["__m256",3]]],[5,"_mm256_rcp_ps","","Computes the approximate reciprocal of packed…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_round_pd","","Rounds packed double-precision (64-bit) floating point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_round_ps","","Rounds packed single-precision (32-bit) floating point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_rsqrt_ps","","Computes the approximate reciprocal square root of packed…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_set_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_set_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_set_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_set_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_set_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_set_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_set_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_set_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[],["__m256d",3]]],[5,"_mm256_set_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[],["__m256",3]]],[5,"_mm256_set1_epi16","","Broadcasts 16-bit integer `a` to all all elements of…",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi32","","Broadcasts 32-bit integer `a` to all elements of returned…",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi64x","","Broadcasts 64-bit integer `a` to all elements of returned…",null,[[],["__m256i",3]]],[5,"_mm256_set1_epi8","","Broadcasts 8-bit integer `a` to all elements of returned…",null,[[],["__m256i",3]]],[5,"_mm256_set1_pd","","Broadcasts double-precision (64-bit) floating-point value…",null,[[],["__m256d",3]]],[5,"_mm256_set1_ps","","Broadcasts single-precision (32-bit) floating-point value…",null,[[],["__m256",3]]],[5,"_mm256_setr_epi16","","Sets packed 16-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi32","","Sets packed 32-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi64x","","Sets packed 64-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_setr_epi8","","Sets packed 8-bit integers in returned vector with the…",null,[[],["__m256i",3]]],[5,"_mm256_setr_m128","","Sets packed __m256 returned vector with the supplied values.",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_setr_m128d","","Sets packed __m256d returned vector with the supplied…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_setr_m128i","","Sets packed __m256i returned vector with the supplied…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_setr_pd","","Sets packed double-precision (64-bit) floating-point…",null,[[],["__m256d",3]]],[5,"_mm256_setr_ps","","Sets packed single-precision (32-bit) floating-point…",null,[[],["__m256",3]]],[5,"_mm256_setzero_pd","","Returns vector of type __m256d with all elements set to…",null,[[],["__m256d",3]]],[5,"_mm256_setzero_ps","","Returns vector of type __m256 with all elements set to zero.",null,[[],["__m256",3]]],[5,"_mm256_setzero_si256","","Returns vector of type __m256i with all elements set to…",null,[[],["__m256i",3]]],[5,"_mm256_shuffle_pd","","Shuffles double-precision (64-bit) floating-point elements…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_shuffle_ps","","Shuffles single-precision (32-bit) floating-point elements…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_sqrt_pd","","Returns the square root of packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sqrt_ps","","Returns the square root of packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_store_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d",3]]]],[5,"_mm256_store_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256",3]]]],[5,"_mm256_store_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i",3]]]],[5,"_mm256_storeu_pd","","Stores 256-bits (composed of 4 packed double-precision…",null,[[["__m256d",3]]]],[5,"_mm256_storeu_ps","","Stores 256-bits (composed of 8 packed single-precision…",null,[[["__m256",3]]]],[5,"_mm256_storeu_si256","","Stores 256-bits of integer data from `a` into memory.…",null,[[["__m256i",3]]]],[5,"_mm256_storeu2_m128","","Stores the high and low 128-bit halves (each composed of 4…",null,[[["__m256",3]]]],[5,"_mm256_storeu2_m128d","","Stores the high and low 128-bit halves (each composed of 2…",null,[[["__m256d",3]]]],[5,"_mm256_storeu2_m128i","","Stores the high and low 128-bit halves (each composed of…",null,[[["__m256i",3]]]],[5,"_mm256_stream_pd","","Moves double-precision values from a 256-bit vector of `[4…",null,[[["__m256d",3]]]],[5,"_mm256_stream_ps","","Moves single-precision floating point values from a…",null,[[["__m256",3]]]],[5,"_mm256_stream_si256","","Moves integer data from a 256-bit integer vector to a…",null,[[["__m256i",3]]]],[5,"_mm256_sub_pd","","Subtracts packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_sub_ps","","Subtracts packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_testc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d",3]]]],[5,"_mm256_testc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d",3]]]],[5,"_mm_testc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128",3]]]],[5,"_mm256_testc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256",3]]]],[5,"_mm256_testc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i",3]]]],[5,"_mm_testnzc_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d",3]]]],[5,"_mm256_testnzc_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d",3]]]],[5,"_mm_testnzc_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128",3]]]],[5,"_mm256_testnzc_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256",3]]]],[5,"_mm256_testnzc_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i",3]]]],[5,"_mm_testz_pd","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128d",3]]]],[5,"_mm256_testz_pd","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256d",3]]]],[5,"_mm_testz_ps","","Computes the bitwise AND of 128 bits (representing…",null,[[["__m128",3]]]],[5,"_mm256_testz_ps","","Computes the bitwise AND of 256 bits (representing…",null,[[["__m256",3]]]],[5,"_mm256_testz_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i",3]]]],[5,"_mm256_undefined_pd","","Returns vector of type `__m256d` with undefined elements.",null,[[],["__m256d",3]]],[5,"_mm256_undefined_ps","","Returns vector of type `__m256` with undefined elements.",null,[[],["__m256",3]]],[5,"_mm256_undefined_si256","","Returns vector of type __m256i with undefined elements.",null,[[],["__m256i",3]]],[5,"_mm256_unpackhi_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpackhi_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_unpacklo_pd","","Unpacks and interleave double-precision (64-bit)…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_unpacklo_ps","","Unpacks and interleave single-precision (32-bit)…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_xor_pd","","Computes the bitwise XOR of packed double-precision…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_xor_ps","","Computes the bitwise XOR of packed single-precision…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm256_zeroall","","Zeroes the contents of all XMM or YMM registers.",null,[[]]],[5,"_mm256_zeroupper","","Zeroes the upper 128 bits of all YMM registers; the lower…",null,[[]]],[5,"_mm256_zextpd128_pd256","","Constructs a 256-bit floating-point vector of `[4 x…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_zextps128_ps256","","Constructs a 256-bit floating-point vector of `[8 x…",null,[[["__m128",3]],["__m256",3]]],[5,"_mm256_zextsi128_si256","","Constructs a 256-bit integer vector from a 128-bit integer…",null,[[["__m128i",3]],["__m256i",3]]],[0,"fma","thermite::arch","",null,null],[5,"_mm_fmadd_pd","thermite::arch::fma","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmaddsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmaddsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fmsubadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fmsubadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmadd_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmadd_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmadd_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmadd_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_fnmsub_pd","","Multiplies packed double-precision (64-bit) floating-point…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_fnmsub_ps","","Multiplies packed single-precision (32-bit) floating-point…",null,[[["__m256",3]],["__m256",3]]],[5,"_mm_fnmsub_sd","","Multiplies the lower double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm_fnmsub_ss","","Multiplies the lower single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[0,"avx2","thermite::arch","",null,null],[5,"_mm256_abs_epi16","thermite::arch::avx2","Computes the absolute values of packed 16-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi32","","Computes the absolute values of packed 32-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_abs_epi8","","Computes the absolute values of packed 8-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi16","","Adds packed 16-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi32","","Adds packed 32-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi64","","Adds packed 64-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_add_epi8","","Adds packed 8-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi16","","Adds packed 16-bit integers in `a` and `b` using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epi8","","Adds packed 8-bit integers in `a` and `b` using saturation.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu16","","Adds packed unsigned 16-bit integers in `a` and `b` using…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_adds_epu8","","Adds packed unsigned 8-bit integers in `a` and `b` using…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_alignr_epi8","","Concatenates pairs of 16-byte blocks in `a` and `b` into a…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_and_si256","","Computes the bitwise AND of 256 bits (representing integer…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_andnot_si256","","Computes the bitwise NOT of 256 bits (representing integer…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu16","","Averages packed unsigned 16-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_avg_epu8","","Averages packed unsigned 8-bit integers in `a` and `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blend_epi16","","Blends packed 16-bit integers from `a` and `b` using…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_blend_epi32","","Blends packed 32-bit integers from `a` and `b` using…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_blendv_epi8","","Blends packed 8-bit integers from `a` and `b` using `mask`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastb_epi8","","Broadcasts the low packed 8-bit integer from `a` to all…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastd_epi32","","Broadcasts the low packed 32-bit integer from `a` to all…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastq_epi64","","Broadcasts the low packed 64-bit integer from `a` to all…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d",3]],["__m128d",3]]],[5,"_mm256_broadcastsd_pd","","Broadcasts the low double-precision (64-bit)…",null,[[["__m128d",3]],["__m256d",3]]],[5,"_mm256_broadcastsi128_si256","","Broadcasts 128 bits of integer data from a to all 128-bit…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128",3]],["__m128",3]]],[5,"_mm256_broadcastss_ps","","Broadcasts the low single-precision (32-bit)…",null,[[["__m128",3]],["__m256",3]]],[5,"_mm_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_broadcastw_epi16","","Broadcasts the low packed 16-bit integer from a to all…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_bslli_epi128","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_bsrli_epi128","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi16","","Compares packed 16-bit integers in `a` and `b` for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi32","","Compares packed 32-bit integers in `a` and `b` for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi64","","Compares packed 64-bit integers in `a` and `b` for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpeq_epi8","","Compares packed 8-bit integers in `a` and `b` for equality.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi16","","Compares packed 16-bit integers in `a` and `b` for…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi32","","Compares packed 32-bit integers in `a` and `b` for…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi64","","Compares packed 64-bit integers in `a` and `b` for…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cmpgt_epi8","","Compares packed 8-bit integers in `a` and `b` for…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi32","","Sign-extend 16-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi16_epi64","","Sign-extend 16-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi32_epi64","","Sign-extend 32-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi16","","Sign-extend 8-bit integers to 16-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi32","","Sign-extend 8-bit integers to 32-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepi8_epi64","","Sign-extend 8-bit integers to 64-bit integers.",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi32","","Zeroes extend packed unsigned 16-bit integers in `a` to…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu16_epi64","","Zero-extend the lower four unsigned 16-bit integers in `a`…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu32_epi64","","Zero-extend unsigned 32-bit integers in `a` to 64-bit…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi16","","Zero-extend unsigned 8-bit integers in `a` to 16-bit…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi32","","Zero-extend the lower eight unsigned 8-bit integers in `a`…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_cvtepu8_epi64","","Zero-extend the lower four unsigned 8-bit integers in `a`…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_extract_epi16","","Extracts a 16-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i",3]]]],[5,"_mm256_extract_epi8","","Extracts an 8-bit integer from `a`, selected with `imm8`.…",null,[[["__m256i",3]]]],[5,"_mm256_extracti128_si256","","Extracts 128 bits (of integer data) from `a` selected with…",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_hadd_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadd_epi32","","Horizontally adds adjacent pairs of 32-bit integers in `a`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hadds_epi16","","Horizontally adds adjacent pairs of 16-bit integers in `a`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsub_epi32","","Horizontally subtract adjacent pairs of 32-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_hsubs_epi16","","Horizontally subtract adjacent pairs of 16-bit integers in…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m256i",3]]],[5,"_mm256_mask_i32gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m256d",3]]],[5,"_mm256_mask_i32gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d",3],["__m128i",3]],["__m256d",3]]],[5,"_mm_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3],["__m128",3]],["__m128",3]]],[5,"_mm256_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256",3]]],[5,"_mm256_mask_i32gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3],["__m256",3]],["__m256",3]]],[5,"_mm_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m128i",3]]],[5,"_mm256_mask_i64gather_epi32","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3],["__m256i",3]],["__m128i",3]]],[5,"_mm_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mask_i64gather_epi64","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128d",3]]],[5,"_mm_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m128d",3],["__m128i",3]],["__m128d",3]]],[5,"_mm256_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m256d",3]]],[5,"_mm256_mask_i64gather_pd","","Returns values from `slice` at offsets determined by…",null,[[["__m256d",3],["__m256i",3]],["__m256d",3]]],[5,"_mm_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3]],["__m128",3]]],[5,"_mm_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m128i",3],["__m128",3]],["__m128",3]]],[5,"_mm256_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3]],["__m128",3]]],[5,"_mm256_mask_i64gather_ps","","Returns values from `slice` at offsets determined by…",null,[[["__m256i",3],["__m128",3]],["__m128",3]]],[5,"_mm256_inserti128_si256","","Copies `a` to `dst`, then insert 128 bits (of integer…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_madd_epi16","","Multiplies packed signed 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_maddubs_epi16","","Vertically multiplies each unsigned 8-bit integer from `a`…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi32","","Loads packed 32-bit integers from memory pointed by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_maskload_epi64","","Loads packed 64-bit integers from memory pointed by…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi32","","Stores packed 32-bit integers from `a` into memory pointed…",null,[[["__m256i",3]]]],[5,"_mm_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m128i",3]]]],[5,"_mm256_maskstore_epi64","","Stores packed 64-bit integers from `a` into memory pointed…",null,[[["__m256i",3]]]],[5,"_mm256_max_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_max_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi16","","Compares packed 16-bit integers in `a` and `b`, and…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi32","","Compares packed 32-bit integers in `a` and `b`, and…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epi8","","Compares packed 8-bit integers in `a` and `b`, and returns…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu16","","Compares packed unsigned 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu32","","Compares packed unsigned 32-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_min_epu8","","Compares packed unsigned 8-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_movemask_epi8","","Creates mask from the most significant bit of each 8-bit…",null,[[["__m256i",3]]]],[5,"_mm256_mpsadbw_epu8","","Computes the sum of absolute differences (SADs) of…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epi32","","Multiplies the low 32-bit integers from each packed 64-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mul_epu32","","Multiplies the low unsigned 32-bit integers from each…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhi_epu16","","Multiplies the packed unsigned 16-bit integers in `a` and…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mulhrs_epi16","","Multiplies packed 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi16","","Multiplies the packed 16-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_mullo_epi32","","Multiplies the packed 32-bit integers in `a` and `b`,…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_or_si256","","Computes the bitwise OR of 256 bits (representing integer…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packs_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi16","","Converts packed 16-bit integers from `a` and `b` to packed…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_packus_epi32","","Converts packed 32-bit integers from `a` and `b` to packed…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute2x128_si256","","Shuffles 128-bits of integer data selected by `imm8` from…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_epi64","","Permutes 64-bit integers from `a` using control mask `imm8`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permute4x64_pd","","Shuffles 64-bit floating-point elements in `a` across…",null,[[["__m256d",3]],["__m256d",3]]],[5,"_mm256_permutevar8x32_epi32","","Permutes packed 32-bit integers from `a` according to the…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_permutevar8x32_ps","","Shuffles eight 32-bit foating-point elements in `a` across…",null,[[["__m256i",3],["__m256",3]],["__m256",3]]],[5,"_mm256_sad_epu8","","Computes the absolute differences of packed unsigned 8-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi32","","Shuffles 32-bit integers in 128-bit lanes of `a` using the…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shuffle_epi8","","Shuffles bytes from `a` according to the content of `b`.",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflehi_epi16","","Shuffles 16-bit integers in the high 64 bits of 128-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_shufflelo_epi16","","Shuffles 16-bit integers in the low 64 bits of 128-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi16","","Negates packed 16-bit integers in `a` when the…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi32","","Negates packed 32-bit integers in `a` when the…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sign_epi8","","Negates packed 8-bit integers in `a` when the…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi16","","Shifts packed 16-bit integers in `a` left by `count` while…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi32","","Shifts packed 32-bit integers in `a` left by `count` while…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sll_epi64","","Shifts packed 64-bit integers in `a` left by `count` while…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi16","","Shifts packed 16-bit integers in `a` left by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi32","","Shifts packed 32-bit integers in `a` left by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_epi64","","Shifts packed 64-bit integers in `a` left by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_slli_si256","","Shifts 128-bit lanes in `a` left by `imm8` bytes while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi32","","Shifts packed 32-bit integers in `a` left by the amount…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_sllv_epi64","","Shifts packed 64-bit integers in `a` left by the amount…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_sra_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srai_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srav_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi16","","Shifts packed 16-bit integers in `a` right by `count`…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi32","","Shifts packed 32-bit integers in `a` right by `count`…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srl_epi64","","Shifts packed 64-bit integers in `a` right by `count`…",null,[[["__m128i",3],["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi16","","Shifts packed 16-bit integers in `a` right by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi32","","Shifts packed 32-bit integers in `a` right by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_epi64","","Shifts packed 64-bit integers in `a` right by `imm8` while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_srli_si256","","Shifts 128-bit lanes in `a` right by `imm8` bytes while…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi32","","Shifts packed 32-bit integers in `a` right by the amount…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m128i",3]],["__m128i",3]]],[5,"_mm256_srlv_epi64","","Shifts packed 64-bit integers in `a` right by the amount…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi32","","Subtract packed 32-bit integers in `b` from packed 32-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi64","","Subtract packed 64-bit integers in `b` from packed 64-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_sub_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi16","","Subtract packed 16-bit integers in `b` from packed 16-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epi8","","Subtract packed 8-bit integers in `b` from packed 8-bit…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu16","","Subtract packed unsigned 16-bit integers in `b` from…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_subs_epu8","","Subtract packed unsigned 8-bit integers in `b` from packed…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi16","","Unpacks and interleave 16-bit integers from the high half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi32","","Unpacks and interleave 32-bit integers from the high half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi64","","Unpacks and interleave 64-bit integers from the high half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpackhi_epi8","","Unpacks and interleave 8-bit integers from the high half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi16","","Unpacks and interleave 16-bit integers from the low half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi32","","Unpacks and interleave 32-bit integers from the low half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi64","","Unpacks and interleave 64-bit integers from the low half…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_unpacklo_epi8","","Unpacks and interleave 8-bit integers from the low half of…",null,[[["__m256i",3]],["__m256i",3]]],[5,"_mm256_xor_si256","","Computes the bitwise XOR of 256 bits (representing integer…",null,[[["__m256i",3]],["__m256i",3]]],[11,"alloc","thermite","Allocates a new SIMD-aligned element buffer and zeroes the…",1,[[]]],[11,"gather","","Gathers values from the buffer using more efficient…",1,[[]]],[11,"fill","","Fills the buffer with vectors using aligned stores",1,[[]]],[11,"len","","",1,[[]]],[11,"len_vectors","","",1,[[]]],[11,"as_slice","","",1,[[]]],[11,"as_vector_slice","","",1,[[]]],[11,"as_mut_slice","","",1,[[]]],[11,"as_mut_vector_slice","","",1,[[]]],[11,"load_vector","","",1,[[]]],[11,"store_vector","","",1,[[]]],[0,"backends","","",null,null],[0,"polyfills","thermite::backends","",null,null],[5,"_mm_shuffle","thermite::backends::polyfills","",null,[[]]],[0,"avx1","thermite::backends","",null,null],[3,"AVX1","thermite::backends::avx1","",null,null],[0,"avx2","thermite::backends","",null,null],[3,"f32x8","thermite::backends::avx2","",null,null],[3,"f64x8","","",null,null],[3,"i32x8","","",null,null],[3,"i64x8","","",null,null],[3,"u32x8","","",null,null],[3,"u64x8","","",null,null],[3,"AVX2","","",null,null],[0,"sse2","thermite::backends","",null,null],[0,"sse42","","",null,null],[11,"multiplier","thermite","",2,[[]]],[11,"shift","","",2,[[]]],[11,"u8","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u8","","See docs for [`Divider`]",2,[[]]],[11,"u8_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u16","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u16","","See docs for [`Divider`]",2,[[]]],[11,"u16_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u32","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u32","","See docs for [`Divider`]",2,[[]]],[11,"u32_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"u64","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"u64","","See docs for [`Divider`]",2,[[]]],[11,"u64_branchfree","","See docs for [`BranchfreeDivider`] and [`Divider`]",2,[[],["branchfreedivider",3]]],[11,"i8","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i16","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i32","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"i64","","See docs for [`BranchfreeDivider`] and [`Divider`]",3,[[]]],[11,"splat","","",4,[[]]],[11,"add","","",4,[[]]],[11,"is_null","","",4,[[],["mask",3]]],[11,"read","","",4,[[],["associatedvector",6]]],[11,"read_masked","","",4,[[["mask",3],["associatedvector",6]],["associatedvector",6]]],[11,"write","","",4,[[["associatedvector",6]]]],[11,"write_masked","","",4,[[["mask",3],["associatedvector",6]]]],[11,"truthy","","Create a bitmask for this vector type of all true bits",5,[[]]],[11,"falsey","","Create a bitmask with all false bits",5,[[]]],[11,"raw","","",5,[[]]],[11,"all","","Return true if all lanes for this vector type are set to…",5,[[]]],[11,"any","","Return true if any lane for this vector type is set to true",5,[[]]],[11,"none","","Return true if no lanes for this vector type are set to true",5,[[]]],[11,"count","","Count the number of set bits",5,[[]]],[11,"value","","",6,[[]]],[11,"truthy","","Mask vector containing all true/non-zero lanes.",6,[[]]],[11,"falsey","","Mask vector containing all zero/false lanes.",6,[[]]],[11,"from_value","","Creates a mask from a value. Any non-zero lanes are…",6,[[]]],[11,"cast_to","","",6,[[],[["simdfromcast",8],["mask",3]]]],[18,"FULL_BITMASK","","Bitmask indicating all truthy values for each lane",6,null],[11,"and_not","","Computes `!self & other` for each lane of the mask.",6,[[]]],[11,"bitmask","","Returns a bitmask that can be trivially evaluated to…",6,[[],["bitmask",3]]],[11,"from_bitmask","","Creates a wide SIMD mask from a single-bit bitmask",6,[[]]],[11,"all","","Returns `true` if all lanes are truthy",6,[[]]],[11,"any","","Returns `true` if any lanes are truthy",6,[[]]],[11,"none","","Returns `true` if all lanes are falsey",6,[[]]],[11,"count","","Counts the number of truthy lanes",6,[[]]],[11,"select","","For each lane, selects from `t` if the mask lane is…",6,[[]]],[0,"math","","Vectorized Math Library",null,null],[0,"complex","thermite::math","Complex Number Vectors",null,null],[3,"Complex","thermite::math::complex","",null,null],[12,"re","","",7,null],[12,"im","","",7,null],[11,"new","","",7,[[]]],[11,"splat","","Creates a new Complex with all lanes of `re` and `im` set…",7,[[]]],[11,"real","","Create a new Complex",7,[[]]],[11,"i","","Returns imaginary unit",7,[[]]],[11,"one","","real(1)",7,[[]]],[11,"zero","","real(0)",7,[[]]],[11,"norm_sqr","","Returns the square of the norm",7,[[]]],[11,"norm","","Calculate |self|",7,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",7,[[]]],[11,"unscale","","Divides `self` by the scalar `t`.",7,[[]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,[[]]],[11,"inv","","Returns `1/self`",7,[[]]],[11,"mul_add","","",7,[[]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the Manhattan…",7,[[]]],[11,"arg","","Calculate the principal Arg of self.",7,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",7,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",7,[[]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",7,[[]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,[[]]],[11,"sqrt","","",7,[[]]],[11,"cbrt","","",7,[[]]],[11,"powf","","Raises `self` to a floating point power.",7,[[]]],[11,"log","","Returns the logarithm of `self` with respect to an…",7,[[]]],[11,"powc","","Raises `self` to a complex power.",7,[[]]],[11,"expf","","Raises a floating point number to the complex power `self`.",7,[[]]],[11,"sin","","Computes the sine of `self`.",7,[[]]],[11,"cos","","Computes the cosine of `self`.",7,[[]]],[11,"tan","","Computes the tangent of `self`.",7,[[]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of…",7,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of…",7,[[]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,[[]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,[[]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",7,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",7,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",7,[[]]],[11,"finv","","Returns `1/self` using floating-point operations.",7,[[]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",7,[[]]],[0,"poly","thermite::math","Optimized fixed-degree polynomial evaluation",null,null],[5,"poly_1","thermite::math::poly","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_2","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_3","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_4","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_5","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_6","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_7","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_8","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_9","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_10","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_11","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_12","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_13","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_14","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_15","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[5,"poly_30","","",null,[[["simd",8],["simdfloatvector",8]],[["simd",8],["simdfloatvector",8]]]],[8,"SimdVectorizedMath","thermite::math","Set of vectorized special functions optimized for both…",null,null],[10,"scale","","Scales values between `in_min` and `in_max`, to between…",8,[[]]],[10,"lerp","","Linearly interpolates between `a` and `b` using `self`",8,[[]]],[10,"fmod","","Returns the floating-point remainder of `self / y`…",8,[[]]],[10,"hypot","","Computes `sqrt(x * x + y * y)` for each element of the…",8,[[]]],[10,"poly","","Computes the sum `Σ(coefficients[i] * x^i)` from `i=0` to…",8,[[]]],[10,"poly_f","","Computes the sum `Σ(f(i)*x^i)` from `i=0` to `n`",8,[[]]],[10,"sin","","Computes the sine of a vector.",8,[[]]],[10,"cos","","Computes the cosine of a vector.",8,[[]]],[10,"tan","","Computes the tangent of a vector.",8,[[]]],[10,"sin_cos","","Computes both the sine and cosine of a vector together…",8,[[]]],[10,"sinh","","Computes the hyperbolic-sine of a vector.",8,[[]]],[10,"cosh","","Computes the hyperbolic-cosine of a vector.",8,[[]]],[10,"tanh","","Computes the hyperbolic-tangent of a vector.",8,[[]]],[10,"asinh","","Computes the hyperbolic-arcsine of a vector.",8,[[]]],[10,"acosh","","Computes the hyperbolic-arccosine of a vector.",8,[[]]],[10,"atanh","","Computes the hyperbolic-arctangent of a vector.",8,[[]]],[10,"asin","","Computes the arcsine of a vector.",8,[[]]],[10,"acos","","Computes the arccosine of a vector.",8,[[]]],[10,"atan","","Computes the arctangent of a vector.",8,[[]]],[10,"atan2","","Computes the four quadrant arc-tangent of `y`(`self`) and…",8,[[]]],[10,"exp","","The exponential function, returns `e^(self)`",8,[[]]],[10,"exph","","Half-exponential function, returns `0.5 * e^(self)`",8,[[]]],[10,"exp2","","Binary exponential function, returns `2^(self)`",8,[[]]],[10,"exp10","","Base-10 exponential function, returns `10^(self)`",8,[[]]],[10,"exp_m1","","Exponential function minus one, `e^(self) - 1.0`, special…",8,[[]]],[10,"cbrt","","Computes the cubic-root of each lane in a vector.",8,[[]]],[10,"powf","","Computes `x^e` where `x` is `self` and `e` is a vector of…",8,[[]]],[10,"powiv","","Computes `x^e` where `x` is `self` and `e` is a vector of…",8,[[]]],[10,"powi","","Computes `x^e` where `x` is `self` and `e` is a signed…",8,[[]]],[10,"ln","","Computes the natural logarithm of a vector.",8,[[]]],[10,"ln_1p","","Computes `ln(1+x)` where `x` is `self`, more accurately…",8,[[]]],[10,"log2","","Computes the base-2 logarithm of a vector",8,[[]]],[10,"log10","","Computes the base-10 logarithm of a vector",8,[[]]],[10,"erf","","Computes the error function for each value in a vector.",8,[[]]],[10,"erfinv","","Computes the inverse error function for each value in a…",8,[[]]],[10,"tgamma","","Computes the Gamma function (`Γ(z)`) for any real input,…",8,[[]]],[10,"next_float","","Finds the next representable float moving upwards to…",8,[[]]],[10,"prev_float","","Finds the previous representable float moving downwards to…",8,[[]]],[10,"smoothstep","","Calculates a sigmoid-like 3rd-order interpolation function.",8,[[]]],[10,"smootherstep","","Calculates a sigmoid-like 5th-order interpolation function.",8,[[]]],[10,"smootheststep","","Calculates a sigmoid-like 7th-order interpolation function.",8,[[]]],[10,"hermite","","Computes the n-th degree physicists\' Hermite polynomial…",8,[[]]],[10,"hermitev","","Computes the n-th degree physicists\' Hermite polynomial…",8,[[]]],[10,"jacobi","","Computes the n-th degree Jacobi polynomial via the 3-term…",8,[[]]],[10,"jacobi_d","","Computes the m-th derivative of an n-th degree Jacobi…",8,[[]]],[10,"legendre_p","","Computes the m-th associated n-th degree Legendre…",8,[[]]],[0,"rng","thermite","",null,null],[0,"pcg32","thermite::rng","",null,null],[3,"PCG32","thermite::rng::pcg32","",null,null],[11,"new","","",9,[[["vu64",6]]]],[0,"xoshiro","thermite::rng","",null,null],[3,"SplitMix64","thermite::rng::xoshiro","",null,null],[3,"Xoshiro128Plus","","",null,null],[3,"Xoshiro256Plus","","",null,null],[11,"new","","",10,[[["vu64",6]]]],[11,"new","","",11,[[["vu64",6]]]],[11,"new","","",12,[[["vu64",6]]]],[8,"SimdRng","thermite::rng","",null,null],[10,"reseed","","",13,[[["vu64",6]]]],[11,"next_u32","","",13,[[],["vu32",6]]],[11,"next_u64","","",13,[[],["vu64",6]]],[11,"next_f32","","",13,[[],["vf32",6]]],[11,"next_f64","","",13,[[],["vf64",6]]],[6,"AssociatedVector","thermite","Associated vector type for a scalar type",null,null],[6,"Vi32","","",null,null],[6,"Vi64","","",null,null],[6,"Vu32","","",null,null],[6,"Vu64","","",null,null],[6,"Vf32","","",null,null],[6,"Vf64","","",null,null],[6,"Vusize","","",null,null],[6,"Visize","","",null,null],[8,"SimdFromCast","","Describes casting from one SIMD vector type to another",null,null],[10,"from_cast","","Casts one vector to another, performing proper numeric…",14,[[]]],[10,"from_cast_mask","","Casts one mask to another, not caring about the value…",14,[[["mask",3]],["mask",3]]],[8,"SimdCastTo","","Describes casting to one SIMD vector type from another",null,null],[10,"cast","","Casts one vector to another, performing proper numeric…",15,[[]]],[10,"cast_mask","","Casts one mask to another, not caring about the value…",15,[[["mask",3]],["mask",3]]],[8,"SimdCasts","","List of valid casts between SIMD types in an instruction set",null,null],[11,"cast_to","","",16,[[],["simdfromcast",8]]],[8,"SimdElement","","Umbrella trait for SIMD vector element bounds",null,null],[8,"SimdShuffleIndices","","Helper trait for constant vector shuffles",null,null],[18,"INDICES","","",17,null],[8,"SimdVectorBase","","Basic shared vector interface",null,null],[16,"Element","","",18,null],[18,"ELEMENT_SIZE","","Size of element type in bytes",18,null],[18,"NUM_ELEMENTS","","",18,null],[18,"ALIGNMENT","","",18,null],[10,"splat","","Creates a new vector with all lanes set to the given value",18,[[]]],[11,"undefined","","Returns a vector containing possibly undefined or…",18,[[]]],[11,"splat_any","","Same as `splat`, but is more convenient for initializing…",18,[[]]],[11,"shuffle","","Shuffles between two vectors based on the static indices…",18,[[["simdshuffleindices",8]]]],[10,"shuffle_unchecked","","Shuffles between two vectors based on the static indices…",18,[[["simdshuffleindices",8]]]],[11,"shuffle_dyn","","Shuffles between two vectors based on the dynamic indices…",18,[[]]],[11,"shuffle_dyn_unchecked","","Like [`Self::shuffle_dyn`], but does not check for valid…",18,[[]]],[11,"alloc","","",18,[[],["vectorbuffer",3]]],[11,"extract","","Extracts an element at the given lane index.",18,[[]]],[11,"replace","","Returns a new vector with the given value at the given…",18,[[]]],[10,"extract_unchecked","","Extracts an element at the given lane index.",18,[[]]],[10,"replace_unchecked","","Returns a new vector with the given value at the given…",18,[[]]],[11,"load_aligned","","Loads a vector from a slice that has an alignment of at…",18,[[]]],[11,"load_unaligned","","Loads a vector from a slice",18,[[]]],[11,"store_aligned","","Stores a vector into a slice with an alignment of at least…",18,[[]]],[11,"store_unaligned","","Stores a vector into a slice.",18,[[]]],[11,"load_aligned_unchecked","","Loads a vector from the given aligned address.",18,[[]]],[11,"store_aligned_unchecked","","Stores a vector to the given aligned address.",18,[[]]],[11,"load_unaligned_unchecked","","Loads a vector from a given address (does not have to be…",18,[[]]],[11,"store_unaligned_unchecked","","Stores a vector to a given address (does not have to be…",18,[[]]],[11,"gather_unchecked","","",18,[[]]],[11,"scatter_unchecked","","",18,[[]]],[11,"gather_masked_unchecked","","Like `Self::gather`, but individual lanes are loaded based…",18,[[["mask",3]]]],[11,"scatter_masked_unchecked","","Like `self.scatter()`, but individual lanes are stored…",18,[[["mask",3]]]],[8,"SimdBitwise","","Defines bitwise operations on vectors",null,null],[11,"and_not","","Computes `!self & other`, may be more performant than the…",19,[[]]],[18,"FULL_BITMASK","","Bitmask corresponding to all lanes of the mask being truthy.",19,null],[10,"bitmask","","Returns an integer where each bit corresponds to the…",19,[[]]],[8,"SimdVector","","Defines common operations on numeric vectors",null,null],[11,"gather","","Loads values from arbitrary addresses in memory based on…",20,[[]]],[11,"scatter","","Stores values to arbitrary addresses in memory based on…",20,[[]]],[11,"gather_masked","","",20,[[["mask",3]]]],[11,"scatter_masked","","",20,[[["mask",3]]]],[10,"zero","","",20,[[]]],[10,"one","","",20,[[]]],[10,"indexed","","Returns a vector where the first lane is zero, and each…",20,[[]]],[10,"min_value","","Maximum representable valid value",20,[[]]],[10,"max_value","","Minimum representable valid value (may be negative)",20,[[]]],[11,"min","","Per-lane, select the minimum value",20,[[]]],[11,"max","","Per-lane, select the maximum value",20,[[]]],[10,"min_element","","Find the minimum value across all lanes",20,[[]]],[10,"max_element","","Find the maximum value across all lanes",20,[[]]],[10,"eq","","",20,[[],["mask",3]]],[10,"gt","","",20,[[],["mask",3]]],[11,"ne","","",20,[[],["mask",3]]],[11,"lt","","",20,[[],["mask",3]]],[11,"le","","",20,[[],["mask",3]]],[11,"ge","","",20,[[],["mask",3]]],[8,"SimdIntoBits","","Transmutations into raw bits",null,null],[11,"into_bits","","",21,[[]]],[8,"SimdFromBits","","Transmutations from raw bits",null,null],[11,"from_bits","","",22,[[]]],[8,"SimdIntegerDivision","","Specialized integer division by [`Divider`]s",null,null],[8,"SimdIntVector","","Integer SIMD vectors",null,null],[10,"saturating_add","","Saturating addition, will not wrap",23,[[]]],[10,"saturating_sub","","Saturating subtraction, will not wrap",23,[[]]],[10,"wrapping_sum","","Sum all lanes together, wrapping the result if it can\'t…",23,[[]]],[10,"wrapping_product","","Multiply all lanes together, wrapping the result if it…",23,[[]]],[11,"rol","","Rotates the bits in each lane to the left (towards HSB) by…",23,[[]]],[11,"ror","","Rotates the bits in each lane to the right (towards LSB)…",23,[[]]],[10,"rolv","","Rotates the bits in each lane to the left (towards HSB) by…",23,[[]]],[10,"rorv","","Rotates the bits in each lane to the right (towards LSB)…",23,[[]]],[10,"reverse_bits","","Reverses the bits of each lane in the vector.",23,[[]]],[10,"count_ones","","Counts the number of 1 bits in each lane of the vector.",23,[[]]],[11,"count_zeros","","Counts the number of 0 bits in each lane of the vector.",23,[[]]],[10,"leading_zeros","","Counts the number of leading zeros in each lane of the…",23,[[]]],[10,"trailing_zeros","","Counts the number of trailing zeros in each lane of the…",23,[[]]],[11,"leading_ones","","Counts the number of leading ones in each lane of the…",23,[[]]],[11,"trailing_ones","","Counts the number of trailing ones in each lane of the…",23,[[]]],[8,"SimdUnsignedIntVector","","Unsigned SIMD vector",null,null],[11,"log2p1","","Returns `floor(log2(x)) + 1`",24,[[]]],[11,"is_power_of_two","","Returns a mask wherein if a lane was a power of two, the…",24,[[],["mask",3]]],[10,"next_power_of_two_m1","","Returns `next_power_of_two(x) - 1`",24,[[]]],[8,"SimdSignedVector","","Signed SIMD vector, with negative numbers",null,null],[10,"neg_one","","",25,[[]]],[10,"min_positive","","Minimum positive number",25,[[]]],[11,"abs","","Absolute value",25,[[]]],[11,"copysign","","Copies the sign from `sign` to `self`",25,[[]]],[11,"signum","","Returns `-1` if less than zero, `+1` otherwise.",25,[[]]],[11,"is_positive","","Test if positive, greater or equal to zero",25,[[],["mask",3]]],[11,"is_negative","","Test if negative, less than zero",25,[[],["mask",3]]],[11,"select_negative","","On platforms with true \\\"select\\\" instructions, they often…",25,[[]]],[8,"SimdFloatVector","","Floating point SIMD vectors",null,null],[16,"Vi","","",26,null],[16,"Vu","","",26,null],[10,"epsilon","","",26,[[]]],[10,"infinity","","",26,[[]]],[10,"neg_infinity","","",26,[[]]],[10,"neg_zero","","",26,[[]]],[10,"nan","","",26,[[]]],[11,"load_f16_unaligned","","Load half-precision floats and up-convert them into `Self`",26,[[]]],[11,"store_f16_unaligned","","Down-convert `self` into half-precision and store",26,[[]]],[10,"load_f16_unaligned_unchecked","","",26,[[]]],[10,"store_f16_unaligned_unchecked","","",26,[[]]],[10,"to_int_fast","","Can convert to a signed integer faster than a regular…",26,[[]]],[10,"to_uint_fast","","Can convert to a signed integer faster than a regular…",26,[[]]],[11,"combine_sign","","Same as `self * sign.signum()` or `select(sign_bit(sign),…",26,[[]]],[10,"sum","","Compute the horizontal sum of all elements",26,[[]]],[10,"product","","Compute the horizontal product of all elements",26,[[]]],[10,"mul_add","","Fused multiply-add",26,[[]]],[11,"mul_sub","","Fused multiply-subtract",26,[[]]],[11,"nmul_add","","Fused negated multiply-add",26,[[]]],[11,"nmul_sub","","Fused negated multiply-subtract",26,[[]]],[10,"round","","",26,[[]]],[10,"ceil","","",26,[[]]],[10,"floor","","",26,[[]]],[10,"trunc","","",26,[[]]],[11,"fract","","",26,[[]]],[10,"sqrt","","",26,[[]]],[11,"rsqrt","","Compute the approximate reciprocal of the square root `(1…",26,[[]]],[11,"rsqrt_precise","","A more precise `1 / sqrt(x)` variation, which may use…",26,[[]]],[11,"rcp","","Computes the approximate reciprocal/inverse of each value",26,[[]]],[11,"rcp_precise","","A more precise `1 / x` variation, which may use faster…",26,[[]]],[11,"approx_eq","","",26,[[],["mask",3]]],[11,"clamp","","",26,[[]]],[11,"saturate","","Clamps self to between 0 and 1",26,[[]]],[11,"is_finite","","",26,[[],["mask",3]]],[11,"is_infinite","","",26,[[],["mask",3]]],[11,"is_normal","","",26,[[],["mask",3]]],[10,"is_subnormal","","",26,[[],["mask",3]]],[11,"is_zero_or_subnormal","","",26,[[],["mask",3]]],[11,"is_nan","","",26,[[],["mask",3]]],[8,"SimdPointer","","Guarantees the vector can be used as a pointer in `VPtr`",null,null],[8,"Simd","","SIMD Instruction set, contains all types",null,null],[18,"INSTRSET","","",27,null],[16,"Vi32","","32-bit signed integer vector",27,null],[16,"Vi64","","64-bit signed integer vector",27,null],[16,"Vu32","","32-bit unsigned integer vector",27,null],[16,"Vu64","","64-bit unsigned integer vector",27,null],[16,"Vf32","","Single-precision 32-bit floating point vector",27,null],[16,"Vf64","","Double-precision 64-bit floating point vector",27,null],[16,"Vusize","","",27,null],[16,"Visize","","",27,null],[11,"has_true_fma","","True fused multiply-add instructions are only used on AVX2…",0,[[]]],[11,"has_emulated_fma","","On older platforms, fused multiply-add instructions can be…",0,[[]]],[14,"shuffle","","Shuffles the elements in one or two vectors into a new…",null,null],[11,"from_cast","","",1,[[]]],[11,"from_cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"cast","","",1,[[]]],[11,"cast_mask","","",1,[[["mask",3]],["mask",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from_cast","","",2,[[]]],[11,"from_cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"cast","","",2,[[]]],[11,"cast_mask","","",2,[[["mask",3]],["mask",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from_cast","","",3,[[]]],[11,"from_cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"cast","","",3,[[]]],[11,"cast_mask","","",3,[[["mask",3]],["mask",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from_cast","","",4,[[]]],[11,"from_cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"cast","","",4,[[]]],[11,"cast_mask","","",4,[[["mask",3]],["mask",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from_cast","","",5,[[]]],[11,"from_cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"cast","","",5,[[]]],[11,"cast_mask","","",5,[[["mask",3]],["mask",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from_cast","","",6,[[]]],[11,"from_cast_mask","","",6,[[["mask",3]],["mask",3]]],[11,"cast","","",6,[[]]],[11,"cast_mask","","",6,[[["mask",3]],["mask",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from_cast","","",0,[[]]],[11,"from_cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"cast","","",0,[[]]],[11,"cast_mask","","",0,[[["mask",3]],["mask",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from_cast","thermite::arch::sse","",28,[[]]],[11,"from_cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"cast","","",28,[[]]],[11,"cast_mask","","",28,[[["mask",3]],["mask",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"from_cast","","",29,[[]]],[11,"from_cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"cast","","",29,[[]]],[11,"cast_mask","","",29,[[["mask",3]],["mask",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"from_cast","","",30,[[]]],[11,"from_cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"cast","","",30,[[]]],[11,"cast_mask","","",30,[[["mask",3]],["mask",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"from_cast","thermite::arch::avx","",31,[[]]],[11,"from_cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"cast","","",31,[[]]],[11,"cast_mask","","",31,[[["mask",3]],["mask",3]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"from_cast","","",32,[[]]],[11,"from_cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"cast","","",32,[[]]],[11,"cast_mask","","",32,[[["mask",3]],["mask",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"from_cast","","",33,[[]]],[11,"from_cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"cast","","",33,[[]]],[11,"cast_mask","","",33,[[["mask",3]],["mask",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"from_cast","thermite::backends::avx1","",34,[[]]],[11,"from_cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"cast","","",34,[[]]],[11,"cast_mask","","",34,[[["mask",3]],["mask",3]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"from_cast","thermite::backends::avx2","",35,[[]]],[11,"from_cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"cast","","",35,[[]]],[11,"cast_mask","","",35,[[["mask",3]],["mask",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"from_cast","","",36,[[]]],[11,"from_cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"cast","","",36,[[]]],[11,"cast_mask","","",36,[[["mask",3]],["mask",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"from_cast","","",37,[[]]],[11,"from_cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"cast","","",37,[[]]],[11,"cast_mask","","",37,[[["mask",3]],["mask",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"from_cast","","",38,[[]]],[11,"from_cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"cast","","",38,[[]]],[11,"cast_mask","","",38,[[["mask",3]],["mask",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"from_cast","","",39,[[]]],[11,"from_cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"cast","","",39,[[]]],[11,"cast_mask","","",39,[[["mask",3]],["mask",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"from_cast","","",40,[[]]],[11,"from_cast_mask","","",40,[[["mask",3]],["mask",3]]],[11,"cast","","",40,[[]]],[11,"cast_mask","","",40,[[["mask",3]],["mask",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"from_cast","","",41,[[]]],[11,"from_cast_mask","","",41,[[["mask",3]],["mask",3]]],[11,"cast","","",41,[[]]],[11,"cast_mask","","",41,[[["mask",3]],["mask",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"from_cast","thermite::math::complex","",7,[[]]],[11,"from_cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"cast","","",7,[[]]],[11,"cast_mask","","",7,[[["mask",3]],["mask",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from_cast","thermite::rng::pcg32","",9,[[]]],[11,"from_cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"cast","","",9,[[]]],[11,"cast_mask","","",9,[[["mask",3]],["mask",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from_cast","thermite::rng::xoshiro","",10,[[]]],[11,"from_cast_mask","","",10,[[["mask",3]],["mask",3]]],[11,"cast","","",10,[[]]],[11,"cast_mask","","",10,[[["mask",3]],["mask",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"from_cast","","",11,[[]]],[11,"from_cast_mask","","",11,[[["mask",3]],["mask",3]]],[11,"cast","","",11,[[]]],[11,"cast_mask","","",11,[[["mask",3]],["mask",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"from_cast","","",12,[[]]],[11,"from_cast_mask","","",12,[[["mask",3]],["mask",3]]],[11,"cast","","",12,[[]]],[11,"cast_mask","","",12,[[["mask",3]],["mask",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"clone","thermite::arch::avx","",31,[[],["__m256",3]]],[11,"clone","thermite::arch::sse","",29,[[],["__m128d",3]]],[11,"clone","","",28,[[],["__m128",3]]],[11,"clone","thermite::arch::avx","",33,[[],["__m256i",3]]],[11,"clone","","",32,[[],["__m256d",3]]],[11,"clone","thermite::arch::sse","",30,[[],["__m128i",3]]],[11,"fmt","thermite::arch::avx","",33,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","thermite::arch::sse","",28,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","thermite::arch::avx","",31,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",32,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","thermite::arch::sse","",29,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",30,[[["formatter",3]],[["result",4],["error",3]]]],[11,"reseed","thermite::rng::pcg32","",9,[[["vu64",6]]]],[11,"next_u32","","",9,[[],["vu32",6]]],[11,"reseed","thermite::rng::xoshiro","",10,[[["vu64",6]]]],[11,"next_u32","","",10,[[],["vu32",6]]],[11,"next_u64","","",10,[[],["vu64",6]]],[11,"reseed","","",11,[[["vu64",6]]]],[11,"next_u64","","",11,[[],["vu64",6]]],[11,"reseed","","",12,[[["vu64",6]]]],[11,"next_u64","","",12,[[],["vu64",6]]],[11,"from_cast","thermite::backends::avx2","",35,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["mask",3],["avx2",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",35,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["u64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["f64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",35,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",35,[[["i64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",36,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",36,[[["mask",3],["avx2",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",36,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",36,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",36,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",36,[[["mask",3],["avx2",3],["f32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",36,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",36,[[["u64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",36,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",36,[[["i64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",37,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",37,[[["mask",3],["avx2",3],["f32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",37,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",37,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",37,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",37,[[["u64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",37,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",37,[[["f64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",37,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",37,[[["i64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",38,[[["mask",3],["avx2",3],["f32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",38,[[["mask",3],["avx2",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",38,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",38,[[["u64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",38,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",38,[[["f64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["mask",3],["avx2",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["mask",3],["avx2",3],["f32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["f64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["u64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["u64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",39,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",39,[[["i64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["avx2",3],["u32x8",3]]]],[11,"from_cast_mask","","",40,[[["mask",3],["avx2",3],["u32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["f32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["mask",3],["avx2",3],["f32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["i32x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["mask",3],["avx2",3],["i32x8",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["f64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["f64x8",3],["mask",3],["avx2",3]],[["mask",3],["avx2",3]]]],[11,"from_cast","","",40,[[["i64x8",3],["avx2",3]]]],[11,"from_cast_mask","","",40,[[["i64x8",3],["avx2",3],["mask",3]],[["mask",3],["avx2",3]]]],[11,"splat","","",35,[[]]],[11,"undefined","","",35,[[]]],[11,"load_aligned_unchecked","","",35,[[]]],[11,"load_unaligned_unchecked","","",35,[[]]],[11,"store_aligned_unchecked","","",35,[[]]],[11,"store_unaligned_unchecked","","",35,[[]]],[11,"extract_unchecked","","",35,[[]]],[11,"replace_unchecked","","",35,[[]]],[11,"shuffle_unchecked","","",35,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",35,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",35,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","","",36,[[]]],[11,"undefined","","",36,[[]]],[11,"load_aligned_unchecked","","",36,[[]]],[11,"load_unaligned_unchecked","","",36,[[]]],[11,"store_aligned_unchecked","","",36,[[]]],[11,"store_unaligned_unchecked","","",36,[[]]],[11,"extract_unchecked","","",36,[[]]],[11,"replace_unchecked","","",36,[[]]],[11,"shuffle_unchecked","","",36,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",36,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",36,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","","",37,[[]]],[11,"undefined","","",37,[[]]],[11,"load_aligned_unchecked","","",37,[[]]],[11,"load_unaligned_unchecked","","",37,[[]]],[11,"store_aligned_unchecked","","",37,[[]]],[11,"store_unaligned_unchecked","","",37,[[]]],[11,"extract_unchecked","","",37,[[]]],[11,"replace_unchecked","","",37,[[]]],[11,"shuffle_unchecked","","",37,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",37,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",37,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","","",38,[[]]],[11,"undefined","","",38,[[]]],[11,"load_aligned_unchecked","","",38,[[]]],[11,"store_aligned_unchecked","","",38,[[]]],[11,"extract_unchecked","","",38,[[]]],[11,"replace_unchecked","","",38,[[]]],[11,"shuffle_unchecked","","",38,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",38,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",38,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","","",39,[[]]],[11,"undefined","","",39,[[]]],[11,"load_aligned_unchecked","","",39,[[]]],[11,"load_unaligned_unchecked","","",39,[[]]],[11,"store_aligned_unchecked","","",39,[[]]],[11,"store_unaligned_unchecked","","",39,[[]]],[11,"extract_unchecked","","",39,[[]]],[11,"replace_unchecked","","",39,[[]]],[11,"shuffle_unchecked","","",39,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",39,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",39,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","","",40,[[]]],[11,"undefined","","",40,[[]]],[11,"load_aligned_unchecked","","",40,[[]]],[11,"store_aligned_unchecked","","",40,[[]]],[11,"extract_unchecked","","",40,[[]]],[11,"replace_unchecked","","",40,[[]]],[11,"shuffle_unchecked","","",40,[[["simdshuffleindices",8]]]],[11,"gather_unchecked","","",40,[[["i32x8",3],["avx2",3]]]],[11,"gather_masked_unchecked","","",40,[[["mask",3],["i32x8",3],["avx2",3]]]],[11,"splat","thermite","",6,[[]]],[11,"load_aligned_unchecked","","",6,[[]]],[11,"store_aligned_unchecked","","",6,[[]]],[11,"load_unaligned_unchecked","","",6,[[]]],[11,"store_unaligned_unchecked","","",6,[[]]],[11,"extract_unchecked","","",6,[[]]],[11,"replace_unchecked","","",6,[[]]],[11,"shuffle_unchecked","","",6,[[["simdshuffleindices",8]]]],[11,"and_not","thermite::backends::avx2","",35,[[]]],[11,"bitmask","","",35,[[]]],[11,"_mm_not","","",35,[[]]],[11,"_mm_bitand","","",35,[[]]],[11,"_mm_bitor","","",35,[[]]],[11,"_mm_bitxor","","",35,[[]]],[11,"_mm_shr","","",35,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",35,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",35,[[]]],[11,"_mm_shri","","",35,[[]]],[11,"and_not","","",36,[[]]],[11,"bitmask","","",36,[[]]],[11,"_mm_not","","",36,[[]]],[11,"_mm_bitand","","",36,[[]]],[11,"_mm_bitor","","",36,[[]]],[11,"_mm_bitxor","","",36,[[]]],[11,"_mm_shr","","",36,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",36,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",36,[[]]],[11,"_mm_shri","","",36,[[]]],[11,"and_not","","",37,[[]]],[11,"bitmask","","",37,[[]]],[11,"_mm_not","","",37,[[]]],[11,"_mm_bitand","","",37,[[]]],[11,"_mm_bitor","","",37,[[]]],[11,"_mm_bitxor","","",37,[[]]],[11,"_mm_shr","","",37,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",37,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",37,[[]]],[11,"_mm_shri","","",37,[[]]],[11,"and_not","","",38,[[]]],[11,"bitmask","","",38,[[]]],[11,"_mm_not","","",38,[[]]],[11,"_mm_bitand","","",38,[[]]],[11,"_mm_bitor","","",38,[[]]],[11,"_mm_bitxor","","",38,[[]]],[11,"_mm_shr","","",38,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",38,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",38,[[]]],[11,"_mm_shri","","",38,[[]]],[11,"and_not","","",39,[[]]],[11,"bitmask","","",39,[[]]],[11,"_mm_not","","",39,[[]]],[11,"_mm_bitand","","",39,[[]]],[11,"_mm_bitor","","",39,[[]]],[11,"_mm_bitxor","","",39,[[]]],[11,"_mm_shr","","",39,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",39,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",39,[[]]],[11,"_mm_shri","","",39,[[]]],[11,"and_not","","",40,[[]]],[11,"bitmask","","",40,[[]]],[11,"_mm_not","","",40,[[]]],[11,"_mm_bitand","","",40,[[]]],[11,"_mm_bitor","","",40,[[]]],[11,"_mm_bitxor","","",40,[[]]],[11,"_mm_shr","","",40,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shl","","",40,[[["avx2",3],["u32x8",3]]]],[11,"_mm_shli","","",40,[[]]],[11,"_mm_shri","","",40,[[]]],[11,"zero","","",35,[[]]],[11,"one","","",35,[[]]],[11,"indexed","","",35,[[]]],[11,"min_value","","",35,[[]]],[11,"max_value","","",35,[[]]],[11,"min","","",35,[[]]],[11,"max","","",35,[[]]],[11,"min_element","","",35,[[]]],[11,"max_element","","",35,[[]]],[11,"eq","","",35,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",35,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",35,[[],[["mask",3],["avx2",3]]]],[11,"le","","",35,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",35,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",35,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",35,[[]]],[11,"_mm_sub","","",35,[[]]],[11,"_mm_mul","","",35,[[]]],[11,"_mm_div","","",35,[[]]],[11,"_mm_rem","","",35,[[]]],[11,"zero","","",36,[[]]],[11,"one","","",36,[[]]],[11,"indexed","","",36,[[]]],[11,"min_value","","",36,[[]]],[11,"max_value","","",36,[[]]],[11,"min","","",36,[[]]],[11,"max","","",36,[[]]],[11,"min_element","","",36,[[]]],[11,"max_element","","",36,[[]]],[11,"eq","","",36,[[],[["mask",3],["avx2",3]]]],[11,"ne","","",36,[[],[["mask",3],["avx2",3]]]],[11,"lt","","",36,[[],[["mask",3],["avx2",3]]]],[11,"le","","",36,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",36,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",36,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",36,[[]]],[11,"_mm_sub","","",36,[[]]],[11,"_mm_mul","","",36,[[]]],[11,"_mm_div","","",36,[[]]],[11,"_mm_rem","","",36,[[]]],[11,"zero","","",37,[[]]],[11,"one","","",37,[[]]],[11,"indexed","","",37,[[]]],[11,"min","","",37,[[]]],[11,"max","","",37,[[]]],[11,"min_value","","",37,[[]]],[11,"max_value","","",37,[[]]],[11,"min_element","","",37,[[]]],[11,"max_element","","",37,[[]]],[11,"eq","","",37,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",37,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",37,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",37,[[]]],[11,"_mm_sub","","",37,[[]]],[11,"_mm_mul","","",37,[[]]],[11,"_mm_div","","",37,[[]]],[11,"_mm_rem","","",37,[[]]],[11,"zero","","",38,[[]]],[11,"one","","",38,[[]]],[11,"indexed","","",38,[[]]],[11,"min_value","","",38,[[]]],[11,"max_value","","",38,[[]]],[11,"min_element","","",38,[[]]],[11,"max_element","","",38,[[]]],[11,"eq","","",38,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",38,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",38,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",38,[[]]],[11,"_mm_sub","","",38,[[]]],[11,"_mm_mul","","",38,[[]]],[11,"_mm_div","","",38,[[]]],[11,"_mm_rem","","",38,[[]]],[11,"zero","","",39,[[]]],[11,"one","","",39,[[]]],[11,"indexed","","",39,[[]]],[11,"min","","",39,[[]]],[11,"max","","",39,[[]]],[11,"min_value","","",39,[[]]],[11,"max_value","","",39,[[]]],[11,"min_element","","",39,[[]]],[11,"max_element","","",39,[[]]],[11,"eq","","",39,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",39,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",39,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",39,[[]]],[11,"_mm_sub","","",39,[[]]],[11,"_mm_mul","","",39,[[]]],[11,"_mm_div","","",39,[[]]],[11,"_mm_rem","","",39,[[]]],[11,"zero","","",40,[[]]],[11,"one","","",40,[[]]],[11,"indexed","","",40,[[]]],[11,"min_value","","",40,[[]]],[11,"max_value","","",40,[[]]],[11,"min_element","","",40,[[]]],[11,"max_element","","",40,[[]]],[11,"eq","","",40,[[],[["mask",3],["avx2",3]]]],[11,"gt","","",40,[[],[["mask",3],["avx2",3]]]],[11,"ge","","",40,[[],[["mask",3],["avx2",3]]]],[11,"_mm_add","","",40,[[]]],[11,"_mm_sub","","",40,[[]]],[11,"_mm_mul","","",40,[[]]],[11,"_mm_div","","",40,[[]]],[11,"_mm_rem","","",40,[[]]],[11,"into_bits","","",35,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",36,[[],[["u64x8",3],["avx2",3]]]],[11,"into_bits","","",37,[[],[["avx2",3],["u32x8",3]]]],[11,"into_bits","","",38,[[],[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",35,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",36,[[["u64x8",3],["avx2",3]]]],[11,"from_bits","","",37,[[["avx2",3],["u32x8",3]]]],[11,"from_bits","","",38,[[["u64x8",3],["avx2",3]]]],[11,"saturating_add","","",37,[[]]],[11,"saturating_sub","","",37,[[]]],[11,"wrapping_sum","","",37,[[]]],[11,"wrapping_product","","",37,[[]]],[11,"rolv","","",37,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",37,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",37,[[]]],[11,"count_ones","","",37,[[]]],[11,"leading_zeros","","",37,[[]]],[11,"trailing_zeros","","",37,[[]]],[11,"saturating_add","","",38,[[]]],[11,"saturating_sub","","",38,[[]]],[11,"wrapping_sum","","",38,[[]]],[11,"wrapping_product","","",38,[[]]],[11,"rolv","","",38,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",38,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",38,[[]]],[11,"count_ones","","",38,[[]]],[11,"leading_zeros","","",38,[[]]],[11,"trailing_zeros","","",38,[[]]],[11,"saturating_add","","",39,[[]]],[11,"saturating_sub","","",39,[[]]],[11,"wrapping_sum","","",39,[[]]],[11,"wrapping_product","","",39,[[]]],[11,"rolv","","",39,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",39,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",39,[[]]],[11,"count_ones","","",39,[[]]],[11,"leading_zeros","","",39,[[]]],[11,"trailing_zeros","","",39,[[]]],[11,"saturating_add","","",40,[[]]],[11,"saturating_sub","","",40,[[]]],[11,"wrapping_sum","","",40,[[]]],[11,"wrapping_product","","",40,[[]]],[11,"rolv","","",40,[[["avx2",3],["u32x8",3]]]],[11,"rorv","","",40,[[["avx2",3],["u32x8",3]]]],[11,"reverse_bits","","",40,[[]]],[11,"count_ones","","",40,[[]]],[11,"leading_zeros","","",40,[[]]],[11,"trailing_zeros","","",40,[[]]],[11,"next_power_of_two_m1","","",39,[[]]],[11,"next_power_of_two_m1","","",40,[[]]],[11,"neg_one","","",35,[[]]],[11,"min_positive","","",35,[[]]],[11,"signum","","",35,[[]]],[11,"copysign","","",35,[[]]],[11,"abs","","",35,[[]]],[11,"select_negative","","",35,[[]]],[11,"_mm_neg","","",35,[[]]],[11,"neg_one","","",36,[[]]],[11,"min_positive","","",36,[[]]],[11,"signum","","",36,[[]]],[11,"copysign","","",36,[[]]],[11,"abs","","",36,[[]]],[11,"select_negative","","",36,[[]]],[11,"_mm_neg","","",36,[[]]],[11,"neg_one","","",37,[[]]],[11,"min_positive","","",37,[[]]],[11,"abs","","",37,[[]]],[11,"is_positive","","",37,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",37,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",37,[[]]],[11,"_mm_neg","","",37,[[]]],[11,"neg_one","","",38,[[]]],[11,"min_positive","","",38,[[]]],[11,"abs","","",38,[[]]],[11,"is_positive","","",38,[[],[["mask",3],["avx2",3]]]],[11,"is_negative","","",38,[[],[["mask",3],["avx2",3]]]],[11,"select_negative","","",38,[[]]],[11,"_mm_neg","","",38,[[]]],[11,"epsilon","","",35,[[]]],[11,"infinity","","",35,[[]]],[11,"neg_infinity","","",35,[[]]],[11,"neg_zero","","",35,[[]]],[11,"nan","","",35,[[]]],[11,"load_f16_unaligned_unchecked","","",35,[[]]],[11,"store_f16_unaligned_unchecked","","",35,[[]]],[11,"to_int_fast","","",35,[[]]],[11,"to_uint_fast","","",35,[[]]],[11,"sum","","",35,[[]]],[11,"product","","",35,[[]]],[11,"mul_add","","",35,[[]]],[11,"mul_sub","","",35,[[]]],[11,"nmul_add","","",35,[[]]],[11,"nmul_sub","","",35,[[]]],[11,"floor","","",35,[[]]],[11,"ceil","","",35,[[]]],[11,"round","","",35,[[]]],[11,"trunc","","",35,[[]]],[11,"sqrt","","",35,[[]]],[11,"rsqrt","","",35,[[]]],[11,"rsqrt_precise","","",35,[[]]],[11,"rcp","","",35,[[]]],[11,"rcp_precise","","",35,[[]]],[11,"is_subnormal","","",35,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",35,[[],[["mask",3],["avx2",3]]]],[11,"epsilon","","",36,[[]]],[11,"infinity","","",36,[[]]],[11,"neg_infinity","","",36,[[]]],[11,"neg_zero","","",36,[[]]],[11,"nan","","",36,[[]]],[11,"load_f16_unaligned_unchecked","","",36,[[]]],[11,"store_f16_unaligned_unchecked","","",36,[[]]],[11,"to_int_fast","","",36,[[]]],[11,"to_uint_fast","","",36,[[]]],[11,"sum","","",36,[[]]],[11,"product","","",36,[[]]],[11,"mul_add","","",36,[[]]],[11,"mul_sub","","",36,[[]]],[11,"nmul_add","","",36,[[]]],[11,"nmul_sub","","",36,[[]]],[11,"floor","","",36,[[]]],[11,"ceil","","",36,[[]]],[11,"round","","",36,[[]]],[11,"trunc","","",36,[[]]],[11,"sqrt","","",36,[[]]],[11,"is_subnormal","","",36,[[],[["mask",3],["avx2",3]]]],[11,"is_zero_or_subnormal","","",36,[[],[["mask",3],["avx2",3]]]],[11,"deref","thermite","",1,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",1,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx1","",34,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::backends::avx2","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::math::complex","",7,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::pcg32","",9,[[["formatter",3]],["result",6]]],[11,"fmt","thermite::rng::xoshiro","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","thermite","",0,[[["formatter",3]],["result",6]]],[11,"div","thermite::backends::avx2","",35,[[]]],[11,"div","","",36,[[]]],[11,"div","","",37,[[["divider",3]]]],[11,"div","","",37,[[]]],[11,"div","","",38,[[["divider",3]]]],[11,"div","","",38,[[]]],[11,"div","","",39,[[["divider",3]]]],[11,"div","","",39,[[]]],[11,"div","","",40,[[["divider",3]]]],[11,"div","","",40,[[]]],[11,"div","thermite::math::complex","",7,[[]]],[11,"rem","thermite::backends::avx2","",35,[[]]],[11,"rem","","",36,[[]]],[11,"rem","","",37,[[]]],[11,"rem","","",38,[[]]],[11,"rem","","",39,[[]]],[11,"rem","","",40,[[]]],[11,"sub","","",35,[[]]],[11,"sub","","",36,[[]]],[11,"sub","","",37,[[]]],[11,"sub","","",38,[[]]],[11,"sub","","",39,[[]]],[11,"sub","","",40,[[]]],[11,"sub","thermite::math::complex","",7,[[]]],[11,"eq","thermite::backends::avx1","",34,[[["avx1",3]]]],[11,"eq","thermite::backends::avx2","",35,[[]]],[11,"ne","","",35,[[]]],[11,"eq","","",36,[[]]],[11,"ne","","",36,[[]]],[11,"eq","","",37,[[]]],[11,"ne","","",37,[[]]],[11,"eq","","",38,[[]]],[11,"ne","","",38,[[]]],[11,"eq","","",39,[[]]],[11,"ne","","",39,[[]]],[11,"eq","","",40,[[]]],[11,"ne","","",40,[[]]],[11,"eq","","",41,[[["avx2",3]]]],[11,"eq","thermite","",3,[[["branchfreedivider",3]]]],[11,"ne","","",3,[[["branchfreedivider",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",4,[[["vptr",3]]]],[11,"ne","","",4,[[["vptr",3]]]],[11,"eq","","",5,[[]]],[11,"ne","","",5,[[]]],[11,"eq","thermite::rng::pcg32","",9,[[["pcg32",3]]]],[11,"ne","","",9,[[["pcg32",3]]]],[11,"eq","thermite::rng::xoshiro","",10,[[["splitmix64",3]]]],[11,"ne","","",10,[[["splitmix64",3]]]],[11,"eq","","",11,[[["xoshiro128plus",3]]]],[11,"ne","","",11,[[["xoshiro128plus",3]]]],[11,"eq","","",12,[[["xoshiro256plus",3]]]],[11,"ne","","",12,[[["xoshiro256plus",3]]]],[11,"eq","thermite","",0,[[["simdinstructionset",4]]]],[11,"cmp","","",0,[[["simdinstructionset",4]],["ordering",4]]],[11,"partial_cmp","","",0,[[["simdinstructionset",4]],[["option",4],["ordering",4]]]],[11,"add","thermite::backends::avx2","",35,[[]]],[11,"add","","",36,[[]]],[11,"add","","",37,[[]]],[11,"add","","",38,[[]]],[11,"add","","",39,[[]]],[11,"add","","",40,[[]]],[11,"add","thermite::math::complex","",7,[[]]],[11,"mul","thermite::backends::avx2","",35,[[]]],[11,"mul","","",36,[[]]],[11,"mul","","",37,[[]]],[11,"mul","","",38,[[]]],[11,"mul","","",39,[[]]],[11,"mul","","",40,[[]]],[11,"mul","thermite::math::complex","",7,[[]]],[11,"neg","thermite::backends::avx2","",35,[[]]],[11,"neg","","",36,[[]]],[11,"neg","","",37,[[]]],[11,"neg","","",38,[[]]],[11,"neg","thermite::math::complex","",7,[[]]],[11,"add_assign","thermite::backends::avx2","",35,[[]]],[11,"add_assign","","",35,[[]]],[11,"add_assign","","",36,[[]]],[11,"add_assign","","",36,[[]]],[11,"add_assign","","",37,[[]]],[11,"add_assign","","",37,[[]]],[11,"add_assign","","",38,[[]]],[11,"add_assign","","",38,[[]]],[11,"add_assign","","",39,[[]]],[11,"add_assign","","",39,[[]]],[11,"add_assign","","",40,[[]]],[11,"add_assign","","",40,[[]]],[11,"sub_assign","","",35,[[]]],[11,"sub_assign","","",35,[[]]],[11,"sub_assign","","",36,[[]]],[11,"sub_assign","","",36,[[]]],[11,"sub_assign","","",37,[[]]],[11,"sub_assign","","",37,[[]]],[11,"sub_assign","","",38,[[]]],[11,"sub_assign","","",38,[[]]],[11,"sub_assign","","",39,[[]]],[11,"sub_assign","","",39,[[]]],[11,"sub_assign","","",40,[[]]],[11,"sub_assign","","",40,[[]]],[11,"mul_assign","","",35,[[]]],[11,"mul_assign","","",35,[[]]],[11,"mul_assign","","",36,[[]]],[11,"mul_assign","","",36,[[]]],[11,"mul_assign","","",37,[[]]],[11,"mul_assign","","",37,[[]]],[11,"mul_assign","","",38,[[]]],[11,"mul_assign","","",38,[[]]],[11,"mul_assign","","",39,[[]]],[11,"mul_assign","","",39,[[]]],[11,"mul_assign","","",40,[[]]],[11,"mul_assign","","",40,[[]]],[11,"div_assign","","",35,[[]]],[11,"div_assign","","",35,[[]]],[11,"div_assign","","",36,[[]]],[11,"div_assign","","",36,[[]]],[11,"div_assign","","",37,[[]]],[11,"div_assign","","",37,[[]]],[11,"div_assign","","",38,[[]]],[11,"div_assign","","",38,[[]]],[11,"div_assign","","",39,[[]]],[11,"div_assign","","",39,[[]]],[11,"div_assign","","",40,[[]]],[11,"div_assign","","",40,[[]]],[11,"rem_assign","","",35,[[]]],[11,"rem_assign","","",35,[[]]],[11,"rem_assign","","",36,[[]]],[11,"rem_assign","","",36,[[]]],[11,"rem_assign","","",37,[[]]],[11,"rem_assign","","",37,[[]]],[11,"rem_assign","","",38,[[]]],[11,"rem_assign","","",38,[[]]],[11,"rem_assign","","",39,[[]]],[11,"rem_assign","","",39,[[]]],[11,"rem_assign","","",40,[[]]],[11,"rem_assign","","",40,[[]]],[11,"not","","",35,[[]]],[11,"not","","",36,[[]]],[11,"not","","",37,[[]]],[11,"not","","",38,[[]]],[11,"not","","",39,[[]]],[11,"not","","",40,[[]]],[11,"not","thermite","",5,[[]]],[11,"not","","",6,[[]]],[11,"bitand","thermite::backends::avx2","",35,[[]]],[11,"bitand","","",36,[[]]],[11,"bitand","","",37,[[]]],[11,"bitand","","",38,[[]]],[11,"bitand","","",39,[[]]],[11,"bitand","","",40,[[]]],[11,"bitand","thermite","",5,[[]]],[11,"bitand","","",6,[[]]],[11,"bitor","thermite::backends::avx2","",35,[[]]],[11,"bitor","","",36,[[]]],[11,"bitor","","",37,[[]]],[11,"bitor","","",38,[[]]],[11,"bitor","","",39,[[]]],[11,"bitor","","",40,[[]]],[11,"bitor","thermite","",5,[[]]],[11,"bitor","","",6,[[]]],[11,"bitxor","thermite::backends::avx2","",35,[[]]],[11,"bitxor","","",36,[[]]],[11,"bitxor","","",37,[[]]],[11,"bitxor","","",38,[[]]],[11,"bitxor","","",39,[[]]],[11,"bitxor","","",40,[[]]],[11,"bitxor","thermite","",5,[[]]],[11,"bitxor","","",6,[[]]],[11,"shl","thermite::backends::avx2","",35,[[]]],[11,"shl","","",35,[[]]],[11,"shl","","",36,[[]]],[11,"shl","","",36,[[]]],[11,"shl","","",37,[[]]],[11,"shl","","",37,[[]]],[11,"shl","","",38,[[]]],[11,"shl","","",38,[[]]],[11,"shl","","",39,[[]]],[11,"shl","","",39,[[]]],[11,"shl","","",40,[[]]],[11,"shl","","",40,[[]]],[11,"shr","","",35,[[]]],[11,"shr","","",35,[[]]],[11,"shr","","",36,[[]]],[11,"shr","","",36,[[]]],[11,"shr","","",37,[[]]],[11,"shr","","",37,[[]]],[11,"shr","","",38,[[]]],[11,"shr","","",38,[[]]],[11,"shr","","",39,[[]]],[11,"shr","","",39,[[]]],[11,"shr","","",40,[[]]],[11,"shr","","",40,[[]]],[11,"bitand_assign","","",35,[[]]],[11,"bitand_assign","","",35,[[]]],[11,"bitand_assign","","",36,[[]]],[11,"bitand_assign","","",36,[[]]],[11,"bitand_assign","","",37,[[]]],[11,"bitand_assign","","",37,[[]]],[11,"bitand_assign","","",38,[[]]],[11,"bitand_assign","","",38,[[]]],[11,"bitand_assign","","",39,[[]]],[11,"bitand_assign","","",39,[[]]],[11,"bitand_assign","","",40,[[]]],[11,"bitand_assign","","",40,[[]]],[11,"bitand_assign","thermite","",5,[[]]],[11,"bitand_assign","","",6,[[]]],[11,"bitor_assign","thermite::backends::avx2","",35,[[]]],[11,"bitor_assign","","",35,[[]]],[11,"bitor_assign","","",36,[[]]],[11,"bitor_assign","","",36,[[]]],[11,"bitor_assign","","",37,[[]]],[11,"bitor_assign","","",37,[[]]],[11,"bitor_assign","","",38,[[]]],[11,"bitor_assign","","",38,[[]]],[11,"bitor_assign","","",39,[[]]],[11,"bitor_assign","","",39,[[]]],[11,"bitor_assign","","",40,[[]]],[11,"bitor_assign","","",40,[[]]],[11,"bitor_assign","thermite","",5,[[]]],[11,"bitor_assign","","",6,[[]]],[11,"bitxor_assign","thermite::backends::avx2","",35,[[]]],[11,"bitxor_assign","","",35,[[]]],[11,"bitxor_assign","","",36,[[]]],[11,"bitxor_assign","","",36,[[]]],[11,"bitxor_assign","","",37,[[]]],[11,"bitxor_assign","","",37,[[]]],[11,"bitxor_assign","","",38,[[]]],[11,"bitxor_assign","","",38,[[]]],[11,"bitxor_assign","","",39,[[]]],[11,"bitxor_assign","","",39,[[]]],[11,"bitxor_assign","","",40,[[]]],[11,"bitxor_assign","","",40,[[]]],[11,"bitxor_assign","thermite","",5,[[]]],[11,"bitxor_assign","","",6,[[]]],[11,"shl_assign","thermite::backends::avx2","",35,[[]]],[11,"shl_assign","","",35,[[]]],[11,"shl_assign","","",36,[[]]],[11,"shl_assign","","",36,[[]]],[11,"shl_assign","","",37,[[]]],[11,"shl_assign","","",37,[[]]],[11,"shl_assign","","",38,[[]]],[11,"shl_assign","","",38,[[]]],[11,"shl_assign","","",39,[[]]],[11,"shl_assign","","",39,[[]]],[11,"shl_assign","","",40,[[]]],[11,"shl_assign","","",40,[[]]],[11,"shr_assign","","",35,[[]]],[11,"shr_assign","","",35,[[]]],[11,"shr_assign","","",36,[[]]],[11,"shr_assign","","",36,[[]]],[11,"shr_assign","","",37,[[]]],[11,"shr_assign","","",37,[[]]],[11,"shr_assign","","",38,[[]]],[11,"shr_assign","","",38,[[]]],[11,"shr_assign","","",39,[[]]],[11,"shr_assign","","",39,[[]]],[11,"shr_assign","","",40,[[]]],[11,"shr_assign","","",40,[[]]],[11,"drop","thermite","",1,[[]]],[11,"hash","thermite::backends::avx1","",34,[[]]],[11,"hash","thermite::backends::avx2","",41,[[]]],[11,"hash","thermite","",0,[[]]],[11,"clone","thermite::backends::avx1","",34,[[],["avx1",3]]],[11,"clone","thermite::backends::avx2","",35,[[],["f32x8",3]]],[11,"clone","","",36,[[],["f64x8",3]]],[11,"clone","","",37,[[],["i32x8",3]]],[11,"clone","","",38,[[],["i64x8",3]]],[11,"clone","","",39,[[],["u32x8",3]]],[11,"clone","","",40,[[],["u64x8",3]]],[11,"clone","","",41,[[],["avx2",3]]],[11,"clone","thermite","",3,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",4,[[],["vptr",3]]],[11,"clone","","",6,[[],["mask",3]]],[11,"clone","","",5,[[]]],[11,"clone","thermite::math::complex","",7,[[],["complex",3]]],[11,"clone","thermite::rng::pcg32","",9,[[],["pcg32",3]]],[11,"clone","thermite::rng::xoshiro","",10,[[],["splitmix64",3]]],[11,"clone","","",11,[[],["xoshiro128plus",3]]],[11,"clone","","",12,[[],["xoshiro256plus",3]]],[11,"clone","thermite","",0,[[],["simdinstructionset",4]]],[11,"default","thermite::backends::avx2","",35,[[]]],[11,"default","","",36,[[]]],[11,"default","","",37,[[]]],[11,"default","","",38,[[]]],[11,"default","","",39,[[]]],[11,"default","","",40,[[]]],[11,"default","thermite","",6,[[]]]],"p":[[4,"SimdInstructionSet"],[3,"VectorBuffer"],[3,"Divider"],[3,"BranchfreeDivider"],[3,"VPtr"],[3,"BitMask"],[3,"Mask"],[3,"Complex"],[8,"SimdVectorizedMath"],[3,"PCG32"],[3,"SplitMix64"],[3,"Xoshiro128Plus"],[3,"Xoshiro256Plus"],[8,"SimdRng"],[8,"SimdFromCast"],[8,"SimdCastTo"],[8,"SimdCasts"],[8,"SimdShuffleIndices"],[8,"SimdVectorBase"],[8,"SimdBitwise"],[8,"SimdVector"],[8,"SimdIntoBits"],[8,"SimdFromBits"],[8,"SimdIntVector"],[8,"SimdUnsignedIntVector"],[8,"SimdSignedVector"],[8,"SimdFloatVector"],[8,"Simd"],[3,"__m128"],[3,"__m128d"],[3,"__m128i"],[3,"__m256"],[3,"__m256d"],[3,"__m256i"],[3,"AVX1"],[3,"f32x8"],[3,"f64x8"],[3,"i32x8"],[3,"i64x8"],[3,"u32x8"],[3,"u64x8"],[3,"AVX2"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);